// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: api.proto
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace Nakama {

  /// <summary>Holder for reflection information generated from api.proto</summary>
  public static partial class ApiReflection {

    #region Descriptor
    /// <summary>File descriptor for api.proto</summary>
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static ApiReflection() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "CglhcGkucHJvdG8SBnNlcnZlciIeCglIZWFydGJlYXQSEQoJdGltZXN0YW1w",
            "GAEgASgDIsQDCgVFcnJvchIMCgRjb2RlGAEgASgFEg8KB21lc3NhZ2UYAiAB",
            "KAkimwMKBENvZGUSFQoRUlVOVElNRV9FWENFUFRJT04QABIYChRVTlJFQ09H",
            "TklaRURfUEFZTE9BRBABEhMKD01JU1NJTkdfUEFZTE9BRBACEg0KCUJBRF9J",
            "TlBVVBADEg4KCkFVVEhfRVJST1IQBBISCg5VU0VSX05PVF9GT1VORBAFEhcK",
            "E1VTRVJfUkVHSVNURVJfSU5VU0UQBhITCg9VU0VSX0xJTktfSU5VU0UQBxIi",
            "Ch5VU0VSX0xJTktfUFJPVklERVJfVU5BVkFJTEFCTEUQCBIaChZVU0VSX1VO",
            "TElOS19ESVNBTExPV0VEEAkSFQoRVVNFUl9IQU5ETEVfSU5VU0UQChIUChBH",
            "Uk9VUF9OQU1FX0lOVVNFEAsSFAoQR1JPVVBfTEFTVF9BRE1JThAMEhQKEFNU",
            "T1JBR0VfUkVKRUNURUQQDRITCg9NQVRDSF9OT1RfRk9VTkQQDhIeChpSVU5U",
            "SU1FX0ZVTkNUSU9OX05PVF9GT1VORBAPEh4KGlJVTlRJTUVfRlVOQ1RJT05f",
            "RVhDRVBUSU9OEBAiqAMKE0F1dGhlbnRpY2F0ZVJlcXVlc3QSEwoLY29sbGF0",
            "aW9uSWQYASABKAkSMgoFZW1haWwYAiABKAsyIS5zZXJ2ZXIuQXV0aGVudGlj",
            "YXRlUmVxdWVzdC5FbWFpbEgAEhIKCGZhY2Vib29rGAMgASgJSAASEAoGZ29v",
            "Z2xlGAQgASgJSAASPQoLZ2FtZV9jZW50ZXIYBSABKAsyJi5zZXJ2ZXIuQXV0",
            "aGVudGljYXRlUmVxdWVzdC5HYW1lQ2VudGVySAASDwoFc3RlYW0YBiABKAlI",
            "ABIQCgZkZXZpY2UYByABKAlIABIQCgZjdXN0b20YCCABKAlIABooCgVFbWFp",
            "bBINCgVlbWFpbBgBIAEoCRIQCghwYXNzd29yZBgCIAEoCRp+CgpHYW1lQ2Vu",
            "dGVyEhEKCXBsYXllcl9pZBgBIAEoCRIRCglidW5kbGVfaWQYAiABKAkSEQoJ",
            "dGltZXN0YW1wGAMgASgDEgwKBHNhbHQYBCABKAkSEQoJc2lnbmF0dXJlGAUg",
            "ASgJEhYKDnB1YmxpY19rZXlfdXJsGAYgASgJQgQKAmlkIqMCChRBdXRoZW50",
            "aWNhdGVSZXNwb25zZRIUCgxjb2xsYXRpb25faWQYASABKAkSNwoHc2Vzc2lv",
            "bhgCIAEoCzIkLnNlcnZlci5BdXRoZW50aWNhdGVSZXNwb25zZS5TZXNzaW9u",
            "SAASMwoFZXJyb3IYAyABKAsyIi5zZXJ2ZXIuQXV0aGVudGljYXRlUmVzcG9u",
            "c2UuRXJyb3JIABorCgdTZXNzaW9uEg0KBXRva2VuGAEgASgJEhEKCXVkcF90",
            "b2tlbhgCIAEoCRpUCgVFcnJvchIMCgRjb2RlGAEgASgFEg8KB21lc3NhZ2UY",
            "AiABKAkSLAoHcmVxdWVzdBgDIAEoCzIbLnNlcnZlci5BdXRoZW50aWNhdGVS",
            "ZXF1ZXN0QgQKAmlkItUaCghFbnZlbG9wZRIUCgxjb2xsYXRpb25faWQYASAB",
            "KAkSHgoFZXJyb3IYAiABKAsyDS5zZXJ2ZXIuRXJyb3JIABImCgloZWFydGJl",
            "YXQYAyABKAsyES5zZXJ2ZXIuSGVhcnRiZWF0SAASIAoGbG9nb3V0GAQgASgL",
            "Mg4uc2VydmVyLkxvZ291dEgAEh0KBGxpbmsYBSABKAsyDS5zZXJ2ZXIuVExp",
            "bmtIABIhCgZ1bmxpbmsYBiABKAsyDy5zZXJ2ZXIuVFVubGlua0gAEigKCnNl",
            "bGZfZmV0Y2gYByABKAsyEi5zZXJ2ZXIuVFNlbGZGZXRjaEgAEioKC3NlbGZf",
            "dXBkYXRlGAggASgLMhMuc2VydmVyLlRTZWxmVXBkYXRlSAASKgoLdXNlcnNf",
            "ZmV0Y2gYCSABKAsyEy5zZXJ2ZXIuVFVzZXJzRmV0Y2hIABIdCgRzZWxmGAog",
            "ASgLMg0uc2VydmVyLlRTZWxmSAASHwoFdXNlcnMYCyABKAsyDi5zZXJ2ZXIu",
            "VFVzZXJzSAASKgoLZnJpZW5kc19hZGQYDCABKAsyEy5zZXJ2ZXIuVEZyaWVu",
            "ZHNBZGRIABIwCg5mcmllbmRzX3JlbW92ZRgNIAEoCzIWLnNlcnZlci5URnJp",
            "ZW5kc1JlbW92ZUgAEi4KDWZyaWVuZHNfYmxvY2sYDiABKAsyFS5zZXJ2ZXIu",
            "VEZyaWVuZHNCbG9ja0gAEiwKDGZyaWVuZHNfbGlzdBgPIAEoCzIULnNlcnZl",
            "ci5URnJpZW5kc0xpc3RIABIjCgdmcmllbmRzGBAgASgLMhAuc2VydmVyLlRG",
            "cmllbmRzSAASLgoNZ3JvdXBzX2NyZWF0ZRgRIAEoCzIVLnNlcnZlci5UR3Jv",
            "dXBzQ3JlYXRlSAASLgoNZ3JvdXBzX3VwZGF0ZRgSIAEoCzIVLnNlcnZlci5U",
            "R3JvdXBzVXBkYXRlSAASLgoNZ3JvdXBzX3JlbW92ZRgTIAEoCzIVLnNlcnZl",
            "ci5UR3JvdXBzUmVtb3ZlSAASLAoMZ3JvdXBzX2ZldGNoGBQgASgLMhQuc2Vy",
            "dmVyLlRHcm91cHNGZXRjaEgAEioKC2dyb3Vwc19saXN0GBUgASgLMhMuc2Vy",
            "dmVyLlRHcm91cHNMaXN0SAASMwoQZ3JvdXBzX3NlbGZfbGlzdBgWIAEoCzIX",
            "LnNlcnZlci5UR3JvdXBzU2VsZkxpc3RIABIzChBncm91cF91c2Vyc19saXN0",
            "GBcgASgLMhcuc2VydmVyLlRHcm91cFVzZXJzTGlzdEgAEioKC2dyb3Vwc19q",
            "b2luGBggASgLMhMuc2VydmVyLlRHcm91cHNKb2luSAASLAoMZ3JvdXBzX2xl",
            "YXZlGBkgASgLMhQuc2VydmVyLlRHcm91cHNMZWF2ZUgAEjEKD2dyb3VwX3Vz",
            "ZXJzX2FkZBgaIAEoCzIWLnNlcnZlci5UR3JvdXBVc2Vyc0FkZEgAEjMKEGdy",
            "b3VwX3VzZXJzX2tpY2sYGyABKAsyFy5zZXJ2ZXIuVEdyb3VwVXNlcnNLaWNr",
            "SAASOQoTZ3JvdXBfdXNlcnNfcHJvbW90ZRgcIAEoCzIaLnNlcnZlci5UR3Jv",
            "dXBVc2Vyc1Byb21vdGVIABIhCgZncm91cHMYHSABKAsyDy5zZXJ2ZXIuVEdy",
            "b3Vwc0gAEioKC2dyb3Vwc19zZWxmGB4gASgLMhMuc2VydmVyLlRHcm91cHNT",
            "ZWxmSAASKgoLZ3JvdXBfdXNlcnMYHyABKAsyEy5zZXJ2ZXIuVEdyb3VwVXNl",
            "cnNIABIqCgt0b3BpY3Nfam9pbhggIAEoCzITLnNlcnZlci5UVG9waWNzSm9p",
            "bkgAEiwKDHRvcGljc19sZWF2ZRghIAEoCzIULnNlcnZlci5UVG9waWNzTGVh",
            "dmVIABI3ChJ0b3BpY19tZXNzYWdlX3NlbmQYIiABKAsyGS5zZXJ2ZXIuVFRv",
            "cGljTWVzc2FnZVNlbmRIABI5ChN0b3BpY19tZXNzYWdlc19saXN0GCMgASgL",
            "Mhouc2VydmVyLlRUb3BpY01lc3NhZ2VzTGlzdEgAEiEKBnRvcGljcxgkIAEo",
            "CzIPLnNlcnZlci5UVG9waWNzSAASNQoRdG9waWNfbWVzc2FnZV9hY2sYJSAB",
            "KAsyGC5zZXJ2ZXIuVFRvcGljTWVzc2FnZUFja0gAEi0KDXRvcGljX21lc3Nh",
            "Z2UYJiABKAsyFC5zZXJ2ZXIuVG9waWNNZXNzYWdlSAASMAoOdG9waWNfbWVz",
            "c2FnZXMYJyABKAsyFi5zZXJ2ZXIuVFRvcGljTWVzc2FnZXNIABIvCg50b3Bp",
            "Y19wcmVzZW5jZRgoIAEoCzIVLnNlcnZlci5Ub3BpY1ByZXNlbmNlSAASLAoM",
            "bWF0Y2hfY3JlYXRlGCkgASgLMhQuc2VydmVyLlRNYXRjaENyZWF0ZUgAEiwK",
            "DG1hdGNoZXNfam9pbhgqIAEoCzIULnNlcnZlci5UTWF0Y2hlc0pvaW5IABIu",
            "Cg1tYXRjaGVzX2xlYXZlGCsgASgLMhUuc2VydmVyLlRNYXRjaGVzTGVhdmVI",
            "ABIwCg9tYXRjaF9kYXRhX3NlbmQYLCABKAsyFS5zZXJ2ZXIuTWF0Y2hEYXRh",
            "U2VuZEgAEh8KBW1hdGNoGC0gASgLMg4uc2VydmVyLlRNYXRjaEgAEiMKB21h",
            "dGNoZXMYLiABKAsyEC5zZXJ2ZXIuVE1hdGNoZXNIABInCgptYXRjaF9kYXRh",
            "GC8gASgLMhEuc2VydmVyLk1hdGNoRGF0YUgAEi8KDm1hdGNoX3ByZXNlbmNl",
            "GDAgASgLMhUuc2VydmVyLk1hdGNoUHJlc2VuY2VIABIsCgxzdG9yYWdlX2xp",
            "c3QYMSABKAsyFC5zZXJ2ZXIuVFN0b3JhZ2VMaXN0SAASLgoNc3RvcmFnZV9m",
            "ZXRjaBgyIAEoCzIVLnNlcnZlci5UU3RvcmFnZUZldGNoSAASLgoNc3RvcmFn",
            "ZV93cml0ZRgzIAEoCzIVLnNlcnZlci5UU3RvcmFnZVdyaXRlSAASMAoOc3Rv",
            "cmFnZV91cGRhdGUYNCABKAsyFi5zZXJ2ZXIuVFN0b3JhZ2VVcGRhdGVIABIw",
            "Cg5zdG9yYWdlX3JlbW92ZRg1IAEoCzIWLnNlcnZlci5UU3RvcmFnZVJlbW92",
            "ZUgAEiwKDHN0b3JhZ2VfZGF0YRg2IAEoCzIULnNlcnZlci5UU3RvcmFnZURh",
            "dGFIABIsCgxzdG9yYWdlX2tleXMYNyABKAsyFC5zZXJ2ZXIuVFN0b3JhZ2VL",
            "ZXlzSAASNgoRbGVhZGVyYm9hcmRzX2xpc3QYOCABKAsyGS5zZXJ2ZXIuVExl",
            "YWRlcmJvYXJkc0xpc3RIABJFChlsZWFkZXJib2FyZF9yZWNvcmRzX3dyaXRl",
            "GDkgASgLMiAuc2VydmVyLlRMZWFkZXJib2FyZFJlY29yZHNXcml0ZUgAEkUK",
            "GWxlYWRlcmJvYXJkX3JlY29yZHNfZmV0Y2gYOiABKAsyIC5zZXJ2ZXIuVExl",
            "YWRlcmJvYXJkUmVjb3Jkc0ZldGNoSAASQwoYbGVhZGVyYm9hcmRfcmVjb3Jk",
            "c19saXN0GDsgASgLMh8uc2VydmVyLlRMZWFkZXJib2FyZFJlY29yZHNMaXN0",
            "SAASLQoMbGVhZGVyYm9hcmRzGDwgASgLMhUuc2VydmVyLlRMZWFkZXJib2Fy",
            "ZHNIABI6ChNsZWFkZXJib2FyZF9yZWNvcmRzGD0gASgLMhsuc2VydmVyLlRM",
            "ZWFkZXJib2FyZFJlY29yZHNIABIuCg1tYXRjaG1ha2VfYWRkGD4gASgLMhUu",
            "c2VydmVyLlRNYXRjaG1ha2VBZGRIABI0ChBtYXRjaG1ha2VfcmVtb3ZlGD8g",
            "ASgLMhguc2VydmVyLlRNYXRjaG1ha2VSZW1vdmVIABI0ChBtYXRjaG1ha2Vf",
            "dGlja2V0GEAgASgLMhguc2VydmVyLlRNYXRjaG1ha2VUaWNrZXRIABI1ChFt",
            "YXRjaG1ha2VfbWF0Y2hlZBhBIAEoCzIYLnNlcnZlci5NYXRjaG1ha2VNYXRj",
            "aGVkSAASGwoDcnBjGEIgASgLMgwuc2VydmVyLlRScGNIABIvCghwdXJjaGFz",
            "ZRhDIAEoCzIbLnNlcnZlci5UUHVyY2hhc2VWYWxpZGF0aW9uSAASMgoPcHVy",
            "Y2hhc2VfcmVjb3JkGEQgASgLMhcuc2VydmVyLlRQdXJjaGFzZVJlY29yZEgA",
            "EjgKEm5vdGlmaWNhdGlvbnNfbGlzdBhFIAEoCzIaLnNlcnZlci5UTm90aWZp",
            "Y2F0aW9uc0xpc3RIABI8ChRub3RpZmljYXRpb25zX3JlbW92ZRhGIAEoCzIc",
            "LnNlcnZlci5UTm90aWZpY2F0aW9uc1JlbW92ZUgAEi8KDW5vdGlmaWNhdGlv",
            "bnMYRyABKAsyFi5zZXJ2ZXIuVE5vdGlmaWNhdGlvbnNIABIzChJsaXZlX25v",
            "dGlmaWNhdGlvbnMYSCABKAsyFS5zZXJ2ZXIuTm90aWZpY2F0aW9uc0gAQgkK",
            "B3BheWxvYWQiCAoGTG9nb3V0ItsBCgVUTGluaxIyCgVlbWFpbBgBIAEoCzIh",
            "LnNlcnZlci5BdXRoZW50aWNhdGVSZXF1ZXN0LkVtYWlsSAASEgoIZmFjZWJv",
            "b2sYAiABKAlIABIQCgZnb29nbGUYAyABKAlIABI9CgtnYW1lX2NlbnRlchgE",
            "IAEoCzImLnNlcnZlci5BdXRoZW50aWNhdGVSZXF1ZXN0LkdhbWVDZW50ZXJI",
            "ABIPCgVzdGVhbRgFIAEoCUgAEhAKBmRldmljZRgGIAEoCUgAEhAKBmN1c3Rv",
            "bRgHIAEoCUgAQgQKAmlkIpIBCgdUVW5saW5rEg8KBWVtYWlsGAEgASgJSAAS",
            "EgoIZmFjZWJvb2sYAiABKAlIABIQCgZnb29nbGUYAyABKAlIABIVCgtnYW1l",
            "X2NlbnRlchgEIAEoCUgAEg8KBXN0ZWFtGAUgASgJSAASEAoGZGV2aWNlGAYg",
            "ASgJSAASEAoGY3VzdG9tGAcgASgJSABCBAoCaWQizAEKBFVzZXISCgoCaWQY",
            "ASABKAkSDgoGaGFuZGxlGAIgASgJEhAKCGZ1bGxuYW1lGAMgASgJEhIKCmF2",
            "YXRhcl91cmwYBCABKAkSDAoEbGFuZxgFIAEoCRIQCghsb2NhdGlvbhgGIAEo",
            "CRIQCgh0aW1lem9uZRgHIAEoCRIQCghtZXRhZGF0YRgIIAEoCRISCgpjcmVh",
            "dGVkX2F0GAkgASgDEhIKCnVwZGF0ZWRfYXQYCiABKAMSFgoObGFzdF9vbmxp",
            "bmVfYXQYCyABKAMiuwEKBFNlbGYSGgoEdXNlchgBIAEoCzIMLnNlcnZlci5V",
            "c2VyEhAKCHZlcmlmaWVkGAIgASgIEg0KBWVtYWlsGAMgASgJEhIKCmRldmlj",
            "ZV9pZHMYBCADKAkSEwoLZmFjZWJvb2tfaWQYBSABKAkSEQoJZ29vZ2xlX2lk",
            "GAYgASgJEhUKDWdhbWVjZW50ZXJfaWQYByABKAkSEAoIc3RlYW1faWQYCCAB",
            "KAkSEQoJY3VzdG9tX2lkGAkgASgJIgwKClRTZWxmRmV0Y2giIwoFVFNlbGYS",
            "GgoEc2VsZhgBIAEoCzIMLnNlcnZlci5TZWxmIocBCgtUU2VsZlVwZGF0ZRIO",
            "CgZoYW5kbGUYASABKAkSEAoIZnVsbG5hbWUYAiABKAkSEAoIdGltZXpvbmUY",
            "AyABKAkSEAoIbG9jYXRpb24YBCABKAkSDAoEbGFuZxgFIAEoCRIQCghtZXRh",
            "ZGF0YRgGIAEoCRISCgphdmF0YXJfdXJsGAcgASgJInUKC1RVc2Vyc0ZldGNo",
            "Ei0KBXVzZXJzGAEgAygLMh4uc2VydmVyLlRVc2Vyc0ZldGNoLlVzZXJzRmV0",
            "Y2gaNwoKVXNlcnNGZXRjaBIRCgd1c2VyX2lkGAEgASgJSAASEAoGaGFuZGxl",
            "GAIgASgJSABCBAoCaWQiJQoGVFVzZXJzEhsKBXVzZXJzGAEgAygLMgwuc2Vy",
            "dmVyLlVzZXIiMwoGRnJpZW5kEhoKBHVzZXIYASABKAsyDC5zZXJ2ZXIuVXNl",
            "chINCgVzdGF0ZRgCIAEoAyJ3CgtURnJpZW5kc0FkZBIvCgdmcmllbmRzGAEg",
            "AygLMh4uc2VydmVyLlRGcmllbmRzQWRkLkZyaWVuZHNBZGQaNwoKRnJpZW5k",
            "c0FkZBIRCgd1c2VyX2lkGAEgASgJSAASEAoGaGFuZGxlGAIgASgJSABCBAoC",
            "aWQiIgoOVEZyaWVuZHNSZW1vdmUSEAoIdXNlcl9pZHMYASADKAkiIQoNVEZy",
            "aWVuZHNCbG9jaxIQCgh1c2VyX2lkcxgBIAMoCSIOCgxURnJpZW5kc0xpc3Qi",
            "KwoIVEZyaWVuZHMSHwoHZnJpZW5kcxgBIAMoCzIOLnNlcnZlci5GcmllbmQi",
            "3QEKBUdyb3VwEgoKAmlkGAEgASgJEg8KB3ByaXZhdGUYAiABKAgSEgoKY3Jl",
            "YXRvcl9pZBgDIAEoCRIMCgRuYW1lGAQgASgJEhMKC2Rlc2NyaXB0aW9uGAUg",
            "ASgJEhIKCmF2YXRhcl91cmwYBiABKAkSDAoEbGFuZxgHIAEoCRIVCg11dGNf",
            "b2Zmc2V0X21zGAggASgDEhAKCG1ldGFkYXRhGAkgASgJEg0KBWNvdW50GAog",
            "ASgDEhIKCmNyZWF0ZWRfYXQYCyABKAMSEgoKdXBkYXRlZF9hdBgMIAEoAyK5",
            "AQoNVEdyb3Vwc0NyZWF0ZRIxCgZncm91cHMYASADKAsyIS5zZXJ2ZXIuVEdy",
            "b3Vwc0NyZWF0ZS5Hcm91cENyZWF0ZRp1CgtHcm91cENyZWF0ZRIMCgRuYW1l",
            "GAEgASgJEhMKC2Rlc2NyaXB0aW9uGAIgASgJEhIKCmF2YXRhcl91cmwYAyAB",
            "KAkSDAoEbGFuZxgEIAEoCRIQCghtZXRhZGF0YRgFIAEoCRIPCgdwcml2YXRl",
            "GAYgASgIIswBCg1UR3JvdXBzVXBkYXRlEjEKBmdyb3VwcxgBIAMoCzIhLnNl",
            "cnZlci5UR3JvdXBzVXBkYXRlLkdyb3VwVXBkYXRlGocBCgtHcm91cFVwZGF0",
            "ZRIQCghncm91cF9pZBgBIAEoCRIPCgdwcml2YXRlGAIgASgIEgwKBG5hbWUY",
            "AyABKAkSEwoLZGVzY3JpcHRpb24YBCABKAkSEgoKYXZhdGFyX3VybBgFIAEo",
            "CRIMCgRsYW5nGAYgASgJEhAKCG1ldGFkYXRhGAcgASgJIiIKDVRHcm91cHNS",
            "ZW1vdmUSEQoJZ3JvdXBfaWRzGAEgAygJIhEKD1RHcm91cHNTZWxmTGlzdCJ3",
            "CgxUR3JvdXBzRmV0Y2gSLwoGZ3JvdXBzGAEgAygLMh8uc2VydmVyLlRHcm91",
            "cHNGZXRjaC5Hcm91cEZldGNoGjYKCkdyb3VwRmV0Y2gSEgoIZ3JvdXBfaWQY",
            "ASABKAlIABIOCgRuYW1lGAIgASgJSABCBAoCaWQiiAEKC1RHcm91cHNMaXN0",
            "EhIKCnBhZ2VfbGltaXQYASABKAMSFAoMb3JkZXJfYnlfYXNjGAIgASgIEg4K",
            "BGxhbmcYAyABKAlIABIUCgpjcmVhdGVkX2F0GAQgASgDSAASDwoFY291bnQY",
            "BSABKANIABIOCgZjdXJzb3IYByABKAlCCAoGZmlsdGVyIjgKB1RHcm91cHMS",
            "HQoGZ3JvdXBzGAEgAygLMg0uc2VydmVyLkdyb3VwEg4KBmN1cnNvchgCIAEo",
            "CSJ7CgtUR3JvdXBzU2VsZhIyCgtncm91cHNfc2VsZhgBIAMoCzIdLnNlcnZl",
            "ci5UR3JvdXBzU2VsZi5Hcm91cFNlbGYaOAoJR3JvdXBTZWxmEhwKBWdyb3Vw",
            "GAEgASgLMg0uc2VydmVyLkdyb3VwEg0KBXN0YXRlGAIgASgDIjYKCUdyb3Vw",
            "VXNlchIaCgR1c2VyGAEgASgLMgwuc2VydmVyLlVzZXISDQoFc3RhdGUYAiAB",
            "KAMiIwoPVEdyb3VwVXNlcnNMaXN0EhAKCGdyb3VwX2lkGAEgASgJIi8KC1RH",
            "cm91cFVzZXJzEiAKBXVzZXJzGAEgAygLMhEuc2VydmVyLkdyb3VwVXNlciIg",
            "CgtUR3JvdXBzSm9pbhIRCglncm91cF9pZHMYASADKAkiIQoMVEdyb3Vwc0xl",
            "YXZlEhEKCWdyb3VwX2lkcxgBIAMoCSJ9Cg5UR3JvdXBVc2Vyc0FkZBI4Cgtn",
            "cm91cF91c2VycxgBIAMoCzIjLnNlcnZlci5UR3JvdXBVc2Vyc0FkZC5Hcm91",
            "cFVzZXJBZGQaMQoMR3JvdXBVc2VyQWRkEhAKCGdyb3VwX2lkGAEgASgJEg8K",
            "B3VzZXJfaWQYAiABKAkigQEKD1RHcm91cFVzZXJzS2ljaxI6Cgtncm91cF91",
            "c2VycxgBIAMoCzIlLnNlcnZlci5UR3JvdXBVc2Vyc0tpY2suR3JvdXBVc2Vy",
            "S2ljaxoyCg1Hcm91cFVzZXJLaWNrEhAKCGdyb3VwX2lkGAEgASgJEg8KB3Vz",
            "ZXJfaWQYAiABKAkijQEKElRHcm91cFVzZXJzUHJvbW90ZRJACgtncm91cF91",
            "c2VycxgBIAMoCzIrLnNlcnZlci5UR3JvdXBVc2Vyc1Byb21vdGUuR3JvdXBV",
            "c2VyUHJvbW90ZRo1ChBHcm91cFVzZXJQcm9tb3RlEhAKCGdyb3VwX2lkGAEg",
            "ASgJEg8KB3VzZXJfaWQYAiABKAkiQQoHVG9waWNJZBIMCgJkbRgBIAEoCUgA",
            "Eg4KBHJvb20YAiABKAlIABISCghncm91cF9pZBgDIAEoCUgAQgQKAmlkIkMK",
            "DFVzZXJQcmVzZW5jZRIPCgd1c2VyX2lkGAEgASgJEhIKCnNlc3Npb25faWQY",
            "AiABKAkSDgoGaGFuZGxlGAMgASgJIoUBCgtUVG9waWNzSm9pbhIsCgVqb2lu",
            "cxgBIAMoCzIdLnNlcnZlci5UVG9waWNzSm9pbi5Ub3BpY0pvaW4aSAoJVG9w",
            "aWNKb2luEhEKB3VzZXJfaWQYASABKAlIABIOCgRyb29tGAIgASgJSAASEgoI",
            "Z3JvdXBfaWQYAyABKAlIAEIECgJpZCKmAQoHVFRvcGljcxIlCgZ0b3BpY3MY",
            "ASADKAsyFS5zZXJ2ZXIuVFRvcGljcy5Ub3BpYxp0CgVUb3BpYxIeCgV0b3Bp",
            "YxgBIAEoCzIPLnNlcnZlci5Ub3BpY0lkEicKCXByZXNlbmNlcxgCIAMoCzIU",
            "LnNlcnZlci5Vc2VyUHJlc2VuY2USIgoEc2VsZhgDIAEoCzIULnNlcnZlci5V",
            "c2VyUHJlc2VuY2UiLwoMVFRvcGljc0xlYXZlEh8KBnRvcGljcxgBIAMoCzIP",
            "LnNlcnZlci5Ub3BpY0lkIkEKEVRUb3BpY01lc3NhZ2VTZW5kEh4KBXRvcGlj",
            "GAEgASgLMg8uc2VydmVyLlRvcGljSWQSDAoEZGF0YRgCIAEoCSJeChBUVG9w",
            "aWNNZXNzYWdlQWNrEhIKCm1lc3NhZ2VfaWQYASABKAkSEgoKY3JlYXRlZF9h",
            "dBgCIAEoAxISCgpleHBpcmVzX2F0GAMgASgDEg4KBmhhbmRsZRgEIAEoCSKn",
            "AQoMVG9waWNNZXNzYWdlEh4KBXRvcGljGAEgASgLMg8uc2VydmVyLlRvcGlj",
            "SWQSDwoHdXNlcl9pZBgCIAEoCRISCgptZXNzYWdlX2lkGAMgASgJEhIKCmNy",
            "ZWF0ZWRfYXQYBCABKAMSEgoKZXhwaXJlc19hdBgFIAEoAxIOCgZoYW5kbGUY",
            "BiABKAkSDAoEdHlwZRgHIAEoAxIMCgRkYXRhGAggASgJIoEBChJUVG9waWNN",
            "ZXNzYWdlc0xpc3QSEQoHdXNlcl9pZBgBIAEoCUgAEg4KBHJvb20YAiABKAlI",
            "ABISCghncm91cF9pZBgDIAEoCUgAEg4KBmN1cnNvchgEIAEoCRIPCgdmb3J3",
            "YXJkGAUgASgIEg0KBWxpbWl0GAYgASgDQgQKAmlkIkgKDlRUb3BpY01lc3Nh",
            "Z2VzEiYKCG1lc3NhZ2VzGAEgAygLMhQuc2VydmVyLlRvcGljTWVzc2FnZRIO",
            "CgZjdXJzb3IYAiABKAkiegoNVG9waWNQcmVzZW5jZRIeCgV0b3BpYxgBIAEo",
            "CzIPLnNlcnZlci5Ub3BpY0lkEiMKBWpvaW5zGAIgAygLMhQuc2VydmVyLlVz",
            "ZXJQcmVzZW5jZRIkCgZsZWF2ZXMYAyADKAsyFC5zZXJ2ZXIuVXNlclByZXNl",
            "bmNlIp8BCgxQcm9wZXJ0eVBhaXISCwoDa2V5GAEgASgJEjMKCXN0cmluZ1Nl",
            "dBgCIAEoCzIeLnNlcnZlci5Qcm9wZXJ0eVBhaXIuU3RyaW5nU2V0SAASEwoJ",
            "Ym9vbFZhbHVlGAMgASgISAASEgoIaW50VmFsdWUYBCABKANIABobCglTdHJp",
            "bmdTZXQSDgoGdmFsdWVzGAEgAygJQgcKBXZhbHVlIpACCg9NYXRjaG1ha2VG",
            "aWx0ZXISDAoEbmFtZRgBIAEoCRIyCgR0ZXJtGAIgASgLMiIuc2VydmVyLk1h",
            "dGNobWFrZUZpbHRlci5UZXJtRmlsdGVySAASNAoFcmFuZ2UYAyABKAsyIy5z",
            "ZXJ2ZXIuTWF0Y2htYWtlRmlsdGVyLlJhbmdlRmlsdGVySAASDwoFY2hlY2sY",
            "BCABKAhIABoyCgpUZXJtRmlsdGVyEg0KBXRlcm1zGAEgAygJEhUKDW1hdGNo",
            "QWxsVGVybXMYAiABKAgaNwoLUmFuZ2VGaWx0ZXISEwoLbG93ZXJfYm91bmQY",
            "ASABKAMSEwoLdXBwZXJfYm91bmQYAiABKANCBwoFdmFsdWUiewoNVE1hdGNo",
            "bWFrZUFkZBIWCg5yZXF1aXJlZF9jb3VudBgBIAEoAxIoCgdmaWx0ZXJzGAIg",
            "AygLMhcuc2VydmVyLk1hdGNobWFrZUZpbHRlchIoCgpwcm9wZXJ0aWVzGAMg",
            "AygLMhQuc2VydmVyLlByb3BlcnR5UGFpciIiChBUTWF0Y2htYWtlVGlja2V0",
            "Eg4KBnRpY2tldBgBIAEoCSIiChBUTWF0Y2htYWtlUmVtb3ZlEg4KBnRpY2tl",
            "dBgBIAEoCSKuAgoQTWF0Y2htYWtlTWF0Y2hlZBIOCgZ0aWNrZXQYASABKAkS",
            "DQoFdG9rZW4YAiABKAkSJwoJcHJlc2VuY2VzGAMgAygLMhQuc2VydmVyLlVz",
            "ZXJQcmVzZW5jZRIiCgRzZWxmGAQgASgLMhQuc2VydmVyLlVzZXJQcmVzZW5j",
            "ZRI5Cgpwcm9wZXJ0aWVzGAUgAygLMiUuc2VydmVyLk1hdGNobWFrZU1hdGNo",
            "ZWQuVXNlclByb3BlcnR5GnMKDFVzZXJQcm9wZXJ0eRIPCgd1c2VyX2lkGAEg",
            "ASgJEigKCnByb3BlcnRpZXMYAiADKAsyFC5zZXJ2ZXIuUHJvcGVydHlQYWly",
            "EigKB2ZpbHRlcnMYAyADKAsyFy5zZXJ2ZXIuTWF0Y2htYWtlRmlsdGVyImYK",
            "BU1hdGNoEhAKCG1hdGNoX2lkGAEgASgJEicKCXByZXNlbmNlcxgCIAMoCzIU",
            "LnNlcnZlci5Vc2VyUHJlc2VuY2USIgoEc2VsZhgDIAEoCzIULnNlcnZlci5V",
            "c2VyUHJlc2VuY2UibAoNTWF0Y2hQcmVzZW5jZRIQCghtYXRjaF9pZBgBIAEo",
            "CRIjCgVqb2lucxgCIAMoCzIULnNlcnZlci5Vc2VyUHJlc2VuY2USJAoGbGVh",
            "dmVzGAMgAygLMhQuc2VydmVyLlVzZXJQcmVzZW5jZSIOCgxUTWF0Y2hDcmVh",
            "dGUiJgoGVE1hdGNoEhwKBW1hdGNoGAEgASgLMg0uc2VydmVyLk1hdGNoIncK",
            "DFRNYXRjaGVzSm9pbhIvCgdtYXRjaGVzGAEgAygLMh4uc2VydmVyLlRNYXRj",
            "aGVzSm9pbi5NYXRjaEpvaW4aNgoJTWF0Y2hKb2luEhIKCG1hdGNoX2lkGAEg",
            "ASgJSAASDwoFdG9rZW4YAiABKAlIAEIECgJpZCIqCghUTWF0Y2hlcxIeCgdt",
            "YXRjaGVzGAEgAygLMg0uc2VydmVyLk1hdGNoImkKDU1hdGNoRGF0YVNlbmQS",
            "EAoIbWF0Y2hfaWQYASABKAkSDwoHb3BfY29kZRgCIAEoAxIMCgRkYXRhGAMg",
            "ASgMEicKCXByZXNlbmNlcxgEIAMoCzIULnNlcnZlci5Vc2VyUHJlc2VuY2Ui",
            "ZAoJTWF0Y2hEYXRhEhAKCG1hdGNoX2lkGAEgASgJEiYKCHByZXNlbmNlGAIg",
            "ASgLMhQuc2VydmVyLlVzZXJQcmVzZW5jZRIPCgdvcF9jb2RlGAMgASgDEgwK",
            "BGRhdGEYBCABKAwiIgoNVE1hdGNoZXNMZWF2ZRIRCgltYXRjaF9pZHMYASAD",
            "KAkiYgoMVFN0b3JhZ2VMaXN0Eg8KB3VzZXJfaWQYASABKAkSDgoGYnVja2V0",
            "GAIgASgJEhIKCmNvbGxlY3Rpb24YAyABKAkSDQoFbGltaXQYBCABKAMSDgoG",
            "Y3Vyc29yGAUgASgJIpIBCg1UU3RvcmFnZUZldGNoEi4KBGtleXMYASADKAsy",
            "IC5zZXJ2ZXIuVFN0b3JhZ2VGZXRjaC5TdG9yYWdlS2V5GlEKClN0b3JhZ2VL",
            "ZXkSDgoGYnVja2V0GAEgASgJEhIKCmNvbGxlY3Rpb24YAiABKAkSDgoGcmVj",
            "b3JkGAMgASgJEg8KB3VzZXJfaWQYBCABKAkisgIKDFRTdG9yYWdlRGF0YRIu",
            "CgRkYXRhGAEgAygLMiAuc2VydmVyLlRTdG9yYWdlRGF0YS5TdG9yYWdlRGF0",
            "YRIOCgZjdXJzb3IYAiABKAka4QEKC1N0b3JhZ2VEYXRhEg4KBmJ1Y2tldBgB",
            "IAEoCRISCgpjb2xsZWN0aW9uGAIgASgJEg4KBnJlY29yZBgDIAEoCRIPCgd1",
            "c2VyX2lkGAQgASgJEg0KBXZhbHVlGAUgASgJEg8KB3ZlcnNpb24YBiABKAkS",
            "FwoPcGVybWlzc2lvbl9yZWFkGAcgASgFEhgKEHBlcm1pc3Npb25fd3JpdGUY",
            "CCABKAUSEgoKY3JlYXRlZF9hdBgJIAEoAxISCgp1cGRhdGVkX2F0GAogASgD",
            "EhIKCmV4cGlyZXNfYXQYCyABKAMi1wEKDVRTdG9yYWdlV3JpdGUSLwoEZGF0",
            "YRgDIAMoCzIhLnNlcnZlci5UU3RvcmFnZVdyaXRlLlN0b3JhZ2VEYXRhGpQB",
            "CgtTdG9yYWdlRGF0YRIOCgZidWNrZXQYASABKAkSEgoKY29sbGVjdGlvbhgC",
            "IAEoCRIOCgZyZWNvcmQYAyABKAkSDQoFdmFsdWUYBCABKAkSDwoHdmVyc2lv",
            "bhgFIAEoCRIXCg9wZXJtaXNzaW9uX3JlYWQYBiABKAUSGAoQcGVybWlzc2lv",
            "bl93cml0ZRgHIAEoBSKSBQoOVFN0b3JhZ2VVcGRhdGUSNQoHdXBkYXRlcxgB",
            "IAMoCzIkLnNlcnZlci5UU3RvcmFnZVVwZGF0ZS5TdG9yYWdlVXBkYXRlGsgE",
            "Cg1TdG9yYWdlVXBkYXRlEjwKA2tleRgBIAEoCzIvLnNlcnZlci5UU3RvcmFn",
            "ZVVwZGF0ZS5TdG9yYWdlVXBkYXRlLlN0b3JhZ2VLZXkSFwoPcGVybWlzc2lv",
            "bl9yZWFkGAIgASgFEhgKEHBlcm1pc3Npb25fd3JpdGUYAyABKAUSOgoDb3Bz",
            "GAQgAygLMi0uc2VydmVyLlRTdG9yYWdlVXBkYXRlLlN0b3JhZ2VVcGRhdGUu",
            "VXBkYXRlT3AatgIKCFVwZGF0ZU9wEgoKAm9wGAEgASgFEgwKBHBhdGgYAiAB",
            "KAkSDQoFdmFsdWUYAyABKAkSDAoEZnJvbRgEIAEoCRITCgtjb25kaXRpb25h",
            "bBgFIAEoCBIOCgZhc3NlcnQYBiABKAMSOgoDb3BzGAcgAygLMi0uc2VydmVy",
            "LlRTdG9yYWdlVXBkYXRlLlN0b3JhZ2VVcGRhdGUuVXBkYXRlT3AikQEKDFVw",
            "ZGF0ZU9wQ29kZRIHCgNBREQQABIKCgZBUFBFTkQQARIICgRDT1BZEAISCAoE",
            "SU5DUhADEggKBElOSVQQBBIJCgVNRVJHRRAFEggKBE1PVkUQBhIJCgVQQVRD",
            "SBAHEgoKBlJFTU9WRRAIEgsKB1JFUExBQ0UQCRIICgRURVNUEAoSCwoHQ09N",
            "UEFSRRALGlEKClN0b3JhZ2VLZXkSDgoGYnVja2V0GAEgASgJEhIKCmNvbGxl",
            "Y3Rpb24YAiABKAkSDgoGcmVjb3JkGAMgASgJEg8KB3ZlcnNpb24YBCABKAki",
            "kAEKDFRTdG9yYWdlS2V5cxItCgRrZXlzGAEgAygLMh8uc2VydmVyLlRTdG9y",
            "YWdlS2V5cy5TdG9yYWdlS2V5GlEKClN0b3JhZ2VLZXkSDgoGYnVja2V0GAEg",
            "ASgJEhIKCmNvbGxlY3Rpb24YAiABKAkSDgoGcmVjb3JkGAMgASgJEg8KB3Zl",
            "cnNpb24YBCABKAkilAEKDlRTdG9yYWdlUmVtb3ZlEi8KBGtleXMYASADKAsy",
            "IS5zZXJ2ZXIuVFN0b3JhZ2VSZW1vdmUuU3RvcmFnZUtleRpRCgpTdG9yYWdl",
            "S2V5Eg4KBmJ1Y2tldBgBIAEoCRISCgpjb2xsZWN0aW9uGAIgASgJEg4KBnJl",
            "Y29yZBgDIAEoCRIPCgd2ZXJzaW9uGAQgASgJIpkBCgtMZWFkZXJib2FyZBIK",
            "CgJpZBgBIAEoCRIVCg1hdXRob3JpdGF0aXZlGAIgASgIEgwKBHNvcnQYAyAB",
            "KAMSDQoFY291bnQYBCABKAMSFgoOcmVzZXRfc2NoZWR1bGUYBSABKAkSEAoI",
            "bWV0YWRhdGEYBiABKAkSDwoHbmV4dF9pZBgHIAEoCRIPCgdwcmV2X2lkGAgg",
            "ASgJIvwBChFMZWFkZXJib2FyZFJlY29yZBIWCg5sZWFkZXJib2FyZF9pZBgB",
            "IAEoCRIQCghvd25lcl9pZBgCIAEoCRIOCgZoYW5kbGUYAyABKAkSDAoEbGFu",
            "ZxgEIAEoCRIQCghsb2NhdGlvbhgFIAEoCRIQCgh0aW1lem9uZRgGIAEoCRIM",
            "CgRyYW5rGAcgASgDEg0KBXNjb3JlGAggASgDEhEKCW51bV9zY29yZRgJIAEo",
            "AxIQCghtZXRhZGF0YRgKIAEoCRIRCglyYW5rZWRfYXQYCyABKAMSEgoKdXBk",
            "YXRlZF9hdBgMIAEoAxISCgpleHBpcmVzX2F0GA0gASgDIlEKEVRMZWFkZXJi",
            "b2FyZHNMaXN0Eg0KBWxpbWl0GAEgASgDEg4KBmN1cnNvchgCIAEoCRIdChVm",
            "aWx0ZXJfbGVhZGVyYm9hcmRfaWQYAyADKAkiSgoNVExlYWRlcmJvYXJkcxIp",
            "CgxsZWFkZXJib2FyZHMYASADKAsyEy5zZXJ2ZXIuTGVhZGVyYm9hcmQSDgoG",
            "Y3Vyc29yGAIgASgJIpICChhUTGVhZGVyYm9hcmRSZWNvcmRzV3JpdGUSSAoH",
            "cmVjb3JkcxgBIAMoCzI3LnNlcnZlci5UTGVhZGVyYm9hcmRSZWNvcmRzV3Jp",
            "dGUuTGVhZGVyYm9hcmRSZWNvcmRXcml0ZRqrAQoWTGVhZGVyYm9hcmRSZWNv",
            "cmRXcml0ZRIWCg5sZWFkZXJib2FyZF9pZBgBIAEoCRIOCgRpbmNyGAIgASgD",
            "SAASDgoEZGVjchgDIAEoA0gAEg0KA3NldBgEIAEoA0gAEg4KBGJlc3QYBSAB",
            "KANIABIQCghsb2NhdGlvbhgGIAEoCRIQCgh0aW1lem9uZRgHIAEoCRIQCght",
            "ZXRhZGF0YRgIIAEoCUIECgJvcCJSChhUTGVhZGVyYm9hcmRSZWNvcmRzRmV0",
            "Y2gSFwoPbGVhZGVyYm9hcmRfaWRzGAEgAygJEg0KBWxpbWl0GAIgASgDEg4K",
            "BmN1cnNvchgDIAEoCSKAAgoXVExlYWRlcmJvYXJkUmVjb3Jkc0xpc3QSFgoO",
            "bGVhZGVyYm9hcmRfaWQYASABKAkSEgoIb3duZXJfaWQYAiABKAlIABI7Cglv",
            "d25lcl9pZHMYAyABKAsyJi5zZXJ2ZXIuVExlYWRlcmJvYXJkUmVjb3Jkc0xp",
            "c3QuT3duZXJzSAASDgoEbGFuZxgEIAEoCUgAEhIKCGxvY2F0aW9uGAUgASgJ",
            "SAASEgoIdGltZXpvbmUYBiABKAlIABINCgVsaW1pdBgHIAEoAxIOCgZjdXJz",
            "b3IYCCABKAkaGwoGT3duZXJzEhEKCW93bmVyX2lkcxgBIAMoCUIICgZmaWx0",
            "ZXIiUQoTVExlYWRlcmJvYXJkUmVjb3JkcxIqCgdyZWNvcmRzGAEgAygLMhku",
            "c2VydmVyLkxlYWRlcmJvYXJkUmVjb3JkEg4KBmN1cnNvchgCIAEoCSIjCgRU",
            "UnBjEgoKAmlkGAEgASgJEg8KB3BheWxvYWQYAiABKAkitgIKE1RQdXJjaGFz",
            "ZVZhbGlkYXRpb24SQwoOYXBwbGVfcHVyY2hhc2UYASABKAsyKS5zZXJ2ZXIu",
            "VFB1cmNoYXNlVmFsaWRhdGlvbi5BcHBsZVB1cmNoYXNlSAASRQoPZ29vZ2xl",
            "X3B1cmNoYXNlGAIgASgLMiouc2VydmVyLlRQdXJjaGFzZVZhbGlkYXRpb24u",
            "R29vZ2xlUHVyY2hhc2VIABo5Cg1BcHBsZVB1cmNoYXNlEhIKCnByb2R1Y3Rf",
            "aWQYASABKAkSFAoMcmVjZWlwdF9kYXRhGAIgASgJGlIKDkdvb2dsZVB1cmNo",
            "YXNlEhIKCnByb2R1Y3RfaWQYASABKAkSFAoMcHJvZHVjdF90eXBlGAIgASgJ",
            "EhYKDnB1cmNoYXNlX3Rva2VuGAMgASgJQgQKAmlkInsKD1RQdXJjaGFzZVJl",
            "Y29yZBIPCgdzdWNjZXNzGAEgASgIEhMKC3NlZW5fYmVmb3JlGAIgASgIEiMK",
            "G3B1cmNoYXNlX3Byb3ZpZGVyX3JlYWNoYWJsZRgDIAEoCBIPCgdtZXNzYWdl",
            "GAYgASgJEgwKBGRhdGEYBSABKAkimQEKDE5vdGlmaWNhdGlvbhIKCgJpZBgB",
            "IAEoCRIPCgdzdWJqZWN0GAIgASgJEg8KB2NvbnRlbnQYAyABKAkSDAoEY29k",
            "ZRgEIAEoAxIRCglzZW5kZXJfaWQYBSABKAkSEgoKY3JlYXRlZF9hdBgGIAEo",
            "AxISCgpleHBpcmVzX2F0GAcgASgDEhIKCnBlcnNpc3RlbnQYCCABKAgiPAoN",
            "Tm90aWZpY2F0aW9ucxIrCg1ub3RpZmljYXRpb25zGAEgAygLMhQuc2VydmVy",
            "Lk5vdGlmaWNhdGlvbiI9ChJUTm90aWZpY2F0aW9uc0xpc3QSDQoFbGltaXQY",
            "ASABKAMSGAoQcmVzdW1hYmxlX2N1cnNvchgCIAEoCSJXCg5UTm90aWZpY2F0",
            "aW9ucxIrCg1ub3RpZmljYXRpb25zGAEgAygLMhQuc2VydmVyLk5vdGlmaWNh",
            "dGlvbhIYChByZXN1bWFibGVfY3Vyc29yGAIgASgJIjAKFFROb3RpZmljYXRp",
            "b25zUmVtb3ZlEhgKEG5vdGlmaWNhdGlvbl9pZHMYASADKAkqRQoVU3RvcmFn",
            "ZVBlcm1pc3Npb25SZWFkEgsKB05PX1JFQUQQABIOCgpPV05FUl9SRUFEEAES",
            "DwoLUFVCTElDX1JFQUQQAio3ChZTdG9yYWdlUGVybWlzc2lvbldyaXRlEgwK",
            "CE5PX1dSSVRFEAASDwoLT1dORVJfV1JJVEUQAUIgChVjb20uaGVyb2ljbGFi",
            "cy5uYWthbWGqAgZOYWthbWFiBnByb3RvMw=="));
      descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
          new pbr::FileDescriptor[] { },
          new pbr::GeneratedClrTypeInfo(new[] {typeof(global::Nakama.StoragePermissionRead), typeof(global::Nakama.StoragePermissionWrite), }, new pbr::GeneratedClrTypeInfo[] {
            new pbr::GeneratedClrTypeInfo(typeof(global::Nakama.Heartbeat), global::Nakama.Heartbeat.Parser, new[]{ "Timestamp" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Nakama.Error), global::Nakama.Error.Parser, new[]{ "Code", "Message" }, null, new[]{ typeof(global::Nakama.Error.Types.Code) }, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Nakama.AuthenticateRequest), global::Nakama.AuthenticateRequest.Parser, new[]{ "CollationId", "Email", "Facebook", "Google", "GameCenter", "Steam", "Device", "Custom" }, new[]{ "Id" }, null, new pbr::GeneratedClrTypeInfo[] { new pbr::GeneratedClrTypeInfo(typeof(global::Nakama.AuthenticateRequest.Types.Email), global::Nakama.AuthenticateRequest.Types.Email.Parser, new[]{ "Email_", "Password" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Nakama.AuthenticateRequest.Types.GameCenter), global::Nakama.AuthenticateRequest.Types.GameCenter.Parser, new[]{ "PlayerId", "BundleId", "Timestamp", "Salt", "Signature", "PublicKeyUrl" }, null, null, null)}),
            new pbr::GeneratedClrTypeInfo(typeof(global::Nakama.AuthenticateResponse), global::Nakama.AuthenticateResponse.Parser, new[]{ "CollationId", "Session", "Error" }, new[]{ "Id" }, null, new pbr::GeneratedClrTypeInfo[] { new pbr::GeneratedClrTypeInfo(typeof(global::Nakama.AuthenticateResponse.Types.Session), global::Nakama.AuthenticateResponse.Types.Session.Parser, new[]{ "Token", "UdpToken" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Nakama.AuthenticateResponse.Types.Error), global::Nakama.AuthenticateResponse.Types.Error.Parser, new[]{ "Code", "Message", "Request" }, null, null, null)}),
            new pbr::GeneratedClrTypeInfo(typeof(global::Nakama.Envelope), global::Nakama.Envelope.Parser, new[]{ "CollationId", "Error", "Heartbeat", "Logout", "Link", "Unlink", "SelfFetch", "SelfUpdate", "UsersFetch", "Self", "Users", "FriendsAdd", "FriendsRemove", "FriendsBlock", "FriendsList", "Friends", "GroupsCreate", "GroupsUpdate", "GroupsRemove", "GroupsFetch", "GroupsList", "GroupsSelfList", "GroupUsersList", "GroupsJoin", "GroupsLeave", "GroupUsersAdd", "GroupUsersKick", "GroupUsersPromote", "Groups", "GroupsSelf", "GroupUsers", "TopicsJoin", "TopicsLeave", "TopicMessageSend", "TopicMessagesList", "Topics", "TopicMessageAck", "TopicMessage", "TopicMessages", "TopicPresence", "MatchCreate", "MatchesJoin", "MatchesLeave", "MatchDataSend", "Match", "Matches", "MatchData", "MatchPresence", "StorageList", "StorageFetch", "StorageWrite", "StorageUpdate", "StorageRemove", "StorageData", "StorageKeys", "LeaderboardsList", "LeaderboardRecordsWrite", "LeaderboardRecordsFetch", "LeaderboardRecordsList", "Leaderboards", "LeaderboardRecords", "MatchmakeAdd", "MatchmakeRemove", "MatchmakeTicket", "MatchmakeMatched", "Rpc", "Purchase", "PurchaseRecord", "NotificationsList", "NotificationsRemove", "Notifications", "LiveNotifications" }, new[]{ "Payload" }, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Nakama.Logout), global::Nakama.Logout.Parser, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Nakama.TLink), global::Nakama.TLink.Parser, new[]{ "Email", "Facebook", "Google", "GameCenter", "Steam", "Device", "Custom" }, new[]{ "Id" }, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Nakama.TUnlink), global::Nakama.TUnlink.Parser, new[]{ "Email", "Facebook", "Google", "GameCenter", "Steam", "Device", "Custom" }, new[]{ "Id" }, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Nakama.User), global::Nakama.User.Parser, new[]{ "Id", "Handle", "Fullname", "AvatarUrl", "Lang", "Location", "Timezone", "Metadata", "CreatedAt", "UpdatedAt", "LastOnlineAt" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Nakama.Self), global::Nakama.Self.Parser, new[]{ "User", "Verified", "Email", "DeviceIds", "FacebookId", "GoogleId", "GamecenterId", "SteamId", "CustomId" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Nakama.TSelfFetch), global::Nakama.TSelfFetch.Parser, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Nakama.TSelf), global::Nakama.TSelf.Parser, new[]{ "Self" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Nakama.TSelfUpdate), global::Nakama.TSelfUpdate.Parser, new[]{ "Handle", "Fullname", "Timezone", "Location", "Lang", "Metadata", "AvatarUrl" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Nakama.TUsersFetch), global::Nakama.TUsersFetch.Parser, new[]{ "Users" }, null, null, new pbr::GeneratedClrTypeInfo[] { new pbr::GeneratedClrTypeInfo(typeof(global::Nakama.TUsersFetch.Types.UsersFetch), global::Nakama.TUsersFetch.Types.UsersFetch.Parser, new[]{ "UserId", "Handle" }, new[]{ "Id" }, null, null)}),
            new pbr::GeneratedClrTypeInfo(typeof(global::Nakama.TUsers), global::Nakama.TUsers.Parser, new[]{ "Users" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Nakama.Friend), global::Nakama.Friend.Parser, new[]{ "User", "State" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Nakama.TFriendsAdd), global::Nakama.TFriendsAdd.Parser, new[]{ "Friends" }, null, null, new pbr::GeneratedClrTypeInfo[] { new pbr::GeneratedClrTypeInfo(typeof(global::Nakama.TFriendsAdd.Types.FriendsAdd), global::Nakama.TFriendsAdd.Types.FriendsAdd.Parser, new[]{ "UserId", "Handle" }, new[]{ "Id" }, null, null)}),
            new pbr::GeneratedClrTypeInfo(typeof(global::Nakama.TFriendsRemove), global::Nakama.TFriendsRemove.Parser, new[]{ "UserIds" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Nakama.TFriendsBlock), global::Nakama.TFriendsBlock.Parser, new[]{ "UserIds" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Nakama.TFriendsList), global::Nakama.TFriendsList.Parser, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Nakama.TFriends), global::Nakama.TFriends.Parser, new[]{ "Friends" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Nakama.Group), global::Nakama.Group.Parser, new[]{ "Id", "Private", "CreatorId", "Name", "Description", "AvatarUrl", "Lang", "UtcOffsetMs", "Metadata", "Count", "CreatedAt", "UpdatedAt" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Nakama.TGroupsCreate), global::Nakama.TGroupsCreate.Parser, new[]{ "Groups" }, null, null, new pbr::GeneratedClrTypeInfo[] { new pbr::GeneratedClrTypeInfo(typeof(global::Nakama.TGroupsCreate.Types.GroupCreate), global::Nakama.TGroupsCreate.Types.GroupCreate.Parser, new[]{ "Name", "Description", "AvatarUrl", "Lang", "Metadata", "Private" }, null, null, null)}),
            new pbr::GeneratedClrTypeInfo(typeof(global::Nakama.TGroupsUpdate), global::Nakama.TGroupsUpdate.Parser, new[]{ "Groups" }, null, null, new pbr::GeneratedClrTypeInfo[] { new pbr::GeneratedClrTypeInfo(typeof(global::Nakama.TGroupsUpdate.Types.GroupUpdate), global::Nakama.TGroupsUpdate.Types.GroupUpdate.Parser, new[]{ "GroupId", "Private", "Name", "Description", "AvatarUrl", "Lang", "Metadata" }, null, null, null)}),
            new pbr::GeneratedClrTypeInfo(typeof(global::Nakama.TGroupsRemove), global::Nakama.TGroupsRemove.Parser, new[]{ "GroupIds" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Nakama.TGroupsSelfList), global::Nakama.TGroupsSelfList.Parser, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Nakama.TGroupsFetch), global::Nakama.TGroupsFetch.Parser, new[]{ "Groups" }, null, null, new pbr::GeneratedClrTypeInfo[] { new pbr::GeneratedClrTypeInfo(typeof(global::Nakama.TGroupsFetch.Types.GroupFetch), global::Nakama.TGroupsFetch.Types.GroupFetch.Parser, new[]{ "GroupId", "Name" }, new[]{ "Id" }, null, null)}),
            new pbr::GeneratedClrTypeInfo(typeof(global::Nakama.TGroupsList), global::Nakama.TGroupsList.Parser, new[]{ "PageLimit", "OrderByAsc", "Lang", "CreatedAt", "Count", "Cursor" }, new[]{ "Filter" }, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Nakama.TGroups), global::Nakama.TGroups.Parser, new[]{ "Groups", "Cursor" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Nakama.TGroupsSelf), global::Nakama.TGroupsSelf.Parser, new[]{ "GroupsSelf" }, null, null, new pbr::GeneratedClrTypeInfo[] { new pbr::GeneratedClrTypeInfo(typeof(global::Nakama.TGroupsSelf.Types.GroupSelf), global::Nakama.TGroupsSelf.Types.GroupSelf.Parser, new[]{ "Group", "State" }, null, null, null)}),
            new pbr::GeneratedClrTypeInfo(typeof(global::Nakama.GroupUser), global::Nakama.GroupUser.Parser, new[]{ "User", "State" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Nakama.TGroupUsersList), global::Nakama.TGroupUsersList.Parser, new[]{ "GroupId" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Nakama.TGroupUsers), global::Nakama.TGroupUsers.Parser, new[]{ "Users" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Nakama.TGroupsJoin), global::Nakama.TGroupsJoin.Parser, new[]{ "GroupIds" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Nakama.TGroupsLeave), global::Nakama.TGroupsLeave.Parser, new[]{ "GroupIds" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Nakama.TGroupUsersAdd), global::Nakama.TGroupUsersAdd.Parser, new[]{ "GroupUsers" }, null, null, new pbr::GeneratedClrTypeInfo[] { new pbr::GeneratedClrTypeInfo(typeof(global::Nakama.TGroupUsersAdd.Types.GroupUserAdd), global::Nakama.TGroupUsersAdd.Types.GroupUserAdd.Parser, new[]{ "GroupId", "UserId" }, null, null, null)}),
            new pbr::GeneratedClrTypeInfo(typeof(global::Nakama.TGroupUsersKick), global::Nakama.TGroupUsersKick.Parser, new[]{ "GroupUsers" }, null, null, new pbr::GeneratedClrTypeInfo[] { new pbr::GeneratedClrTypeInfo(typeof(global::Nakama.TGroupUsersKick.Types.GroupUserKick), global::Nakama.TGroupUsersKick.Types.GroupUserKick.Parser, new[]{ "GroupId", "UserId" }, null, null, null)}),
            new pbr::GeneratedClrTypeInfo(typeof(global::Nakama.TGroupUsersPromote), global::Nakama.TGroupUsersPromote.Parser, new[]{ "GroupUsers" }, null, null, new pbr::GeneratedClrTypeInfo[] { new pbr::GeneratedClrTypeInfo(typeof(global::Nakama.TGroupUsersPromote.Types.GroupUserPromote), global::Nakama.TGroupUsersPromote.Types.GroupUserPromote.Parser, new[]{ "GroupId", "UserId" }, null, null, null)}),
            new pbr::GeneratedClrTypeInfo(typeof(global::Nakama.TopicId), global::Nakama.TopicId.Parser, new[]{ "Dm", "Room", "GroupId" }, new[]{ "Id" }, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Nakama.UserPresence), global::Nakama.UserPresence.Parser, new[]{ "UserId", "SessionId", "Handle" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Nakama.TTopicsJoin), global::Nakama.TTopicsJoin.Parser, new[]{ "Joins" }, null, null, new pbr::GeneratedClrTypeInfo[] { new pbr::GeneratedClrTypeInfo(typeof(global::Nakama.TTopicsJoin.Types.TopicJoin), global::Nakama.TTopicsJoin.Types.TopicJoin.Parser, new[]{ "UserId", "Room", "GroupId" }, new[]{ "Id" }, null, null)}),
            new pbr::GeneratedClrTypeInfo(typeof(global::Nakama.TTopics), global::Nakama.TTopics.Parser, new[]{ "Topics" }, null, null, new pbr::GeneratedClrTypeInfo[] { new pbr::GeneratedClrTypeInfo(typeof(global::Nakama.TTopics.Types.Topic), global::Nakama.TTopics.Types.Topic.Parser, new[]{ "Topic_", "Presences", "Self" }, null, null, null)}),
            new pbr::GeneratedClrTypeInfo(typeof(global::Nakama.TTopicsLeave), global::Nakama.TTopicsLeave.Parser, new[]{ "Topics" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Nakama.TTopicMessageSend), global::Nakama.TTopicMessageSend.Parser, new[]{ "Topic", "Data" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Nakama.TTopicMessageAck), global::Nakama.TTopicMessageAck.Parser, new[]{ "MessageId", "CreatedAt", "ExpiresAt", "Handle" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Nakama.TopicMessage), global::Nakama.TopicMessage.Parser, new[]{ "Topic", "UserId", "MessageId", "CreatedAt", "ExpiresAt", "Handle", "Type", "Data" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Nakama.TTopicMessagesList), global::Nakama.TTopicMessagesList.Parser, new[]{ "UserId", "Room", "GroupId", "Cursor", "Forward", "Limit" }, new[]{ "Id" }, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Nakama.TTopicMessages), global::Nakama.TTopicMessages.Parser, new[]{ "Messages", "Cursor" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Nakama.TopicPresence), global::Nakama.TopicPresence.Parser, new[]{ "Topic", "Joins", "Leaves" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Nakama.PropertyPair), global::Nakama.PropertyPair.Parser, new[]{ "Key", "StringSet", "BoolValue", "IntValue" }, new[]{ "Value" }, null, new pbr::GeneratedClrTypeInfo[] { new pbr::GeneratedClrTypeInfo(typeof(global::Nakama.PropertyPair.Types.StringSet), global::Nakama.PropertyPair.Types.StringSet.Parser, new[]{ "Values" }, null, null, null)}),
            new pbr::GeneratedClrTypeInfo(typeof(global::Nakama.MatchmakeFilter), global::Nakama.MatchmakeFilter.Parser, new[]{ "Name", "Term", "Range", "Check" }, new[]{ "Value" }, null, new pbr::GeneratedClrTypeInfo[] { new pbr::GeneratedClrTypeInfo(typeof(global::Nakama.MatchmakeFilter.Types.TermFilter), global::Nakama.MatchmakeFilter.Types.TermFilter.Parser, new[]{ "Terms", "MatchAllTerms" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Nakama.MatchmakeFilter.Types.RangeFilter), global::Nakama.MatchmakeFilter.Types.RangeFilter.Parser, new[]{ "LowerBound", "UpperBound" }, null, null, null)}),
            new pbr::GeneratedClrTypeInfo(typeof(global::Nakama.TMatchmakeAdd), global::Nakama.TMatchmakeAdd.Parser, new[]{ "RequiredCount", "Filters", "Properties" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Nakama.TMatchmakeTicket), global::Nakama.TMatchmakeTicket.Parser, new[]{ "Ticket" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Nakama.TMatchmakeRemove), global::Nakama.TMatchmakeRemove.Parser, new[]{ "Ticket" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Nakama.MatchmakeMatched), global::Nakama.MatchmakeMatched.Parser, new[]{ "Ticket", "Token", "Presences", "Self", "Properties" }, null, null, new pbr::GeneratedClrTypeInfo[] { new pbr::GeneratedClrTypeInfo(typeof(global::Nakama.MatchmakeMatched.Types.UserProperty), global::Nakama.MatchmakeMatched.Types.UserProperty.Parser, new[]{ "UserId", "Properties", "Filters" }, null, null, null)}),
            new pbr::GeneratedClrTypeInfo(typeof(global::Nakama.Match), global::Nakama.Match.Parser, new[]{ "MatchId", "Presences", "Self" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Nakama.MatchPresence), global::Nakama.MatchPresence.Parser, new[]{ "MatchId", "Joins", "Leaves" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Nakama.TMatchCreate), global::Nakama.TMatchCreate.Parser, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Nakama.TMatch), global::Nakama.TMatch.Parser, new[]{ "Match" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Nakama.TMatchesJoin), global::Nakama.TMatchesJoin.Parser, new[]{ "Matches" }, null, null, new pbr::GeneratedClrTypeInfo[] { new pbr::GeneratedClrTypeInfo(typeof(global::Nakama.TMatchesJoin.Types.MatchJoin), global::Nakama.TMatchesJoin.Types.MatchJoin.Parser, new[]{ "MatchId", "Token" }, new[]{ "Id" }, null, null)}),
            new pbr::GeneratedClrTypeInfo(typeof(global::Nakama.TMatches), global::Nakama.TMatches.Parser, new[]{ "Matches" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Nakama.MatchDataSend), global::Nakama.MatchDataSend.Parser, new[]{ "MatchId", "OpCode", "Data", "Presences" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Nakama.MatchData), global::Nakama.MatchData.Parser, new[]{ "MatchId", "Presence", "OpCode", "Data" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Nakama.TMatchesLeave), global::Nakama.TMatchesLeave.Parser, new[]{ "MatchIds" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Nakama.TStorageList), global::Nakama.TStorageList.Parser, new[]{ "UserId", "Bucket", "Collection", "Limit", "Cursor" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Nakama.TStorageFetch), global::Nakama.TStorageFetch.Parser, new[]{ "Keys" }, null, null, new pbr::GeneratedClrTypeInfo[] { new pbr::GeneratedClrTypeInfo(typeof(global::Nakama.TStorageFetch.Types.StorageKey), global::Nakama.TStorageFetch.Types.StorageKey.Parser, new[]{ "Bucket", "Collection", "Record", "UserId" }, null, null, null)}),
            new pbr::GeneratedClrTypeInfo(typeof(global::Nakama.TStorageData), global::Nakama.TStorageData.Parser, new[]{ "Data", "Cursor" }, null, null, new pbr::GeneratedClrTypeInfo[] { new pbr::GeneratedClrTypeInfo(typeof(global::Nakama.TStorageData.Types.StorageData), global::Nakama.TStorageData.Types.StorageData.Parser, new[]{ "Bucket", "Collection", "Record", "UserId", "Value", "Version", "PermissionRead", "PermissionWrite", "CreatedAt", "UpdatedAt", "ExpiresAt" }, null, null, null)}),
            new pbr::GeneratedClrTypeInfo(typeof(global::Nakama.TStorageWrite), global::Nakama.TStorageWrite.Parser, new[]{ "Data" }, null, null, new pbr::GeneratedClrTypeInfo[] { new pbr::GeneratedClrTypeInfo(typeof(global::Nakama.TStorageWrite.Types.StorageData), global::Nakama.TStorageWrite.Types.StorageData.Parser, new[]{ "Bucket", "Collection", "Record", "Value", "Version", "PermissionRead", "PermissionWrite" }, null, null, null)}),
            new pbr::GeneratedClrTypeInfo(typeof(global::Nakama.TStorageUpdate), global::Nakama.TStorageUpdate.Parser, new[]{ "Updates" }, null, null, new pbr::GeneratedClrTypeInfo[] { new pbr::GeneratedClrTypeInfo(typeof(global::Nakama.TStorageUpdate.Types.StorageUpdate), global::Nakama.TStorageUpdate.Types.StorageUpdate.Parser, new[]{ "Key", "PermissionRead", "PermissionWrite", "Ops" }, null, null, new pbr::GeneratedClrTypeInfo[] { new pbr::GeneratedClrTypeInfo(typeof(global::Nakama.TStorageUpdate.Types.StorageUpdate.Types.UpdateOp), global::Nakama.TStorageUpdate.Types.StorageUpdate.Types.UpdateOp.Parser, new[]{ "Op", "Path", "Value", "From", "Conditional", "Assert", "Ops" }, null, new[]{ typeof(global::Nakama.TStorageUpdate.Types.StorageUpdate.Types.UpdateOp.Types.UpdateOpCode) }, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Nakama.TStorageUpdate.Types.StorageUpdate.Types.StorageKey), global::Nakama.TStorageUpdate.Types.StorageUpdate.Types.StorageKey.Parser, new[]{ "Bucket", "Collection", "Record", "Version" }, null, null, null)})}),
            new pbr::GeneratedClrTypeInfo(typeof(global::Nakama.TStorageKeys), global::Nakama.TStorageKeys.Parser, new[]{ "Keys" }, null, null, new pbr::GeneratedClrTypeInfo[] { new pbr::GeneratedClrTypeInfo(typeof(global::Nakama.TStorageKeys.Types.StorageKey), global::Nakama.TStorageKeys.Types.StorageKey.Parser, new[]{ "Bucket", "Collection", "Record", "Version" }, null, null, null)}),
            new pbr::GeneratedClrTypeInfo(typeof(global::Nakama.TStorageRemove), global::Nakama.TStorageRemove.Parser, new[]{ "Keys" }, null, null, new pbr::GeneratedClrTypeInfo[] { new pbr::GeneratedClrTypeInfo(typeof(global::Nakama.TStorageRemove.Types.StorageKey), global::Nakama.TStorageRemove.Types.StorageKey.Parser, new[]{ "Bucket", "Collection", "Record", "Version" }, null, null, null)}),
            new pbr::GeneratedClrTypeInfo(typeof(global::Nakama.Leaderboard), global::Nakama.Leaderboard.Parser, new[]{ "Id", "Authoritative", "Sort", "Count", "ResetSchedule", "Metadata", "NextId", "PrevId" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Nakama.LeaderboardRecord), global::Nakama.LeaderboardRecord.Parser, new[]{ "LeaderboardId", "OwnerId", "Handle", "Lang", "Location", "Timezone", "Rank", "Score", "NumScore", "Metadata", "RankedAt", "UpdatedAt", "ExpiresAt" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Nakama.TLeaderboardsList), global::Nakama.TLeaderboardsList.Parser, new[]{ "Limit", "Cursor", "FilterLeaderboardId" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Nakama.TLeaderboards), global::Nakama.TLeaderboards.Parser, new[]{ "Leaderboards", "Cursor" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Nakama.TLeaderboardRecordsWrite), global::Nakama.TLeaderboardRecordsWrite.Parser, new[]{ "Records" }, null, null, new pbr::GeneratedClrTypeInfo[] { new pbr::GeneratedClrTypeInfo(typeof(global::Nakama.TLeaderboardRecordsWrite.Types.LeaderboardRecordWrite), global::Nakama.TLeaderboardRecordsWrite.Types.LeaderboardRecordWrite.Parser, new[]{ "LeaderboardId", "Incr", "Decr", "Set", "Best", "Location", "Timezone", "Metadata" }, new[]{ "Op" }, null, null)}),
            new pbr::GeneratedClrTypeInfo(typeof(global::Nakama.TLeaderboardRecordsFetch), global::Nakama.TLeaderboardRecordsFetch.Parser, new[]{ "LeaderboardIds", "Limit", "Cursor" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Nakama.TLeaderboardRecordsList), global::Nakama.TLeaderboardRecordsList.Parser, new[]{ "LeaderboardId", "OwnerId", "OwnerIds", "Lang", "Location", "Timezone", "Limit", "Cursor" }, new[]{ "Filter" }, null, new pbr::GeneratedClrTypeInfo[] { new pbr::GeneratedClrTypeInfo(typeof(global::Nakama.TLeaderboardRecordsList.Types.Owners), global::Nakama.TLeaderboardRecordsList.Types.Owners.Parser, new[]{ "OwnerIds" }, null, null, null)}),
            new pbr::GeneratedClrTypeInfo(typeof(global::Nakama.TLeaderboardRecords), global::Nakama.TLeaderboardRecords.Parser, new[]{ "Records", "Cursor" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Nakama.TRpc), global::Nakama.TRpc.Parser, new[]{ "Id", "Payload" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Nakama.TPurchaseValidation), global::Nakama.TPurchaseValidation.Parser, new[]{ "ApplePurchase", "GooglePurchase" }, new[]{ "Id" }, null, new pbr::GeneratedClrTypeInfo[] { new pbr::GeneratedClrTypeInfo(typeof(global::Nakama.TPurchaseValidation.Types.ApplePurchase), global::Nakama.TPurchaseValidation.Types.ApplePurchase.Parser, new[]{ "ProductId", "ReceiptData" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Nakama.TPurchaseValidation.Types.GooglePurchase), global::Nakama.TPurchaseValidation.Types.GooglePurchase.Parser, new[]{ "ProductId", "ProductType", "PurchaseToken" }, null, null, null)}),
            new pbr::GeneratedClrTypeInfo(typeof(global::Nakama.TPurchaseRecord), global::Nakama.TPurchaseRecord.Parser, new[]{ "Success", "SeenBefore", "PurchaseProviderReachable", "Message", "Data" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Nakama.Notification), global::Nakama.Notification.Parser, new[]{ "Id", "Subject", "Content", "Code", "SenderId", "CreatedAt", "ExpiresAt", "Persistent" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Nakama.Notifications), global::Nakama.Notifications.Parser, new[]{ "Notifications_" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Nakama.TNotificationsList), global::Nakama.TNotificationsList.Parser, new[]{ "Limit", "ResumableCursor" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Nakama.TNotifications), global::Nakama.TNotifications.Parser, new[]{ "Notifications", "ResumableCursor" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Nakama.TNotificationsRemove), global::Nakama.TNotificationsRemove.Parser, new[]{ "NotificationIds" }, null, null, null)
          }));
    }
    #endregion

  }
  #region Enums
  /// <summary>
  ///*
  /// StoragePermissionRead is the core domain type representing Storage Read permission
  /// </summary>
  public enum StoragePermissionRead {
    /// <summary>
    //// Storage owner does not have read access.
    /// </summary>
    [pbr::OriginalName("NO_READ")] NoRead = 0,
    /// <summary>
    //// Only storage owner has read access.
    /// </summary>
    [pbr::OriginalName("OWNER_READ")] OwnerRead = 1,
    /// <summary>
    //// Storage owner and every other user has read access.
    /// </summary>
    [pbr::OriginalName("PUBLIC_READ")] PublicRead = 2,
  }

  /// <summary>
  ///*
  /// StoragePermissionWrite is the core domain type representing Storage Write permission
  /// </summary>
  public enum StoragePermissionWrite {
    /// <summary>
    //// Storage owner does not have write access.
    /// </summary>
    [pbr::OriginalName("NO_WRITE")] NoWrite = 0,
    /// <summary>
    //// Storage owner has write access.
    /// </summary>
    [pbr::OriginalName("OWNER_WRITE")] OwnerWrite = 1,
  }

  #endregion

  #region Messages
  /// <summary>
  ///*
  /// Heartbeat message used as server ping to check for client liveliness.
  /// This is separate to any other protocol-level ping (e.g. Websocket PING).
  /// </summary>
  public sealed partial class Heartbeat : pb::IMessage<Heartbeat> {
    private static readonly pb::MessageParser<Heartbeat> _parser = new pb::MessageParser<Heartbeat>(() => new Heartbeat());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Heartbeat> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Nakama.ApiReflection.Descriptor.MessageTypes[0]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Heartbeat() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Heartbeat(Heartbeat other) : this() {
      timestamp_ = other.timestamp_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Heartbeat Clone() {
      return new Heartbeat(this);
    }

    /// <summary>Field number for the "timestamp" field.</summary>
    public const int TimestampFieldNumber = 1;
    private long timestamp_;
    /// <summary>
    //// Server UTC timestamp in milliseconds.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long Timestamp {
      get { return timestamp_; }
      set {
        timestamp_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Heartbeat);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Heartbeat other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Timestamp != other.Timestamp) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Timestamp != 0L) hash ^= Timestamp.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Timestamp != 0L) {
        output.WriteRawTag(8);
        output.WriteInt64(Timestamp);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Timestamp != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(Timestamp);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Heartbeat other) {
      if (other == null) {
        return;
      }
      if (other.Timestamp != 0L) {
        Timestamp = other.Timestamp;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            Timestamp = input.ReadInt64();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///*
  /// An error that has occured on the server.
  /// The error could be result of bad input, or unexpected system error.
  /// Check Error Code for more info.
  /// </summary>
  public sealed partial class Error : pb::IMessage<Error> {
    private static readonly pb::MessageParser<Error> _parser = new pb::MessageParser<Error>(() => new Error());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Error> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Nakama.ApiReflection.Descriptor.MessageTypes[1]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Error() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Error(Error other) : this() {
      code_ = other.code_;
      message_ = other.message_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Error Clone() {
      return new Error(this);
    }

    /// <summary>Field number for the "code" field.</summary>
    public const int CodeFieldNumber = 1;
    private int code_;
    /// <summary>
    //// Error code - must be one of the Error.Code enums above.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Code {
      get { return code_; }
      set {
        code_ = value;
      }
    }

    /// <summary>Field number for the "message" field.</summary>
    public const int MessageFieldNumber = 2;
    private string message_ = "";
    /// <summary>
    //// Specific error message.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Message {
      get { return message_; }
      set {
        message_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Error);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Error other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Code != other.Code) return false;
      if (Message != other.Message) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Code != 0) hash ^= Code.GetHashCode();
      if (Message.Length != 0) hash ^= Message.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Code != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(Code);
      }
      if (Message.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(Message);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Code != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Code);
      }
      if (Message.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Message);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Error other) {
      if (other == null) {
        return;
      }
      if (other.Code != 0) {
        Code = other.Code;
      }
      if (other.Message.Length != 0) {
        Message = other.Message;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            Code = input.ReadInt32();
            break;
          }
          case 18: {
            Message = input.ReadString();
            break;
          }
        }
      }
    }

    #region Nested types
    /// <summary>Container for nested types declared in the Error message type.</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static partial class Types {
      /// <summary>
      //// Predefined errors that are produced by the server.
      /// </summary>
      public enum Code {
        /// <summary>
        //// An unexpected error that is unrecoverable.
        /// </summary>
        [pbr::OriginalName("RUNTIME_EXCEPTION")] RuntimeException = 0,
        /// <summary>
        //// Server received a message that is not recognized.
        /// </summary>
        [pbr::OriginalName("UNRECOGNIZED_PAYLOAD")] UnrecognizedPayload = 1,
        /// <summary>
        //// Server received an Envelop message but the internal message is unrecognised. Most likely a protocol mismatch.
        /// </summary>
        [pbr::OriginalName("MISSING_PAYLOAD")] MissingPayload = 2,
        /// <summary>
        //// The message did not include the required data in the correct format.
        /// </summary>
        [pbr::OriginalName("BAD_INPUT")] BadInput = 3,
        /// <summary>
        //// Authentication failure.
        /// </summary>
        [pbr::OriginalName("AUTH_ERROR")] AuthError = 4,
        /// <summary>
        //// Login failed because ID/device/email did not exist.
        /// </summary>
        [pbr::OriginalName("USER_NOT_FOUND")] UserNotFound = 5,
        /// <summary>
        //// Registration failed because ID/device/email exists.
        /// </summary>
        [pbr::OriginalName("USER_REGISTER_INUSE")] UserRegisterInuse = 6,
        /// <summary>
        //// Linking operation failed because link exists.
        /// </summary>
        [pbr::OriginalName("USER_LINK_INUSE")] UserLinkInuse = 7,
        /// <summary>
        //// Linking operation failed because third-party service was unreachable.
        /// </summary>
        [pbr::OriginalName("USER_LINK_PROVIDER_UNAVAILABLE")] UserLinkProviderUnavailable = 8,
        /// <summary>
        //// Unlinking operation failed because you cannot unlink last ID.
        /// </summary>
        [pbr::OriginalName("USER_UNLINK_DISALLOWED")] UserUnlinkDisallowed = 9,
        /// <summary>
        //// Handle is in-use by another user.
        /// </summary>
        [pbr::OriginalName("USER_HANDLE_INUSE")] UserHandleInuse = 10,
        /// <summary>
        //// Group names must be unique and it's already in use.
        /// </summary>
        [pbr::OriginalName("GROUP_NAME_INUSE")] GroupNameInuse = 11,
        /// <summary>
        //// Group leave operation not allowed because the user is the last admin.
        /// </summary>
        [pbr::OriginalName("GROUP_LAST_ADMIN")] GroupLastAdmin = 12,
        /// <summary>
        //// Storage write operation failed.
        /// </summary>
        [pbr::OriginalName("STORAGE_REJECTED")] StorageRejected = 13,
        /// <summary>
        //// Match with given ID was not found in the system.
        /// </summary>
        [pbr::OriginalName("MATCH_NOT_FOUND")] MatchNotFound = 14,
        /// <summary>
        //// Runtime function name was not found in system registry.
        /// </summary>
        [pbr::OriginalName("RUNTIME_FUNCTION_NOT_FOUND")] RuntimeFunctionNotFound = 15,
        /// <summary>
        //// Runtime function caused an internal server error and did not complete.
        /// </summary>
        [pbr::OriginalName("RUNTIME_FUNCTION_EXCEPTION")] RuntimeFunctionException = 16,
      }

    }
    #endregion

  }

  /// <summary>
  ///*
  /// Authentication message used to register or login a user and generate a token.
  ///
  /// @returns AuthenticateResponse
  /// </summary>
  public sealed partial class AuthenticateRequest : pb::IMessage<AuthenticateRequest> {
    private static readonly pb::MessageParser<AuthenticateRequest> _parser = new pb::MessageParser<AuthenticateRequest>(() => new AuthenticateRequest());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<AuthenticateRequest> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Nakama.ApiReflection.Descriptor.MessageTypes[2]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AuthenticateRequest() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AuthenticateRequest(AuthenticateRequest other) : this() {
      collationId_ = other.collationId_;
      switch (other.IdCase) {
        case IdOneofCase.Email:
          Email = other.Email.Clone();
          break;
        case IdOneofCase.Facebook:
          Facebook = other.Facebook;
          break;
        case IdOneofCase.Google:
          Google = other.Google;
          break;
        case IdOneofCase.GameCenter:
          GameCenter = other.GameCenter.Clone();
          break;
        case IdOneofCase.Steam:
          Steam = other.Steam;
          break;
        case IdOneofCase.Device:
          Device = other.Device;
          break;
        case IdOneofCase.Custom:
          Custom = other.Custom;
          break;
      }

    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AuthenticateRequest Clone() {
      return new AuthenticateRequest(this);
    }

    /// <summary>Field number for the "collationId" field.</summary>
    public const int CollationIdFieldNumber = 1;
    private string collationId_ = "";
    /// <summary>
    //// Optional collationID to track server response.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string CollationId {
      get { return collationId_; }
      set {
        collationId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "email" field.</summary>
    public const int EmailFieldNumber = 2;
    /// <summary>
    //// Email address and password.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Nakama.AuthenticateRequest.Types.Email Email {
      get { return idCase_ == IdOneofCase.Email ? (global::Nakama.AuthenticateRequest.Types.Email) id_ : null; }
      set {
        id_ = value;
        idCase_ = value == null ? IdOneofCase.None : IdOneofCase.Email;
      }
    }

    /// <summary>Field number for the "facebook" field.</summary>
    public const int FacebookFieldNumber = 3;
    /// <summary>
    //// Facebook OAuth Access Token.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Facebook {
      get { return idCase_ == IdOneofCase.Facebook ? (string) id_ : ""; }
      set {
        id_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
        idCase_ = IdOneofCase.Facebook;
      }
    }

    /// <summary>Field number for the "google" field.</summary>
    public const int GoogleFieldNumber = 4;
    /// <summary>
    //// Google OAuth Access Token.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Google {
      get { return idCase_ == IdOneofCase.Google ? (string) id_ : ""; }
      set {
        id_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
        idCase_ = IdOneofCase.Google;
      }
    }

    /// <summary>Field number for the "game_center" field.</summary>
    public const int GameCenterFieldNumber = 5;
    /// <summary>
    //// GameCenter Authentication.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Nakama.AuthenticateRequest.Types.GameCenter GameCenter {
      get { return idCase_ == IdOneofCase.GameCenter ? (global::Nakama.AuthenticateRequest.Types.GameCenter) id_ : null; }
      set {
        id_ = value;
        idCase_ = value == null ? IdOneofCase.None : IdOneofCase.GameCenter;
      }
    }

    /// <summary>Field number for the "steam" field.</summary>
    public const int SteamFieldNumber = 6;
    /// <summary>
    //// Steam Token.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Steam {
      get { return idCase_ == IdOneofCase.Steam ? (string) id_ : ""; }
      set {
        id_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
        idCase_ = IdOneofCase.Steam;
      }
    }

    /// <summary>Field number for the "device" field.</summary>
    public const int DeviceFieldNumber = 7;
    /// <summary>
    //// Device ID authentication.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Device {
      get { return idCase_ == IdOneofCase.Device ? (string) id_ : ""; }
      set {
        id_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
        idCase_ = IdOneofCase.Device;
      }
    }

    /// <summary>Field number for the "custom" field.</summary>
    public const int CustomFieldNumber = 8;
    /// <summary>
    //// Custom ID authentication.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Custom {
      get { return idCase_ == IdOneofCase.Custom ? (string) id_ : ""; }
      set {
        id_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
        idCase_ = IdOneofCase.Custom;
      }
    }

    private object id_;
    /// <summary>Enum of possible cases for the "id" oneof.</summary>
    public enum IdOneofCase {
      None = 0,
      Email = 2,
      Facebook = 3,
      Google = 4,
      GameCenter = 5,
      Steam = 6,
      Device = 7,
      Custom = 8,
    }
    private IdOneofCase idCase_ = IdOneofCase.None;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public IdOneofCase IdCase {
      get { return idCase_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearId() {
      idCase_ = IdOneofCase.None;
      id_ = null;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as AuthenticateRequest);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(AuthenticateRequest other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (CollationId != other.CollationId) return false;
      if (!object.Equals(Email, other.Email)) return false;
      if (Facebook != other.Facebook) return false;
      if (Google != other.Google) return false;
      if (!object.Equals(GameCenter, other.GameCenter)) return false;
      if (Steam != other.Steam) return false;
      if (Device != other.Device) return false;
      if (Custom != other.Custom) return false;
      if (IdCase != other.IdCase) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (CollationId.Length != 0) hash ^= CollationId.GetHashCode();
      if (idCase_ == IdOneofCase.Email) hash ^= Email.GetHashCode();
      if (idCase_ == IdOneofCase.Facebook) hash ^= Facebook.GetHashCode();
      if (idCase_ == IdOneofCase.Google) hash ^= Google.GetHashCode();
      if (idCase_ == IdOneofCase.GameCenter) hash ^= GameCenter.GetHashCode();
      if (idCase_ == IdOneofCase.Steam) hash ^= Steam.GetHashCode();
      if (idCase_ == IdOneofCase.Device) hash ^= Device.GetHashCode();
      if (idCase_ == IdOneofCase.Custom) hash ^= Custom.GetHashCode();
      hash ^= (int) idCase_;
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (CollationId.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(CollationId);
      }
      if (idCase_ == IdOneofCase.Email) {
        output.WriteRawTag(18);
        output.WriteMessage(Email);
      }
      if (idCase_ == IdOneofCase.Facebook) {
        output.WriteRawTag(26);
        output.WriteString(Facebook);
      }
      if (idCase_ == IdOneofCase.Google) {
        output.WriteRawTag(34);
        output.WriteString(Google);
      }
      if (idCase_ == IdOneofCase.GameCenter) {
        output.WriteRawTag(42);
        output.WriteMessage(GameCenter);
      }
      if (idCase_ == IdOneofCase.Steam) {
        output.WriteRawTag(50);
        output.WriteString(Steam);
      }
      if (idCase_ == IdOneofCase.Device) {
        output.WriteRawTag(58);
        output.WriteString(Device);
      }
      if (idCase_ == IdOneofCase.Custom) {
        output.WriteRawTag(66);
        output.WriteString(Custom);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (CollationId.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(CollationId);
      }
      if (idCase_ == IdOneofCase.Email) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Email);
      }
      if (idCase_ == IdOneofCase.Facebook) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Facebook);
      }
      if (idCase_ == IdOneofCase.Google) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Google);
      }
      if (idCase_ == IdOneofCase.GameCenter) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(GameCenter);
      }
      if (idCase_ == IdOneofCase.Steam) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Steam);
      }
      if (idCase_ == IdOneofCase.Device) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Device);
      }
      if (idCase_ == IdOneofCase.Custom) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Custom);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(AuthenticateRequest other) {
      if (other == null) {
        return;
      }
      if (other.CollationId.Length != 0) {
        CollationId = other.CollationId;
      }
      switch (other.IdCase) {
        case IdOneofCase.Email:
          if (Email == null) {
            Email = new global::Nakama.AuthenticateRequest.Types.Email();
          }
          Email.MergeFrom(other.Email);
          break;
        case IdOneofCase.Facebook:
          Facebook = other.Facebook;
          break;
        case IdOneofCase.Google:
          Google = other.Google;
          break;
        case IdOneofCase.GameCenter:
          if (GameCenter == null) {
            GameCenter = new global::Nakama.AuthenticateRequest.Types.GameCenter();
          }
          GameCenter.MergeFrom(other.GameCenter);
          break;
        case IdOneofCase.Steam:
          Steam = other.Steam;
          break;
        case IdOneofCase.Device:
          Device = other.Device;
          break;
        case IdOneofCase.Custom:
          Custom = other.Custom;
          break;
      }

    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            CollationId = input.ReadString();
            break;
          }
          case 18: {
            global::Nakama.AuthenticateRequest.Types.Email subBuilder = new global::Nakama.AuthenticateRequest.Types.Email();
            if (idCase_ == IdOneofCase.Email) {
              subBuilder.MergeFrom(Email);
            }
            input.ReadMessage(subBuilder);
            Email = subBuilder;
            break;
          }
          case 26: {
            Facebook = input.ReadString();
            break;
          }
          case 34: {
            Google = input.ReadString();
            break;
          }
          case 42: {
            global::Nakama.AuthenticateRequest.Types.GameCenter subBuilder = new global::Nakama.AuthenticateRequest.Types.GameCenter();
            if (idCase_ == IdOneofCase.GameCenter) {
              subBuilder.MergeFrom(GameCenter);
            }
            input.ReadMessage(subBuilder);
            GameCenter = subBuilder;
            break;
          }
          case 50: {
            Steam = input.ReadString();
            break;
          }
          case 58: {
            Device = input.ReadString();
            break;
          }
          case 66: {
            Custom = input.ReadString();
            break;
          }
        }
      }
    }

    #region Nested types
    /// <summary>Container for nested types declared in the AuthenticateRequest message type.</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static partial class Types {
      /// <summary>
      ///*
      /// Email-based authentication.
      /// </summary>
      public sealed partial class Email : pb::IMessage<Email> {
        private static readonly pb::MessageParser<Email> _parser = new pb::MessageParser<Email>(() => new Email());
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<Email> Parser { get { return _parser; } }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor {
          get { return global::Nakama.AuthenticateRequest.Descriptor.NestedTypes[0]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor {
          get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public Email() {
          OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public Email(Email other) : this() {
          email_ = other.email_;
          password_ = other.password_;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public Email Clone() {
          return new Email(this);
        }

        /// <summary>Field number for the "email" field.</summary>
        public const int Email_FieldNumber = 1;
        private string email_ = "";
        /// <summary>
        //// Email address.
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public string Email_ {
          get { return email_; }
          set {
            email_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
          }
        }

        /// <summary>Field number for the "password" field.</summary>
        public const int PasswordFieldNumber = 2;
        private string password_ = "";
        /// <summary>
        //// Password.
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public string Password {
          get { return password_; }
          set {
            password_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other) {
          return Equals(other as Email);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(Email other) {
          if (ReferenceEquals(other, null)) {
            return false;
          }
          if (ReferenceEquals(other, this)) {
            return true;
          }
          if (Email_ != other.Email_) return false;
          if (Password != other.Password) return false;
          return true;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode() {
          int hash = 1;
          if (Email_.Length != 0) hash ^= Email_.GetHashCode();
          if (Password.Length != 0) hash ^= Password.GetHashCode();
          return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString() {
          return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output) {
          if (Email_.Length != 0) {
            output.WriteRawTag(10);
            output.WriteString(Email_);
          }
          if (Password.Length != 0) {
            output.WriteRawTag(18);
            output.WriteString(Password);
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize() {
          int size = 0;
          if (Email_.Length != 0) {
            size += 1 + pb::CodedOutputStream.ComputeStringSize(Email_);
          }
          if (Password.Length != 0) {
            size += 1 + pb::CodedOutputStream.ComputeStringSize(Password);
          }
          return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(Email other) {
          if (other == null) {
            return;
          }
          if (other.Email_.Length != 0) {
            Email_ = other.Email_;
          }
          if (other.Password.Length != 0) {
            Password = other.Password;
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input) {
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                input.SkipLastField();
                break;
              case 10: {
                Email_ = input.ReadString();
                break;
              }
              case 18: {
                Password = input.ReadString();
                break;
              }
            }
          }
        }

      }

      /// <summary>
      ///*
      /// GameCenter authentication.
      ///
      /// https://developer.apple.com/documentation/gamekit/gklocalplayer/1515407-generateidentityverificationsign
      /// </summary>
      public sealed partial class GameCenter : pb::IMessage<GameCenter> {
        private static readonly pb::MessageParser<GameCenter> _parser = new pb::MessageParser<GameCenter>(() => new GameCenter());
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<GameCenter> Parser { get { return _parser; } }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor {
          get { return global::Nakama.AuthenticateRequest.Descriptor.NestedTypes[1]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor {
          get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public GameCenter() {
          OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public GameCenter(GameCenter other) : this() {
          playerId_ = other.playerId_;
          bundleId_ = other.bundleId_;
          timestamp_ = other.timestamp_;
          salt_ = other.salt_;
          signature_ = other.signature_;
          publicKeyUrl_ = other.publicKeyUrl_;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public GameCenter Clone() {
          return new GameCenter(this);
        }

        /// <summary>Field number for the "player_id" field.</summary>
        public const int PlayerIdFieldNumber = 1;
        private string playerId_ = "";
        /// <summary>
        //// PlayerID generated by GameCenter.
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public string PlayerId {
          get { return playerId_; }
          set {
            playerId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
          }
        }

        /// <summary>Field number for the "bundle_id" field.</summary>
        public const int BundleIdFieldNumber = 2;
        private string bundleId_ = "";
        /// <summary>
        //// BundleID generated by GameCenter.
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public string BundleId {
          get { return bundleId_; }
          set {
            bundleId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
          }
        }

        /// <summary>Field number for the "timestamp" field.</summary>
        public const int TimestampFieldNumber = 3;
        private long timestamp_;
        /// <summary>
        //// The date and time that the signature was created.
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public long Timestamp {
          get { return timestamp_; }
          set {
            timestamp_ = value;
          }
        }

        /// <summary>Field number for the "salt" field.</summary>
        public const int SaltFieldNumber = 4;
        private string salt_ = "";
        /// <summary>
        //// A random NSString used to compute the hash and keep it randomized.
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public string Salt {
          get { return salt_; }
          set {
            salt_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
          }
        }

        /// <summary>Field number for the "signature" field.</summary>
        public const int SignatureFieldNumber = 5;
        private string signature_ = "";
        /// <summary>
        //// The verification signature data generated.
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public string Signature {
          get { return signature_; }
          set {
            signature_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
          }
        }

        /// <summary>Field number for the "public_key_url" field.</summary>
        public const int PublicKeyUrlFieldNumber = 6;
        private string publicKeyUrl_ = "";
        /// <summary>
        //// The URL for the public encryption key.
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public string PublicKeyUrl {
          get { return publicKeyUrl_; }
          set {
            publicKeyUrl_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other) {
          return Equals(other as GameCenter);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(GameCenter other) {
          if (ReferenceEquals(other, null)) {
            return false;
          }
          if (ReferenceEquals(other, this)) {
            return true;
          }
          if (PlayerId != other.PlayerId) return false;
          if (BundleId != other.BundleId) return false;
          if (Timestamp != other.Timestamp) return false;
          if (Salt != other.Salt) return false;
          if (Signature != other.Signature) return false;
          if (PublicKeyUrl != other.PublicKeyUrl) return false;
          return true;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode() {
          int hash = 1;
          if (PlayerId.Length != 0) hash ^= PlayerId.GetHashCode();
          if (BundleId.Length != 0) hash ^= BundleId.GetHashCode();
          if (Timestamp != 0L) hash ^= Timestamp.GetHashCode();
          if (Salt.Length != 0) hash ^= Salt.GetHashCode();
          if (Signature.Length != 0) hash ^= Signature.GetHashCode();
          if (PublicKeyUrl.Length != 0) hash ^= PublicKeyUrl.GetHashCode();
          return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString() {
          return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output) {
          if (PlayerId.Length != 0) {
            output.WriteRawTag(10);
            output.WriteString(PlayerId);
          }
          if (BundleId.Length != 0) {
            output.WriteRawTag(18);
            output.WriteString(BundleId);
          }
          if (Timestamp != 0L) {
            output.WriteRawTag(24);
            output.WriteInt64(Timestamp);
          }
          if (Salt.Length != 0) {
            output.WriteRawTag(34);
            output.WriteString(Salt);
          }
          if (Signature.Length != 0) {
            output.WriteRawTag(42);
            output.WriteString(Signature);
          }
          if (PublicKeyUrl.Length != 0) {
            output.WriteRawTag(50);
            output.WriteString(PublicKeyUrl);
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize() {
          int size = 0;
          if (PlayerId.Length != 0) {
            size += 1 + pb::CodedOutputStream.ComputeStringSize(PlayerId);
          }
          if (BundleId.Length != 0) {
            size += 1 + pb::CodedOutputStream.ComputeStringSize(BundleId);
          }
          if (Timestamp != 0L) {
            size += 1 + pb::CodedOutputStream.ComputeInt64Size(Timestamp);
          }
          if (Salt.Length != 0) {
            size += 1 + pb::CodedOutputStream.ComputeStringSize(Salt);
          }
          if (Signature.Length != 0) {
            size += 1 + pb::CodedOutputStream.ComputeStringSize(Signature);
          }
          if (PublicKeyUrl.Length != 0) {
            size += 1 + pb::CodedOutputStream.ComputeStringSize(PublicKeyUrl);
          }
          return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(GameCenter other) {
          if (other == null) {
            return;
          }
          if (other.PlayerId.Length != 0) {
            PlayerId = other.PlayerId;
          }
          if (other.BundleId.Length != 0) {
            BundleId = other.BundleId;
          }
          if (other.Timestamp != 0L) {
            Timestamp = other.Timestamp;
          }
          if (other.Salt.Length != 0) {
            Salt = other.Salt;
          }
          if (other.Signature.Length != 0) {
            Signature = other.Signature;
          }
          if (other.PublicKeyUrl.Length != 0) {
            PublicKeyUrl = other.PublicKeyUrl;
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input) {
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                input.SkipLastField();
                break;
              case 10: {
                PlayerId = input.ReadString();
                break;
              }
              case 18: {
                BundleId = input.ReadString();
                break;
              }
              case 24: {
                Timestamp = input.ReadInt64();
                break;
              }
              case 34: {
                Salt = input.ReadString();
                break;
              }
              case 42: {
                Signature = input.ReadString();
                break;
              }
              case 50: {
                PublicKeyUrl = input.ReadString();
                break;
              }
            }
          }
        }

      }

    }
    #endregion

  }

  /// <summary>
  ///*
  /// Authentication message wrapper containing either a AuthenticateResponse.Session or AuthenticateResponse.Error.
  /// </summary>
  public sealed partial class AuthenticateResponse : pb::IMessage<AuthenticateResponse> {
    private static readonly pb::MessageParser<AuthenticateResponse> _parser = new pb::MessageParser<AuthenticateResponse>(() => new AuthenticateResponse());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<AuthenticateResponse> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Nakama.ApiReflection.Descriptor.MessageTypes[3]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AuthenticateResponse() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AuthenticateResponse(AuthenticateResponse other) : this() {
      collationId_ = other.collationId_;
      switch (other.IdCase) {
        case IdOneofCase.Session:
          Session = other.Session.Clone();
          break;
        case IdOneofCase.Error:
          Error = other.Error.Clone();
          break;
      }

    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AuthenticateResponse Clone() {
      return new AuthenticateResponse(this);
    }

    /// <summary>Field number for the "collation_id" field.</summary>
    public const int CollationIdFieldNumber = 1;
    private string collationId_ = "";
    /// <summary>
    //// Optional collationID to track server response.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string CollationId {
      get { return collationId_; }
      set {
        collationId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "session" field.</summary>
    public const int SessionFieldNumber = 2;
    /// <summary>
    //// Authentication session.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Nakama.AuthenticateResponse.Types.Session Session {
      get { return idCase_ == IdOneofCase.Session ? (global::Nakama.AuthenticateResponse.Types.Session) id_ : null; }
      set {
        id_ = value;
        idCase_ = value == null ? IdOneofCase.None : IdOneofCase.Session;
      }
    }

    /// <summary>Field number for the "error" field.</summary>
    public const int ErrorFieldNumber = 3;
    /// <summary>
    //// Authentication error.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Nakama.AuthenticateResponse.Types.Error Error {
      get { return idCase_ == IdOneofCase.Error ? (global::Nakama.AuthenticateResponse.Types.Error) id_ : null; }
      set {
        id_ = value;
        idCase_ = value == null ? IdOneofCase.None : IdOneofCase.Error;
      }
    }

    private object id_;
    /// <summary>Enum of possible cases for the "id" oneof.</summary>
    public enum IdOneofCase {
      None = 0,
      Session = 2,
      Error = 3,
    }
    private IdOneofCase idCase_ = IdOneofCase.None;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public IdOneofCase IdCase {
      get { return idCase_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearId() {
      idCase_ = IdOneofCase.None;
      id_ = null;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as AuthenticateResponse);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(AuthenticateResponse other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (CollationId != other.CollationId) return false;
      if (!object.Equals(Session, other.Session)) return false;
      if (!object.Equals(Error, other.Error)) return false;
      if (IdCase != other.IdCase) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (CollationId.Length != 0) hash ^= CollationId.GetHashCode();
      if (idCase_ == IdOneofCase.Session) hash ^= Session.GetHashCode();
      if (idCase_ == IdOneofCase.Error) hash ^= Error.GetHashCode();
      hash ^= (int) idCase_;
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (CollationId.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(CollationId);
      }
      if (idCase_ == IdOneofCase.Session) {
        output.WriteRawTag(18);
        output.WriteMessage(Session);
      }
      if (idCase_ == IdOneofCase.Error) {
        output.WriteRawTag(26);
        output.WriteMessage(Error);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (CollationId.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(CollationId);
      }
      if (idCase_ == IdOneofCase.Session) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Session);
      }
      if (idCase_ == IdOneofCase.Error) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Error);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(AuthenticateResponse other) {
      if (other == null) {
        return;
      }
      if (other.CollationId.Length != 0) {
        CollationId = other.CollationId;
      }
      switch (other.IdCase) {
        case IdOneofCase.Session:
          if (Session == null) {
            Session = new global::Nakama.AuthenticateResponse.Types.Session();
          }
          Session.MergeFrom(other.Session);
          break;
        case IdOneofCase.Error:
          if (Error == null) {
            Error = new global::Nakama.AuthenticateResponse.Types.Error();
          }
          Error.MergeFrom(other.Error);
          break;
      }

    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            CollationId = input.ReadString();
            break;
          }
          case 18: {
            global::Nakama.AuthenticateResponse.Types.Session subBuilder = new global::Nakama.AuthenticateResponse.Types.Session();
            if (idCase_ == IdOneofCase.Session) {
              subBuilder.MergeFrom(Session);
            }
            input.ReadMessage(subBuilder);
            Session = subBuilder;
            break;
          }
          case 26: {
            global::Nakama.AuthenticateResponse.Types.Error subBuilder = new global::Nakama.AuthenticateResponse.Types.Error();
            if (idCase_ == IdOneofCase.Error) {
              subBuilder.MergeFrom(Error);
            }
            input.ReadMessage(subBuilder);
            Error = subBuilder;
            break;
          }
        }
      }
    }

    #region Nested types
    /// <summary>Container for nested types declared in the AuthenticateResponse message type.</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static partial class Types {
      /// <summary>
      ///*
      /// Authentication Session.
      /// </summary>
      public sealed partial class Session : pb::IMessage<Session> {
        private static readonly pb::MessageParser<Session> _parser = new pb::MessageParser<Session>(() => new Session());
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<Session> Parser { get { return _parser; } }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor {
          get { return global::Nakama.AuthenticateResponse.Descriptor.NestedTypes[0]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor {
          get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public Session() {
          OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public Session(Session other) : this() {
          token_ = other.token_;
          udpToken_ = other.udpToken_;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public Session Clone() {
          return new Session(this);
        }

        /// <summary>Field number for the "token" field.</summary>
        public const int TokenFieldNumber = 1;
        private string token_ = "";
        /// <summary>
        //// Authentication Token.
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public string Token {
          get { return token_; }
          set {
            token_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
          }
        }

        /// <summary>Field number for the "udp_token" field.</summary>
        public const int UdpTokenFieldNumber = 2;
        private string udpToken_ = "";
        /// <summary>
        //// UDP token.
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public string UdpToken {
          get { return udpToken_; }
          set {
            udpToken_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other) {
          return Equals(other as Session);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(Session other) {
          if (ReferenceEquals(other, null)) {
            return false;
          }
          if (ReferenceEquals(other, this)) {
            return true;
          }
          if (Token != other.Token) return false;
          if (UdpToken != other.UdpToken) return false;
          return true;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode() {
          int hash = 1;
          if (Token.Length != 0) hash ^= Token.GetHashCode();
          if (UdpToken.Length != 0) hash ^= UdpToken.GetHashCode();
          return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString() {
          return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output) {
          if (Token.Length != 0) {
            output.WriteRawTag(10);
            output.WriteString(Token);
          }
          if (UdpToken.Length != 0) {
            output.WriteRawTag(18);
            output.WriteString(UdpToken);
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize() {
          int size = 0;
          if (Token.Length != 0) {
            size += 1 + pb::CodedOutputStream.ComputeStringSize(Token);
          }
          if (UdpToken.Length != 0) {
            size += 1 + pb::CodedOutputStream.ComputeStringSize(UdpToken);
          }
          return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(Session other) {
          if (other == null) {
            return;
          }
          if (other.Token.Length != 0) {
            Token = other.Token;
          }
          if (other.UdpToken.Length != 0) {
            UdpToken = other.UdpToken;
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input) {
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                input.SkipLastField();
                break;
              case 10: {
                Token = input.ReadString();
                break;
              }
              case 18: {
                UdpToken = input.ReadString();
                break;
              }
            }
          }
        }

      }

      /// <summary>
      ///*
      /// Authentication Error.
      /// </summary>
      public sealed partial class Error : pb::IMessage<Error> {
        private static readonly pb::MessageParser<Error> _parser = new pb::MessageParser<Error>(() => new Error());
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<Error> Parser { get { return _parser; } }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor {
          get { return global::Nakama.AuthenticateResponse.Descriptor.NestedTypes[1]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor {
          get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public Error() {
          OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public Error(Error other) : this() {
          code_ = other.code_;
          message_ = other.message_;
          Request = other.request_ != null ? other.Request.Clone() : null;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public Error Clone() {
          return new Error(this);
        }

        /// <summary>Field number for the "code" field.</summary>
        public const int CodeFieldNumber = 1;
        private int code_;
        /// <summary>
        //// Error code - this will be the same as the global error codes.
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int Code {
          get { return code_; }
          set {
            code_ = value;
          }
        }

        /// <summary>Field number for the "message" field.</summary>
        public const int MessageFieldNumber = 2;
        private string message_ = "";
        /// <summary>
        //// Specific error message.
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public string Message {
          get { return message_; }
          set {
            message_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
          }
        }

        /// <summary>Field number for the "request" field.</summary>
        public const int RequestFieldNumber = 3;
        private global::Nakama.AuthenticateRequest request_;
        /// <summary>
        //// Original request that caused this error.
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public global::Nakama.AuthenticateRequest Request {
          get { return request_; }
          set {
            request_ = value;
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other) {
          return Equals(other as Error);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(Error other) {
          if (ReferenceEquals(other, null)) {
            return false;
          }
          if (ReferenceEquals(other, this)) {
            return true;
          }
          if (Code != other.Code) return false;
          if (Message != other.Message) return false;
          if (!object.Equals(Request, other.Request)) return false;
          return true;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode() {
          int hash = 1;
          if (Code != 0) hash ^= Code.GetHashCode();
          if (Message.Length != 0) hash ^= Message.GetHashCode();
          if (request_ != null) hash ^= Request.GetHashCode();
          return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString() {
          return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output) {
          if (Code != 0) {
            output.WriteRawTag(8);
            output.WriteInt32(Code);
          }
          if (Message.Length != 0) {
            output.WriteRawTag(18);
            output.WriteString(Message);
          }
          if (request_ != null) {
            output.WriteRawTag(26);
            output.WriteMessage(Request);
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize() {
          int size = 0;
          if (Code != 0) {
            size += 1 + pb::CodedOutputStream.ComputeInt32Size(Code);
          }
          if (Message.Length != 0) {
            size += 1 + pb::CodedOutputStream.ComputeStringSize(Message);
          }
          if (request_ != null) {
            size += 1 + pb::CodedOutputStream.ComputeMessageSize(Request);
          }
          return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(Error other) {
          if (other == null) {
            return;
          }
          if (other.Code != 0) {
            Code = other.Code;
          }
          if (other.Message.Length != 0) {
            Message = other.Message;
          }
          if (other.request_ != null) {
            if (request_ == null) {
              request_ = new global::Nakama.AuthenticateRequest();
            }
            Request.MergeFrom(other.Request);
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input) {
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                input.SkipLastField();
                break;
              case 8: {
                Code = input.ReadInt32();
                break;
              }
              case 18: {
                Message = input.ReadString();
                break;
              }
              case 26: {
                if (request_ == null) {
                  request_ = new global::Nakama.AuthenticateRequest();
                }
                input.ReadMessage(request_);
                break;
              }
            }
          }
        }

      }

    }
    #endregion

  }

  /// <summary>
  ///*
  /// Main message wrapper containing a Payload and an optional Collation ID to track server responses.
  /// </summary>
  public sealed partial class Envelope : pb::IMessage<Envelope> {
    private static readonly pb::MessageParser<Envelope> _parser = new pb::MessageParser<Envelope>(() => new Envelope());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Envelope> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Nakama.ApiReflection.Descriptor.MessageTypes[4]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Envelope() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Envelope(Envelope other) : this() {
      collationId_ = other.collationId_;
      switch (other.PayloadCase) {
        case PayloadOneofCase.Error:
          Error = other.Error.Clone();
          break;
        case PayloadOneofCase.Heartbeat:
          Heartbeat = other.Heartbeat.Clone();
          break;
        case PayloadOneofCase.Logout:
          Logout = other.Logout.Clone();
          break;
        case PayloadOneofCase.Link:
          Link = other.Link.Clone();
          break;
        case PayloadOneofCase.Unlink:
          Unlink = other.Unlink.Clone();
          break;
        case PayloadOneofCase.SelfFetch:
          SelfFetch = other.SelfFetch.Clone();
          break;
        case PayloadOneofCase.SelfUpdate:
          SelfUpdate = other.SelfUpdate.Clone();
          break;
        case PayloadOneofCase.UsersFetch:
          UsersFetch = other.UsersFetch.Clone();
          break;
        case PayloadOneofCase.Self:
          Self = other.Self.Clone();
          break;
        case PayloadOneofCase.Users:
          Users = other.Users.Clone();
          break;
        case PayloadOneofCase.FriendsAdd:
          FriendsAdd = other.FriendsAdd.Clone();
          break;
        case PayloadOneofCase.FriendsRemove:
          FriendsRemove = other.FriendsRemove.Clone();
          break;
        case PayloadOneofCase.FriendsBlock:
          FriendsBlock = other.FriendsBlock.Clone();
          break;
        case PayloadOneofCase.FriendsList:
          FriendsList = other.FriendsList.Clone();
          break;
        case PayloadOneofCase.Friends:
          Friends = other.Friends.Clone();
          break;
        case PayloadOneofCase.GroupsCreate:
          GroupsCreate = other.GroupsCreate.Clone();
          break;
        case PayloadOneofCase.GroupsUpdate:
          GroupsUpdate = other.GroupsUpdate.Clone();
          break;
        case PayloadOneofCase.GroupsRemove:
          GroupsRemove = other.GroupsRemove.Clone();
          break;
        case PayloadOneofCase.GroupsFetch:
          GroupsFetch = other.GroupsFetch.Clone();
          break;
        case PayloadOneofCase.GroupsList:
          GroupsList = other.GroupsList.Clone();
          break;
        case PayloadOneofCase.GroupsSelfList:
          GroupsSelfList = other.GroupsSelfList.Clone();
          break;
        case PayloadOneofCase.GroupUsersList:
          GroupUsersList = other.GroupUsersList.Clone();
          break;
        case PayloadOneofCase.GroupsJoin:
          GroupsJoin = other.GroupsJoin.Clone();
          break;
        case PayloadOneofCase.GroupsLeave:
          GroupsLeave = other.GroupsLeave.Clone();
          break;
        case PayloadOneofCase.GroupUsersAdd:
          GroupUsersAdd = other.GroupUsersAdd.Clone();
          break;
        case PayloadOneofCase.GroupUsersKick:
          GroupUsersKick = other.GroupUsersKick.Clone();
          break;
        case PayloadOneofCase.GroupUsersPromote:
          GroupUsersPromote = other.GroupUsersPromote.Clone();
          break;
        case PayloadOneofCase.Groups:
          Groups = other.Groups.Clone();
          break;
        case PayloadOneofCase.GroupsSelf:
          GroupsSelf = other.GroupsSelf.Clone();
          break;
        case PayloadOneofCase.GroupUsers:
          GroupUsers = other.GroupUsers.Clone();
          break;
        case PayloadOneofCase.TopicsJoin:
          TopicsJoin = other.TopicsJoin.Clone();
          break;
        case PayloadOneofCase.TopicsLeave:
          TopicsLeave = other.TopicsLeave.Clone();
          break;
        case PayloadOneofCase.TopicMessageSend:
          TopicMessageSend = other.TopicMessageSend.Clone();
          break;
        case PayloadOneofCase.TopicMessagesList:
          TopicMessagesList = other.TopicMessagesList.Clone();
          break;
        case PayloadOneofCase.Topics:
          Topics = other.Topics.Clone();
          break;
        case PayloadOneofCase.TopicMessageAck:
          TopicMessageAck = other.TopicMessageAck.Clone();
          break;
        case PayloadOneofCase.TopicMessage:
          TopicMessage = other.TopicMessage.Clone();
          break;
        case PayloadOneofCase.TopicMessages:
          TopicMessages = other.TopicMessages.Clone();
          break;
        case PayloadOneofCase.TopicPresence:
          TopicPresence = other.TopicPresence.Clone();
          break;
        case PayloadOneofCase.MatchCreate:
          MatchCreate = other.MatchCreate.Clone();
          break;
        case PayloadOneofCase.MatchesJoin:
          MatchesJoin = other.MatchesJoin.Clone();
          break;
        case PayloadOneofCase.MatchesLeave:
          MatchesLeave = other.MatchesLeave.Clone();
          break;
        case PayloadOneofCase.MatchDataSend:
          MatchDataSend = other.MatchDataSend.Clone();
          break;
        case PayloadOneofCase.Match:
          Match = other.Match.Clone();
          break;
        case PayloadOneofCase.Matches:
          Matches = other.Matches.Clone();
          break;
        case PayloadOneofCase.MatchData:
          MatchData = other.MatchData.Clone();
          break;
        case PayloadOneofCase.MatchPresence:
          MatchPresence = other.MatchPresence.Clone();
          break;
        case PayloadOneofCase.StorageList:
          StorageList = other.StorageList.Clone();
          break;
        case PayloadOneofCase.StorageFetch:
          StorageFetch = other.StorageFetch.Clone();
          break;
        case PayloadOneofCase.StorageWrite:
          StorageWrite = other.StorageWrite.Clone();
          break;
        case PayloadOneofCase.StorageUpdate:
          StorageUpdate = other.StorageUpdate.Clone();
          break;
        case PayloadOneofCase.StorageRemove:
          StorageRemove = other.StorageRemove.Clone();
          break;
        case PayloadOneofCase.StorageData:
          StorageData = other.StorageData.Clone();
          break;
        case PayloadOneofCase.StorageKeys:
          StorageKeys = other.StorageKeys.Clone();
          break;
        case PayloadOneofCase.LeaderboardsList:
          LeaderboardsList = other.LeaderboardsList.Clone();
          break;
        case PayloadOneofCase.LeaderboardRecordsWrite:
          LeaderboardRecordsWrite = other.LeaderboardRecordsWrite.Clone();
          break;
        case PayloadOneofCase.LeaderboardRecordsFetch:
          LeaderboardRecordsFetch = other.LeaderboardRecordsFetch.Clone();
          break;
        case PayloadOneofCase.LeaderboardRecordsList:
          LeaderboardRecordsList = other.LeaderboardRecordsList.Clone();
          break;
        case PayloadOneofCase.Leaderboards:
          Leaderboards = other.Leaderboards.Clone();
          break;
        case PayloadOneofCase.LeaderboardRecords:
          LeaderboardRecords = other.LeaderboardRecords.Clone();
          break;
        case PayloadOneofCase.MatchmakeAdd:
          MatchmakeAdd = other.MatchmakeAdd.Clone();
          break;
        case PayloadOneofCase.MatchmakeRemove:
          MatchmakeRemove = other.MatchmakeRemove.Clone();
          break;
        case PayloadOneofCase.MatchmakeTicket:
          MatchmakeTicket = other.MatchmakeTicket.Clone();
          break;
        case PayloadOneofCase.MatchmakeMatched:
          MatchmakeMatched = other.MatchmakeMatched.Clone();
          break;
        case PayloadOneofCase.Rpc:
          Rpc = other.Rpc.Clone();
          break;
        case PayloadOneofCase.Purchase:
          Purchase = other.Purchase.Clone();
          break;
        case PayloadOneofCase.PurchaseRecord:
          PurchaseRecord = other.PurchaseRecord.Clone();
          break;
        case PayloadOneofCase.NotificationsList:
          NotificationsList = other.NotificationsList.Clone();
          break;
        case PayloadOneofCase.NotificationsRemove:
          NotificationsRemove = other.NotificationsRemove.Clone();
          break;
        case PayloadOneofCase.Notifications:
          Notifications = other.Notifications.Clone();
          break;
        case PayloadOneofCase.LiveNotifications:
          LiveNotifications = other.LiveNotifications.Clone();
          break;
      }

    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Envelope Clone() {
      return new Envelope(this);
    }

    /// <summary>Field number for the "collation_id" field.</summary>
    public const int CollationIdFieldNumber = 1;
    private string collationId_ = "";
    /// <summary>
    //// Optional collationID to track server response.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string CollationId {
      get { return collationId_; }
      set {
        collationId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "error" field.</summary>
    public const int ErrorFieldNumber = 2;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Nakama.Error Error {
      get { return payloadCase_ == PayloadOneofCase.Error ? (global::Nakama.Error) payload_ : null; }
      set {
        payload_ = value;
        payloadCase_ = value == null ? PayloadOneofCase.None : PayloadOneofCase.Error;
      }
    }

    /// <summary>Field number for the "heartbeat" field.</summary>
    public const int HeartbeatFieldNumber = 3;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Nakama.Heartbeat Heartbeat {
      get { return payloadCase_ == PayloadOneofCase.Heartbeat ? (global::Nakama.Heartbeat) payload_ : null; }
      set {
        payload_ = value;
        payloadCase_ = value == null ? PayloadOneofCase.None : PayloadOneofCase.Heartbeat;
      }
    }

    /// <summary>Field number for the "logout" field.</summary>
    public const int LogoutFieldNumber = 4;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Nakama.Logout Logout {
      get { return payloadCase_ == PayloadOneofCase.Logout ? (global::Nakama.Logout) payload_ : null; }
      set {
        payload_ = value;
        payloadCase_ = value == null ? PayloadOneofCase.None : PayloadOneofCase.Logout;
      }
    }

    /// <summary>Field number for the "link" field.</summary>
    public const int LinkFieldNumber = 5;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Nakama.TLink Link {
      get { return payloadCase_ == PayloadOneofCase.Link ? (global::Nakama.TLink) payload_ : null; }
      set {
        payload_ = value;
        payloadCase_ = value == null ? PayloadOneofCase.None : PayloadOneofCase.Link;
      }
    }

    /// <summary>Field number for the "unlink" field.</summary>
    public const int UnlinkFieldNumber = 6;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Nakama.TUnlink Unlink {
      get { return payloadCase_ == PayloadOneofCase.Unlink ? (global::Nakama.TUnlink) payload_ : null; }
      set {
        payload_ = value;
        payloadCase_ = value == null ? PayloadOneofCase.None : PayloadOneofCase.Unlink;
      }
    }

    /// <summary>Field number for the "self_fetch" field.</summary>
    public const int SelfFetchFieldNumber = 7;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Nakama.TSelfFetch SelfFetch {
      get { return payloadCase_ == PayloadOneofCase.SelfFetch ? (global::Nakama.TSelfFetch) payload_ : null; }
      set {
        payload_ = value;
        payloadCase_ = value == null ? PayloadOneofCase.None : PayloadOneofCase.SelfFetch;
      }
    }

    /// <summary>Field number for the "self_update" field.</summary>
    public const int SelfUpdateFieldNumber = 8;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Nakama.TSelfUpdate SelfUpdate {
      get { return payloadCase_ == PayloadOneofCase.SelfUpdate ? (global::Nakama.TSelfUpdate) payload_ : null; }
      set {
        payload_ = value;
        payloadCase_ = value == null ? PayloadOneofCase.None : PayloadOneofCase.SelfUpdate;
      }
    }

    /// <summary>Field number for the "users_fetch" field.</summary>
    public const int UsersFetchFieldNumber = 9;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Nakama.TUsersFetch UsersFetch {
      get { return payloadCase_ == PayloadOneofCase.UsersFetch ? (global::Nakama.TUsersFetch) payload_ : null; }
      set {
        payload_ = value;
        payloadCase_ = value == null ? PayloadOneofCase.None : PayloadOneofCase.UsersFetch;
      }
    }

    /// <summary>Field number for the "self" field.</summary>
    public const int SelfFieldNumber = 10;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Nakama.TSelf Self {
      get { return payloadCase_ == PayloadOneofCase.Self ? (global::Nakama.TSelf) payload_ : null; }
      set {
        payload_ = value;
        payloadCase_ = value == null ? PayloadOneofCase.None : PayloadOneofCase.Self;
      }
    }

    /// <summary>Field number for the "users" field.</summary>
    public const int UsersFieldNumber = 11;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Nakama.TUsers Users {
      get { return payloadCase_ == PayloadOneofCase.Users ? (global::Nakama.TUsers) payload_ : null; }
      set {
        payload_ = value;
        payloadCase_ = value == null ? PayloadOneofCase.None : PayloadOneofCase.Users;
      }
    }

    /// <summary>Field number for the "friends_add" field.</summary>
    public const int FriendsAddFieldNumber = 12;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Nakama.TFriendsAdd FriendsAdd {
      get { return payloadCase_ == PayloadOneofCase.FriendsAdd ? (global::Nakama.TFriendsAdd) payload_ : null; }
      set {
        payload_ = value;
        payloadCase_ = value == null ? PayloadOneofCase.None : PayloadOneofCase.FriendsAdd;
      }
    }

    /// <summary>Field number for the "friends_remove" field.</summary>
    public const int FriendsRemoveFieldNumber = 13;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Nakama.TFriendsRemove FriendsRemove {
      get { return payloadCase_ == PayloadOneofCase.FriendsRemove ? (global::Nakama.TFriendsRemove) payload_ : null; }
      set {
        payload_ = value;
        payloadCase_ = value == null ? PayloadOneofCase.None : PayloadOneofCase.FriendsRemove;
      }
    }

    /// <summary>Field number for the "friends_block" field.</summary>
    public const int FriendsBlockFieldNumber = 14;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Nakama.TFriendsBlock FriendsBlock {
      get { return payloadCase_ == PayloadOneofCase.FriendsBlock ? (global::Nakama.TFriendsBlock) payload_ : null; }
      set {
        payload_ = value;
        payloadCase_ = value == null ? PayloadOneofCase.None : PayloadOneofCase.FriendsBlock;
      }
    }

    /// <summary>Field number for the "friends_list" field.</summary>
    public const int FriendsListFieldNumber = 15;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Nakama.TFriendsList FriendsList {
      get { return payloadCase_ == PayloadOneofCase.FriendsList ? (global::Nakama.TFriendsList) payload_ : null; }
      set {
        payload_ = value;
        payloadCase_ = value == null ? PayloadOneofCase.None : PayloadOneofCase.FriendsList;
      }
    }

    /// <summary>Field number for the "friends" field.</summary>
    public const int FriendsFieldNumber = 16;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Nakama.TFriends Friends {
      get { return payloadCase_ == PayloadOneofCase.Friends ? (global::Nakama.TFriends) payload_ : null; }
      set {
        payload_ = value;
        payloadCase_ = value == null ? PayloadOneofCase.None : PayloadOneofCase.Friends;
      }
    }

    /// <summary>Field number for the "groups_create" field.</summary>
    public const int GroupsCreateFieldNumber = 17;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Nakama.TGroupsCreate GroupsCreate {
      get { return payloadCase_ == PayloadOneofCase.GroupsCreate ? (global::Nakama.TGroupsCreate) payload_ : null; }
      set {
        payload_ = value;
        payloadCase_ = value == null ? PayloadOneofCase.None : PayloadOneofCase.GroupsCreate;
      }
    }

    /// <summary>Field number for the "groups_update" field.</summary>
    public const int GroupsUpdateFieldNumber = 18;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Nakama.TGroupsUpdate GroupsUpdate {
      get { return payloadCase_ == PayloadOneofCase.GroupsUpdate ? (global::Nakama.TGroupsUpdate) payload_ : null; }
      set {
        payload_ = value;
        payloadCase_ = value == null ? PayloadOneofCase.None : PayloadOneofCase.GroupsUpdate;
      }
    }

    /// <summary>Field number for the "groups_remove" field.</summary>
    public const int GroupsRemoveFieldNumber = 19;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Nakama.TGroupsRemove GroupsRemove {
      get { return payloadCase_ == PayloadOneofCase.GroupsRemove ? (global::Nakama.TGroupsRemove) payload_ : null; }
      set {
        payload_ = value;
        payloadCase_ = value == null ? PayloadOneofCase.None : PayloadOneofCase.GroupsRemove;
      }
    }

    /// <summary>Field number for the "groups_fetch" field.</summary>
    public const int GroupsFetchFieldNumber = 20;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Nakama.TGroupsFetch GroupsFetch {
      get { return payloadCase_ == PayloadOneofCase.GroupsFetch ? (global::Nakama.TGroupsFetch) payload_ : null; }
      set {
        payload_ = value;
        payloadCase_ = value == null ? PayloadOneofCase.None : PayloadOneofCase.GroupsFetch;
      }
    }

    /// <summary>Field number for the "groups_list" field.</summary>
    public const int GroupsListFieldNumber = 21;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Nakama.TGroupsList GroupsList {
      get { return payloadCase_ == PayloadOneofCase.GroupsList ? (global::Nakama.TGroupsList) payload_ : null; }
      set {
        payload_ = value;
        payloadCase_ = value == null ? PayloadOneofCase.None : PayloadOneofCase.GroupsList;
      }
    }

    /// <summary>Field number for the "groups_self_list" field.</summary>
    public const int GroupsSelfListFieldNumber = 22;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Nakama.TGroupsSelfList GroupsSelfList {
      get { return payloadCase_ == PayloadOneofCase.GroupsSelfList ? (global::Nakama.TGroupsSelfList) payload_ : null; }
      set {
        payload_ = value;
        payloadCase_ = value == null ? PayloadOneofCase.None : PayloadOneofCase.GroupsSelfList;
      }
    }

    /// <summary>Field number for the "group_users_list" field.</summary>
    public const int GroupUsersListFieldNumber = 23;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Nakama.TGroupUsersList GroupUsersList {
      get { return payloadCase_ == PayloadOneofCase.GroupUsersList ? (global::Nakama.TGroupUsersList) payload_ : null; }
      set {
        payload_ = value;
        payloadCase_ = value == null ? PayloadOneofCase.None : PayloadOneofCase.GroupUsersList;
      }
    }

    /// <summary>Field number for the "groups_join" field.</summary>
    public const int GroupsJoinFieldNumber = 24;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Nakama.TGroupsJoin GroupsJoin {
      get { return payloadCase_ == PayloadOneofCase.GroupsJoin ? (global::Nakama.TGroupsJoin) payload_ : null; }
      set {
        payload_ = value;
        payloadCase_ = value == null ? PayloadOneofCase.None : PayloadOneofCase.GroupsJoin;
      }
    }

    /// <summary>Field number for the "groups_leave" field.</summary>
    public const int GroupsLeaveFieldNumber = 25;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Nakama.TGroupsLeave GroupsLeave {
      get { return payloadCase_ == PayloadOneofCase.GroupsLeave ? (global::Nakama.TGroupsLeave) payload_ : null; }
      set {
        payload_ = value;
        payloadCase_ = value == null ? PayloadOneofCase.None : PayloadOneofCase.GroupsLeave;
      }
    }

    /// <summary>Field number for the "group_users_add" field.</summary>
    public const int GroupUsersAddFieldNumber = 26;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Nakama.TGroupUsersAdd GroupUsersAdd {
      get { return payloadCase_ == PayloadOneofCase.GroupUsersAdd ? (global::Nakama.TGroupUsersAdd) payload_ : null; }
      set {
        payload_ = value;
        payloadCase_ = value == null ? PayloadOneofCase.None : PayloadOneofCase.GroupUsersAdd;
      }
    }

    /// <summary>Field number for the "group_users_kick" field.</summary>
    public const int GroupUsersKickFieldNumber = 27;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Nakama.TGroupUsersKick GroupUsersKick {
      get { return payloadCase_ == PayloadOneofCase.GroupUsersKick ? (global::Nakama.TGroupUsersKick) payload_ : null; }
      set {
        payload_ = value;
        payloadCase_ = value == null ? PayloadOneofCase.None : PayloadOneofCase.GroupUsersKick;
      }
    }

    /// <summary>Field number for the "group_users_promote" field.</summary>
    public const int GroupUsersPromoteFieldNumber = 28;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Nakama.TGroupUsersPromote GroupUsersPromote {
      get { return payloadCase_ == PayloadOneofCase.GroupUsersPromote ? (global::Nakama.TGroupUsersPromote) payload_ : null; }
      set {
        payload_ = value;
        payloadCase_ = value == null ? PayloadOneofCase.None : PayloadOneofCase.GroupUsersPromote;
      }
    }

    /// <summary>Field number for the "groups" field.</summary>
    public const int GroupsFieldNumber = 29;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Nakama.TGroups Groups {
      get { return payloadCase_ == PayloadOneofCase.Groups ? (global::Nakama.TGroups) payload_ : null; }
      set {
        payload_ = value;
        payloadCase_ = value == null ? PayloadOneofCase.None : PayloadOneofCase.Groups;
      }
    }

    /// <summary>Field number for the "groups_self" field.</summary>
    public const int GroupsSelfFieldNumber = 30;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Nakama.TGroupsSelf GroupsSelf {
      get { return payloadCase_ == PayloadOneofCase.GroupsSelf ? (global::Nakama.TGroupsSelf) payload_ : null; }
      set {
        payload_ = value;
        payloadCase_ = value == null ? PayloadOneofCase.None : PayloadOneofCase.GroupsSelf;
      }
    }

    /// <summary>Field number for the "group_users" field.</summary>
    public const int GroupUsersFieldNumber = 31;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Nakama.TGroupUsers GroupUsers {
      get { return payloadCase_ == PayloadOneofCase.GroupUsers ? (global::Nakama.TGroupUsers) payload_ : null; }
      set {
        payload_ = value;
        payloadCase_ = value == null ? PayloadOneofCase.None : PayloadOneofCase.GroupUsers;
      }
    }

    /// <summary>Field number for the "topics_join" field.</summary>
    public const int TopicsJoinFieldNumber = 32;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Nakama.TTopicsJoin TopicsJoin {
      get { return payloadCase_ == PayloadOneofCase.TopicsJoin ? (global::Nakama.TTopicsJoin) payload_ : null; }
      set {
        payload_ = value;
        payloadCase_ = value == null ? PayloadOneofCase.None : PayloadOneofCase.TopicsJoin;
      }
    }

    /// <summary>Field number for the "topics_leave" field.</summary>
    public const int TopicsLeaveFieldNumber = 33;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Nakama.TTopicsLeave TopicsLeave {
      get { return payloadCase_ == PayloadOneofCase.TopicsLeave ? (global::Nakama.TTopicsLeave) payload_ : null; }
      set {
        payload_ = value;
        payloadCase_ = value == null ? PayloadOneofCase.None : PayloadOneofCase.TopicsLeave;
      }
    }

    /// <summary>Field number for the "topic_message_send" field.</summary>
    public const int TopicMessageSendFieldNumber = 34;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Nakama.TTopicMessageSend TopicMessageSend {
      get { return payloadCase_ == PayloadOneofCase.TopicMessageSend ? (global::Nakama.TTopicMessageSend) payload_ : null; }
      set {
        payload_ = value;
        payloadCase_ = value == null ? PayloadOneofCase.None : PayloadOneofCase.TopicMessageSend;
      }
    }

    /// <summary>Field number for the "topic_messages_list" field.</summary>
    public const int TopicMessagesListFieldNumber = 35;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Nakama.TTopicMessagesList TopicMessagesList {
      get { return payloadCase_ == PayloadOneofCase.TopicMessagesList ? (global::Nakama.TTopicMessagesList) payload_ : null; }
      set {
        payload_ = value;
        payloadCase_ = value == null ? PayloadOneofCase.None : PayloadOneofCase.TopicMessagesList;
      }
    }

    /// <summary>Field number for the "topics" field.</summary>
    public const int TopicsFieldNumber = 36;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Nakama.TTopics Topics {
      get { return payloadCase_ == PayloadOneofCase.Topics ? (global::Nakama.TTopics) payload_ : null; }
      set {
        payload_ = value;
        payloadCase_ = value == null ? PayloadOneofCase.None : PayloadOneofCase.Topics;
      }
    }

    /// <summary>Field number for the "topic_message_ack" field.</summary>
    public const int TopicMessageAckFieldNumber = 37;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Nakama.TTopicMessageAck TopicMessageAck {
      get { return payloadCase_ == PayloadOneofCase.TopicMessageAck ? (global::Nakama.TTopicMessageAck) payload_ : null; }
      set {
        payload_ = value;
        payloadCase_ = value == null ? PayloadOneofCase.None : PayloadOneofCase.TopicMessageAck;
      }
    }

    /// <summary>Field number for the "topic_message" field.</summary>
    public const int TopicMessageFieldNumber = 38;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Nakama.TopicMessage TopicMessage {
      get { return payloadCase_ == PayloadOneofCase.TopicMessage ? (global::Nakama.TopicMessage) payload_ : null; }
      set {
        payload_ = value;
        payloadCase_ = value == null ? PayloadOneofCase.None : PayloadOneofCase.TopicMessage;
      }
    }

    /// <summary>Field number for the "topic_messages" field.</summary>
    public const int TopicMessagesFieldNumber = 39;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Nakama.TTopicMessages TopicMessages {
      get { return payloadCase_ == PayloadOneofCase.TopicMessages ? (global::Nakama.TTopicMessages) payload_ : null; }
      set {
        payload_ = value;
        payloadCase_ = value == null ? PayloadOneofCase.None : PayloadOneofCase.TopicMessages;
      }
    }

    /// <summary>Field number for the "topic_presence" field.</summary>
    public const int TopicPresenceFieldNumber = 40;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Nakama.TopicPresence TopicPresence {
      get { return payloadCase_ == PayloadOneofCase.TopicPresence ? (global::Nakama.TopicPresence) payload_ : null; }
      set {
        payload_ = value;
        payloadCase_ = value == null ? PayloadOneofCase.None : PayloadOneofCase.TopicPresence;
      }
    }

    /// <summary>Field number for the "match_create" field.</summary>
    public const int MatchCreateFieldNumber = 41;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Nakama.TMatchCreate MatchCreate {
      get { return payloadCase_ == PayloadOneofCase.MatchCreate ? (global::Nakama.TMatchCreate) payload_ : null; }
      set {
        payload_ = value;
        payloadCase_ = value == null ? PayloadOneofCase.None : PayloadOneofCase.MatchCreate;
      }
    }

    /// <summary>Field number for the "matches_join" field.</summary>
    public const int MatchesJoinFieldNumber = 42;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Nakama.TMatchesJoin MatchesJoin {
      get { return payloadCase_ == PayloadOneofCase.MatchesJoin ? (global::Nakama.TMatchesJoin) payload_ : null; }
      set {
        payload_ = value;
        payloadCase_ = value == null ? PayloadOneofCase.None : PayloadOneofCase.MatchesJoin;
      }
    }

    /// <summary>Field number for the "matches_leave" field.</summary>
    public const int MatchesLeaveFieldNumber = 43;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Nakama.TMatchesLeave MatchesLeave {
      get { return payloadCase_ == PayloadOneofCase.MatchesLeave ? (global::Nakama.TMatchesLeave) payload_ : null; }
      set {
        payload_ = value;
        payloadCase_ = value == null ? PayloadOneofCase.None : PayloadOneofCase.MatchesLeave;
      }
    }

    /// <summary>Field number for the "match_data_send" field.</summary>
    public const int MatchDataSendFieldNumber = 44;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Nakama.MatchDataSend MatchDataSend {
      get { return payloadCase_ == PayloadOneofCase.MatchDataSend ? (global::Nakama.MatchDataSend) payload_ : null; }
      set {
        payload_ = value;
        payloadCase_ = value == null ? PayloadOneofCase.None : PayloadOneofCase.MatchDataSend;
      }
    }

    /// <summary>Field number for the "match" field.</summary>
    public const int MatchFieldNumber = 45;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Nakama.TMatch Match {
      get { return payloadCase_ == PayloadOneofCase.Match ? (global::Nakama.TMatch) payload_ : null; }
      set {
        payload_ = value;
        payloadCase_ = value == null ? PayloadOneofCase.None : PayloadOneofCase.Match;
      }
    }

    /// <summary>Field number for the "matches" field.</summary>
    public const int MatchesFieldNumber = 46;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Nakama.TMatches Matches {
      get { return payloadCase_ == PayloadOneofCase.Matches ? (global::Nakama.TMatches) payload_ : null; }
      set {
        payload_ = value;
        payloadCase_ = value == null ? PayloadOneofCase.None : PayloadOneofCase.Matches;
      }
    }

    /// <summary>Field number for the "match_data" field.</summary>
    public const int MatchDataFieldNumber = 47;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Nakama.MatchData MatchData {
      get { return payloadCase_ == PayloadOneofCase.MatchData ? (global::Nakama.MatchData) payload_ : null; }
      set {
        payload_ = value;
        payloadCase_ = value == null ? PayloadOneofCase.None : PayloadOneofCase.MatchData;
      }
    }

    /// <summary>Field number for the "match_presence" field.</summary>
    public const int MatchPresenceFieldNumber = 48;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Nakama.MatchPresence MatchPresence {
      get { return payloadCase_ == PayloadOneofCase.MatchPresence ? (global::Nakama.MatchPresence) payload_ : null; }
      set {
        payload_ = value;
        payloadCase_ = value == null ? PayloadOneofCase.None : PayloadOneofCase.MatchPresence;
      }
    }

    /// <summary>Field number for the "storage_list" field.</summary>
    public const int StorageListFieldNumber = 49;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Nakama.TStorageList StorageList {
      get { return payloadCase_ == PayloadOneofCase.StorageList ? (global::Nakama.TStorageList) payload_ : null; }
      set {
        payload_ = value;
        payloadCase_ = value == null ? PayloadOneofCase.None : PayloadOneofCase.StorageList;
      }
    }

    /// <summary>Field number for the "storage_fetch" field.</summary>
    public const int StorageFetchFieldNumber = 50;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Nakama.TStorageFetch StorageFetch {
      get { return payloadCase_ == PayloadOneofCase.StorageFetch ? (global::Nakama.TStorageFetch) payload_ : null; }
      set {
        payload_ = value;
        payloadCase_ = value == null ? PayloadOneofCase.None : PayloadOneofCase.StorageFetch;
      }
    }

    /// <summary>Field number for the "storage_write" field.</summary>
    public const int StorageWriteFieldNumber = 51;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Nakama.TStorageWrite StorageWrite {
      get { return payloadCase_ == PayloadOneofCase.StorageWrite ? (global::Nakama.TStorageWrite) payload_ : null; }
      set {
        payload_ = value;
        payloadCase_ = value == null ? PayloadOneofCase.None : PayloadOneofCase.StorageWrite;
      }
    }

    /// <summary>Field number for the "storage_update" field.</summary>
    public const int StorageUpdateFieldNumber = 52;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Nakama.TStorageUpdate StorageUpdate {
      get { return payloadCase_ == PayloadOneofCase.StorageUpdate ? (global::Nakama.TStorageUpdate) payload_ : null; }
      set {
        payload_ = value;
        payloadCase_ = value == null ? PayloadOneofCase.None : PayloadOneofCase.StorageUpdate;
      }
    }

    /// <summary>Field number for the "storage_remove" field.</summary>
    public const int StorageRemoveFieldNumber = 53;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Nakama.TStorageRemove StorageRemove {
      get { return payloadCase_ == PayloadOneofCase.StorageRemove ? (global::Nakama.TStorageRemove) payload_ : null; }
      set {
        payload_ = value;
        payloadCase_ = value == null ? PayloadOneofCase.None : PayloadOneofCase.StorageRemove;
      }
    }

    /// <summary>Field number for the "storage_data" field.</summary>
    public const int StorageDataFieldNumber = 54;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Nakama.TStorageData StorageData {
      get { return payloadCase_ == PayloadOneofCase.StorageData ? (global::Nakama.TStorageData) payload_ : null; }
      set {
        payload_ = value;
        payloadCase_ = value == null ? PayloadOneofCase.None : PayloadOneofCase.StorageData;
      }
    }

    /// <summary>Field number for the "storage_keys" field.</summary>
    public const int StorageKeysFieldNumber = 55;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Nakama.TStorageKeys StorageKeys {
      get { return payloadCase_ == PayloadOneofCase.StorageKeys ? (global::Nakama.TStorageKeys) payload_ : null; }
      set {
        payload_ = value;
        payloadCase_ = value == null ? PayloadOneofCase.None : PayloadOneofCase.StorageKeys;
      }
    }

    /// <summary>Field number for the "leaderboards_list" field.</summary>
    public const int LeaderboardsListFieldNumber = 56;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Nakama.TLeaderboardsList LeaderboardsList {
      get { return payloadCase_ == PayloadOneofCase.LeaderboardsList ? (global::Nakama.TLeaderboardsList) payload_ : null; }
      set {
        payload_ = value;
        payloadCase_ = value == null ? PayloadOneofCase.None : PayloadOneofCase.LeaderboardsList;
      }
    }

    /// <summary>Field number for the "leaderboard_records_write" field.</summary>
    public const int LeaderboardRecordsWriteFieldNumber = 57;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Nakama.TLeaderboardRecordsWrite LeaderboardRecordsWrite {
      get { return payloadCase_ == PayloadOneofCase.LeaderboardRecordsWrite ? (global::Nakama.TLeaderboardRecordsWrite) payload_ : null; }
      set {
        payload_ = value;
        payloadCase_ = value == null ? PayloadOneofCase.None : PayloadOneofCase.LeaderboardRecordsWrite;
      }
    }

    /// <summary>Field number for the "leaderboard_records_fetch" field.</summary>
    public const int LeaderboardRecordsFetchFieldNumber = 58;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Nakama.TLeaderboardRecordsFetch LeaderboardRecordsFetch {
      get { return payloadCase_ == PayloadOneofCase.LeaderboardRecordsFetch ? (global::Nakama.TLeaderboardRecordsFetch) payload_ : null; }
      set {
        payload_ = value;
        payloadCase_ = value == null ? PayloadOneofCase.None : PayloadOneofCase.LeaderboardRecordsFetch;
      }
    }

    /// <summary>Field number for the "leaderboard_records_list" field.</summary>
    public const int LeaderboardRecordsListFieldNumber = 59;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Nakama.TLeaderboardRecordsList LeaderboardRecordsList {
      get { return payloadCase_ == PayloadOneofCase.LeaderboardRecordsList ? (global::Nakama.TLeaderboardRecordsList) payload_ : null; }
      set {
        payload_ = value;
        payloadCase_ = value == null ? PayloadOneofCase.None : PayloadOneofCase.LeaderboardRecordsList;
      }
    }

    /// <summary>Field number for the "leaderboards" field.</summary>
    public const int LeaderboardsFieldNumber = 60;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Nakama.TLeaderboards Leaderboards {
      get { return payloadCase_ == PayloadOneofCase.Leaderboards ? (global::Nakama.TLeaderboards) payload_ : null; }
      set {
        payload_ = value;
        payloadCase_ = value == null ? PayloadOneofCase.None : PayloadOneofCase.Leaderboards;
      }
    }

    /// <summary>Field number for the "leaderboard_records" field.</summary>
    public const int LeaderboardRecordsFieldNumber = 61;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Nakama.TLeaderboardRecords LeaderboardRecords {
      get { return payloadCase_ == PayloadOneofCase.LeaderboardRecords ? (global::Nakama.TLeaderboardRecords) payload_ : null; }
      set {
        payload_ = value;
        payloadCase_ = value == null ? PayloadOneofCase.None : PayloadOneofCase.LeaderboardRecords;
      }
    }

    /// <summary>Field number for the "matchmake_add" field.</summary>
    public const int MatchmakeAddFieldNumber = 62;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Nakama.TMatchmakeAdd MatchmakeAdd {
      get { return payloadCase_ == PayloadOneofCase.MatchmakeAdd ? (global::Nakama.TMatchmakeAdd) payload_ : null; }
      set {
        payload_ = value;
        payloadCase_ = value == null ? PayloadOneofCase.None : PayloadOneofCase.MatchmakeAdd;
      }
    }

    /// <summary>Field number for the "matchmake_remove" field.</summary>
    public const int MatchmakeRemoveFieldNumber = 63;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Nakama.TMatchmakeRemove MatchmakeRemove {
      get { return payloadCase_ == PayloadOneofCase.MatchmakeRemove ? (global::Nakama.TMatchmakeRemove) payload_ : null; }
      set {
        payload_ = value;
        payloadCase_ = value == null ? PayloadOneofCase.None : PayloadOneofCase.MatchmakeRemove;
      }
    }

    /// <summary>Field number for the "matchmake_ticket" field.</summary>
    public const int MatchmakeTicketFieldNumber = 64;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Nakama.TMatchmakeTicket MatchmakeTicket {
      get { return payloadCase_ == PayloadOneofCase.MatchmakeTicket ? (global::Nakama.TMatchmakeTicket) payload_ : null; }
      set {
        payload_ = value;
        payloadCase_ = value == null ? PayloadOneofCase.None : PayloadOneofCase.MatchmakeTicket;
      }
    }

    /// <summary>Field number for the "matchmake_matched" field.</summary>
    public const int MatchmakeMatchedFieldNumber = 65;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Nakama.MatchmakeMatched MatchmakeMatched {
      get { return payloadCase_ == PayloadOneofCase.MatchmakeMatched ? (global::Nakama.MatchmakeMatched) payload_ : null; }
      set {
        payload_ = value;
        payloadCase_ = value == null ? PayloadOneofCase.None : PayloadOneofCase.MatchmakeMatched;
      }
    }

    /// <summary>Field number for the "rpc" field.</summary>
    public const int RpcFieldNumber = 66;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Nakama.TRpc Rpc {
      get { return payloadCase_ == PayloadOneofCase.Rpc ? (global::Nakama.TRpc) payload_ : null; }
      set {
        payload_ = value;
        payloadCase_ = value == null ? PayloadOneofCase.None : PayloadOneofCase.Rpc;
      }
    }

    /// <summary>Field number for the "purchase" field.</summary>
    public const int PurchaseFieldNumber = 67;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Nakama.TPurchaseValidation Purchase {
      get { return payloadCase_ == PayloadOneofCase.Purchase ? (global::Nakama.TPurchaseValidation) payload_ : null; }
      set {
        payload_ = value;
        payloadCase_ = value == null ? PayloadOneofCase.None : PayloadOneofCase.Purchase;
      }
    }

    /// <summary>Field number for the "purchase_record" field.</summary>
    public const int PurchaseRecordFieldNumber = 68;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Nakama.TPurchaseRecord PurchaseRecord {
      get { return payloadCase_ == PayloadOneofCase.PurchaseRecord ? (global::Nakama.TPurchaseRecord) payload_ : null; }
      set {
        payload_ = value;
        payloadCase_ = value == null ? PayloadOneofCase.None : PayloadOneofCase.PurchaseRecord;
      }
    }

    /// <summary>Field number for the "notifications_list" field.</summary>
    public const int NotificationsListFieldNumber = 69;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Nakama.TNotificationsList NotificationsList {
      get { return payloadCase_ == PayloadOneofCase.NotificationsList ? (global::Nakama.TNotificationsList) payload_ : null; }
      set {
        payload_ = value;
        payloadCase_ = value == null ? PayloadOneofCase.None : PayloadOneofCase.NotificationsList;
      }
    }

    /// <summary>Field number for the "notifications_remove" field.</summary>
    public const int NotificationsRemoveFieldNumber = 70;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Nakama.TNotificationsRemove NotificationsRemove {
      get { return payloadCase_ == PayloadOneofCase.NotificationsRemove ? (global::Nakama.TNotificationsRemove) payload_ : null; }
      set {
        payload_ = value;
        payloadCase_ = value == null ? PayloadOneofCase.None : PayloadOneofCase.NotificationsRemove;
      }
    }

    /// <summary>Field number for the "notifications" field.</summary>
    public const int NotificationsFieldNumber = 71;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Nakama.TNotifications Notifications {
      get { return payloadCase_ == PayloadOneofCase.Notifications ? (global::Nakama.TNotifications) payload_ : null; }
      set {
        payload_ = value;
        payloadCase_ = value == null ? PayloadOneofCase.None : PayloadOneofCase.Notifications;
      }
    }

    /// <summary>Field number for the "live_notifications" field.</summary>
    public const int LiveNotificationsFieldNumber = 72;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Nakama.Notifications LiveNotifications {
      get { return payloadCase_ == PayloadOneofCase.LiveNotifications ? (global::Nakama.Notifications) payload_ : null; }
      set {
        payload_ = value;
        payloadCase_ = value == null ? PayloadOneofCase.None : PayloadOneofCase.LiveNotifications;
      }
    }

    private object payload_;
    /// <summary>Enum of possible cases for the "payload" oneof.</summary>
    public enum PayloadOneofCase {
      None = 0,
      Error = 2,
      Heartbeat = 3,
      Logout = 4,
      Link = 5,
      Unlink = 6,
      SelfFetch = 7,
      SelfUpdate = 8,
      UsersFetch = 9,
      Self = 10,
      Users = 11,
      FriendsAdd = 12,
      FriendsRemove = 13,
      FriendsBlock = 14,
      FriendsList = 15,
      Friends = 16,
      GroupsCreate = 17,
      GroupsUpdate = 18,
      GroupsRemove = 19,
      GroupsFetch = 20,
      GroupsList = 21,
      GroupsSelfList = 22,
      GroupUsersList = 23,
      GroupsJoin = 24,
      GroupsLeave = 25,
      GroupUsersAdd = 26,
      GroupUsersKick = 27,
      GroupUsersPromote = 28,
      Groups = 29,
      GroupsSelf = 30,
      GroupUsers = 31,
      TopicsJoin = 32,
      TopicsLeave = 33,
      TopicMessageSend = 34,
      TopicMessagesList = 35,
      Topics = 36,
      TopicMessageAck = 37,
      TopicMessage = 38,
      TopicMessages = 39,
      TopicPresence = 40,
      MatchCreate = 41,
      MatchesJoin = 42,
      MatchesLeave = 43,
      MatchDataSend = 44,
      Match = 45,
      Matches = 46,
      MatchData = 47,
      MatchPresence = 48,
      StorageList = 49,
      StorageFetch = 50,
      StorageWrite = 51,
      StorageUpdate = 52,
      StorageRemove = 53,
      StorageData = 54,
      StorageKeys = 55,
      LeaderboardsList = 56,
      LeaderboardRecordsWrite = 57,
      LeaderboardRecordsFetch = 58,
      LeaderboardRecordsList = 59,
      Leaderboards = 60,
      LeaderboardRecords = 61,
      MatchmakeAdd = 62,
      MatchmakeRemove = 63,
      MatchmakeTicket = 64,
      MatchmakeMatched = 65,
      Rpc = 66,
      Purchase = 67,
      PurchaseRecord = 68,
      NotificationsList = 69,
      NotificationsRemove = 70,
      Notifications = 71,
      LiveNotifications = 72,
    }
    private PayloadOneofCase payloadCase_ = PayloadOneofCase.None;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PayloadOneofCase PayloadCase {
      get { return payloadCase_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearPayload() {
      payloadCase_ = PayloadOneofCase.None;
      payload_ = null;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Envelope);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Envelope other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (CollationId != other.CollationId) return false;
      if (!object.Equals(Error, other.Error)) return false;
      if (!object.Equals(Heartbeat, other.Heartbeat)) return false;
      if (!object.Equals(Logout, other.Logout)) return false;
      if (!object.Equals(Link, other.Link)) return false;
      if (!object.Equals(Unlink, other.Unlink)) return false;
      if (!object.Equals(SelfFetch, other.SelfFetch)) return false;
      if (!object.Equals(SelfUpdate, other.SelfUpdate)) return false;
      if (!object.Equals(UsersFetch, other.UsersFetch)) return false;
      if (!object.Equals(Self, other.Self)) return false;
      if (!object.Equals(Users, other.Users)) return false;
      if (!object.Equals(FriendsAdd, other.FriendsAdd)) return false;
      if (!object.Equals(FriendsRemove, other.FriendsRemove)) return false;
      if (!object.Equals(FriendsBlock, other.FriendsBlock)) return false;
      if (!object.Equals(FriendsList, other.FriendsList)) return false;
      if (!object.Equals(Friends, other.Friends)) return false;
      if (!object.Equals(GroupsCreate, other.GroupsCreate)) return false;
      if (!object.Equals(GroupsUpdate, other.GroupsUpdate)) return false;
      if (!object.Equals(GroupsRemove, other.GroupsRemove)) return false;
      if (!object.Equals(GroupsFetch, other.GroupsFetch)) return false;
      if (!object.Equals(GroupsList, other.GroupsList)) return false;
      if (!object.Equals(GroupsSelfList, other.GroupsSelfList)) return false;
      if (!object.Equals(GroupUsersList, other.GroupUsersList)) return false;
      if (!object.Equals(GroupsJoin, other.GroupsJoin)) return false;
      if (!object.Equals(GroupsLeave, other.GroupsLeave)) return false;
      if (!object.Equals(GroupUsersAdd, other.GroupUsersAdd)) return false;
      if (!object.Equals(GroupUsersKick, other.GroupUsersKick)) return false;
      if (!object.Equals(GroupUsersPromote, other.GroupUsersPromote)) return false;
      if (!object.Equals(Groups, other.Groups)) return false;
      if (!object.Equals(GroupsSelf, other.GroupsSelf)) return false;
      if (!object.Equals(GroupUsers, other.GroupUsers)) return false;
      if (!object.Equals(TopicsJoin, other.TopicsJoin)) return false;
      if (!object.Equals(TopicsLeave, other.TopicsLeave)) return false;
      if (!object.Equals(TopicMessageSend, other.TopicMessageSend)) return false;
      if (!object.Equals(TopicMessagesList, other.TopicMessagesList)) return false;
      if (!object.Equals(Topics, other.Topics)) return false;
      if (!object.Equals(TopicMessageAck, other.TopicMessageAck)) return false;
      if (!object.Equals(TopicMessage, other.TopicMessage)) return false;
      if (!object.Equals(TopicMessages, other.TopicMessages)) return false;
      if (!object.Equals(TopicPresence, other.TopicPresence)) return false;
      if (!object.Equals(MatchCreate, other.MatchCreate)) return false;
      if (!object.Equals(MatchesJoin, other.MatchesJoin)) return false;
      if (!object.Equals(MatchesLeave, other.MatchesLeave)) return false;
      if (!object.Equals(MatchDataSend, other.MatchDataSend)) return false;
      if (!object.Equals(Match, other.Match)) return false;
      if (!object.Equals(Matches, other.Matches)) return false;
      if (!object.Equals(MatchData, other.MatchData)) return false;
      if (!object.Equals(MatchPresence, other.MatchPresence)) return false;
      if (!object.Equals(StorageList, other.StorageList)) return false;
      if (!object.Equals(StorageFetch, other.StorageFetch)) return false;
      if (!object.Equals(StorageWrite, other.StorageWrite)) return false;
      if (!object.Equals(StorageUpdate, other.StorageUpdate)) return false;
      if (!object.Equals(StorageRemove, other.StorageRemove)) return false;
      if (!object.Equals(StorageData, other.StorageData)) return false;
      if (!object.Equals(StorageKeys, other.StorageKeys)) return false;
      if (!object.Equals(LeaderboardsList, other.LeaderboardsList)) return false;
      if (!object.Equals(LeaderboardRecordsWrite, other.LeaderboardRecordsWrite)) return false;
      if (!object.Equals(LeaderboardRecordsFetch, other.LeaderboardRecordsFetch)) return false;
      if (!object.Equals(LeaderboardRecordsList, other.LeaderboardRecordsList)) return false;
      if (!object.Equals(Leaderboards, other.Leaderboards)) return false;
      if (!object.Equals(LeaderboardRecords, other.LeaderboardRecords)) return false;
      if (!object.Equals(MatchmakeAdd, other.MatchmakeAdd)) return false;
      if (!object.Equals(MatchmakeRemove, other.MatchmakeRemove)) return false;
      if (!object.Equals(MatchmakeTicket, other.MatchmakeTicket)) return false;
      if (!object.Equals(MatchmakeMatched, other.MatchmakeMatched)) return false;
      if (!object.Equals(Rpc, other.Rpc)) return false;
      if (!object.Equals(Purchase, other.Purchase)) return false;
      if (!object.Equals(PurchaseRecord, other.PurchaseRecord)) return false;
      if (!object.Equals(NotificationsList, other.NotificationsList)) return false;
      if (!object.Equals(NotificationsRemove, other.NotificationsRemove)) return false;
      if (!object.Equals(Notifications, other.Notifications)) return false;
      if (!object.Equals(LiveNotifications, other.LiveNotifications)) return false;
      if (PayloadCase != other.PayloadCase) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (CollationId.Length != 0) hash ^= CollationId.GetHashCode();
      if (payloadCase_ == PayloadOneofCase.Error) hash ^= Error.GetHashCode();
      if (payloadCase_ == PayloadOneofCase.Heartbeat) hash ^= Heartbeat.GetHashCode();
      if (payloadCase_ == PayloadOneofCase.Logout) hash ^= Logout.GetHashCode();
      if (payloadCase_ == PayloadOneofCase.Link) hash ^= Link.GetHashCode();
      if (payloadCase_ == PayloadOneofCase.Unlink) hash ^= Unlink.GetHashCode();
      if (payloadCase_ == PayloadOneofCase.SelfFetch) hash ^= SelfFetch.GetHashCode();
      if (payloadCase_ == PayloadOneofCase.SelfUpdate) hash ^= SelfUpdate.GetHashCode();
      if (payloadCase_ == PayloadOneofCase.UsersFetch) hash ^= UsersFetch.GetHashCode();
      if (payloadCase_ == PayloadOneofCase.Self) hash ^= Self.GetHashCode();
      if (payloadCase_ == PayloadOneofCase.Users) hash ^= Users.GetHashCode();
      if (payloadCase_ == PayloadOneofCase.FriendsAdd) hash ^= FriendsAdd.GetHashCode();
      if (payloadCase_ == PayloadOneofCase.FriendsRemove) hash ^= FriendsRemove.GetHashCode();
      if (payloadCase_ == PayloadOneofCase.FriendsBlock) hash ^= FriendsBlock.GetHashCode();
      if (payloadCase_ == PayloadOneofCase.FriendsList) hash ^= FriendsList.GetHashCode();
      if (payloadCase_ == PayloadOneofCase.Friends) hash ^= Friends.GetHashCode();
      if (payloadCase_ == PayloadOneofCase.GroupsCreate) hash ^= GroupsCreate.GetHashCode();
      if (payloadCase_ == PayloadOneofCase.GroupsUpdate) hash ^= GroupsUpdate.GetHashCode();
      if (payloadCase_ == PayloadOneofCase.GroupsRemove) hash ^= GroupsRemove.GetHashCode();
      if (payloadCase_ == PayloadOneofCase.GroupsFetch) hash ^= GroupsFetch.GetHashCode();
      if (payloadCase_ == PayloadOneofCase.GroupsList) hash ^= GroupsList.GetHashCode();
      if (payloadCase_ == PayloadOneofCase.GroupsSelfList) hash ^= GroupsSelfList.GetHashCode();
      if (payloadCase_ == PayloadOneofCase.GroupUsersList) hash ^= GroupUsersList.GetHashCode();
      if (payloadCase_ == PayloadOneofCase.GroupsJoin) hash ^= GroupsJoin.GetHashCode();
      if (payloadCase_ == PayloadOneofCase.GroupsLeave) hash ^= GroupsLeave.GetHashCode();
      if (payloadCase_ == PayloadOneofCase.GroupUsersAdd) hash ^= GroupUsersAdd.GetHashCode();
      if (payloadCase_ == PayloadOneofCase.GroupUsersKick) hash ^= GroupUsersKick.GetHashCode();
      if (payloadCase_ == PayloadOneofCase.GroupUsersPromote) hash ^= GroupUsersPromote.GetHashCode();
      if (payloadCase_ == PayloadOneofCase.Groups) hash ^= Groups.GetHashCode();
      if (payloadCase_ == PayloadOneofCase.GroupsSelf) hash ^= GroupsSelf.GetHashCode();
      if (payloadCase_ == PayloadOneofCase.GroupUsers) hash ^= GroupUsers.GetHashCode();
      if (payloadCase_ == PayloadOneofCase.TopicsJoin) hash ^= TopicsJoin.GetHashCode();
      if (payloadCase_ == PayloadOneofCase.TopicsLeave) hash ^= TopicsLeave.GetHashCode();
      if (payloadCase_ == PayloadOneofCase.TopicMessageSend) hash ^= TopicMessageSend.GetHashCode();
      if (payloadCase_ == PayloadOneofCase.TopicMessagesList) hash ^= TopicMessagesList.GetHashCode();
      if (payloadCase_ == PayloadOneofCase.Topics) hash ^= Topics.GetHashCode();
      if (payloadCase_ == PayloadOneofCase.TopicMessageAck) hash ^= TopicMessageAck.GetHashCode();
      if (payloadCase_ == PayloadOneofCase.TopicMessage) hash ^= TopicMessage.GetHashCode();
      if (payloadCase_ == PayloadOneofCase.TopicMessages) hash ^= TopicMessages.GetHashCode();
      if (payloadCase_ == PayloadOneofCase.TopicPresence) hash ^= TopicPresence.GetHashCode();
      if (payloadCase_ == PayloadOneofCase.MatchCreate) hash ^= MatchCreate.GetHashCode();
      if (payloadCase_ == PayloadOneofCase.MatchesJoin) hash ^= MatchesJoin.GetHashCode();
      if (payloadCase_ == PayloadOneofCase.MatchesLeave) hash ^= MatchesLeave.GetHashCode();
      if (payloadCase_ == PayloadOneofCase.MatchDataSend) hash ^= MatchDataSend.GetHashCode();
      if (payloadCase_ == PayloadOneofCase.Match) hash ^= Match.GetHashCode();
      if (payloadCase_ == PayloadOneofCase.Matches) hash ^= Matches.GetHashCode();
      if (payloadCase_ == PayloadOneofCase.MatchData) hash ^= MatchData.GetHashCode();
      if (payloadCase_ == PayloadOneofCase.MatchPresence) hash ^= MatchPresence.GetHashCode();
      if (payloadCase_ == PayloadOneofCase.StorageList) hash ^= StorageList.GetHashCode();
      if (payloadCase_ == PayloadOneofCase.StorageFetch) hash ^= StorageFetch.GetHashCode();
      if (payloadCase_ == PayloadOneofCase.StorageWrite) hash ^= StorageWrite.GetHashCode();
      if (payloadCase_ == PayloadOneofCase.StorageUpdate) hash ^= StorageUpdate.GetHashCode();
      if (payloadCase_ == PayloadOneofCase.StorageRemove) hash ^= StorageRemove.GetHashCode();
      if (payloadCase_ == PayloadOneofCase.StorageData) hash ^= StorageData.GetHashCode();
      if (payloadCase_ == PayloadOneofCase.StorageKeys) hash ^= StorageKeys.GetHashCode();
      if (payloadCase_ == PayloadOneofCase.LeaderboardsList) hash ^= LeaderboardsList.GetHashCode();
      if (payloadCase_ == PayloadOneofCase.LeaderboardRecordsWrite) hash ^= LeaderboardRecordsWrite.GetHashCode();
      if (payloadCase_ == PayloadOneofCase.LeaderboardRecordsFetch) hash ^= LeaderboardRecordsFetch.GetHashCode();
      if (payloadCase_ == PayloadOneofCase.LeaderboardRecordsList) hash ^= LeaderboardRecordsList.GetHashCode();
      if (payloadCase_ == PayloadOneofCase.Leaderboards) hash ^= Leaderboards.GetHashCode();
      if (payloadCase_ == PayloadOneofCase.LeaderboardRecords) hash ^= LeaderboardRecords.GetHashCode();
      if (payloadCase_ == PayloadOneofCase.MatchmakeAdd) hash ^= MatchmakeAdd.GetHashCode();
      if (payloadCase_ == PayloadOneofCase.MatchmakeRemove) hash ^= MatchmakeRemove.GetHashCode();
      if (payloadCase_ == PayloadOneofCase.MatchmakeTicket) hash ^= MatchmakeTicket.GetHashCode();
      if (payloadCase_ == PayloadOneofCase.MatchmakeMatched) hash ^= MatchmakeMatched.GetHashCode();
      if (payloadCase_ == PayloadOneofCase.Rpc) hash ^= Rpc.GetHashCode();
      if (payloadCase_ == PayloadOneofCase.Purchase) hash ^= Purchase.GetHashCode();
      if (payloadCase_ == PayloadOneofCase.PurchaseRecord) hash ^= PurchaseRecord.GetHashCode();
      if (payloadCase_ == PayloadOneofCase.NotificationsList) hash ^= NotificationsList.GetHashCode();
      if (payloadCase_ == PayloadOneofCase.NotificationsRemove) hash ^= NotificationsRemove.GetHashCode();
      if (payloadCase_ == PayloadOneofCase.Notifications) hash ^= Notifications.GetHashCode();
      if (payloadCase_ == PayloadOneofCase.LiveNotifications) hash ^= LiveNotifications.GetHashCode();
      hash ^= (int) payloadCase_;
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (CollationId.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(CollationId);
      }
      if (payloadCase_ == PayloadOneofCase.Error) {
        output.WriteRawTag(18);
        output.WriteMessage(Error);
      }
      if (payloadCase_ == PayloadOneofCase.Heartbeat) {
        output.WriteRawTag(26);
        output.WriteMessage(Heartbeat);
      }
      if (payloadCase_ == PayloadOneofCase.Logout) {
        output.WriteRawTag(34);
        output.WriteMessage(Logout);
      }
      if (payloadCase_ == PayloadOneofCase.Link) {
        output.WriteRawTag(42);
        output.WriteMessage(Link);
      }
      if (payloadCase_ == PayloadOneofCase.Unlink) {
        output.WriteRawTag(50);
        output.WriteMessage(Unlink);
      }
      if (payloadCase_ == PayloadOneofCase.SelfFetch) {
        output.WriteRawTag(58);
        output.WriteMessage(SelfFetch);
      }
      if (payloadCase_ == PayloadOneofCase.SelfUpdate) {
        output.WriteRawTag(66);
        output.WriteMessage(SelfUpdate);
      }
      if (payloadCase_ == PayloadOneofCase.UsersFetch) {
        output.WriteRawTag(74);
        output.WriteMessage(UsersFetch);
      }
      if (payloadCase_ == PayloadOneofCase.Self) {
        output.WriteRawTag(82);
        output.WriteMessage(Self);
      }
      if (payloadCase_ == PayloadOneofCase.Users) {
        output.WriteRawTag(90);
        output.WriteMessage(Users);
      }
      if (payloadCase_ == PayloadOneofCase.FriendsAdd) {
        output.WriteRawTag(98);
        output.WriteMessage(FriendsAdd);
      }
      if (payloadCase_ == PayloadOneofCase.FriendsRemove) {
        output.WriteRawTag(106);
        output.WriteMessage(FriendsRemove);
      }
      if (payloadCase_ == PayloadOneofCase.FriendsBlock) {
        output.WriteRawTag(114);
        output.WriteMessage(FriendsBlock);
      }
      if (payloadCase_ == PayloadOneofCase.FriendsList) {
        output.WriteRawTag(122);
        output.WriteMessage(FriendsList);
      }
      if (payloadCase_ == PayloadOneofCase.Friends) {
        output.WriteRawTag(130, 1);
        output.WriteMessage(Friends);
      }
      if (payloadCase_ == PayloadOneofCase.GroupsCreate) {
        output.WriteRawTag(138, 1);
        output.WriteMessage(GroupsCreate);
      }
      if (payloadCase_ == PayloadOneofCase.GroupsUpdate) {
        output.WriteRawTag(146, 1);
        output.WriteMessage(GroupsUpdate);
      }
      if (payloadCase_ == PayloadOneofCase.GroupsRemove) {
        output.WriteRawTag(154, 1);
        output.WriteMessage(GroupsRemove);
      }
      if (payloadCase_ == PayloadOneofCase.GroupsFetch) {
        output.WriteRawTag(162, 1);
        output.WriteMessage(GroupsFetch);
      }
      if (payloadCase_ == PayloadOneofCase.GroupsList) {
        output.WriteRawTag(170, 1);
        output.WriteMessage(GroupsList);
      }
      if (payloadCase_ == PayloadOneofCase.GroupsSelfList) {
        output.WriteRawTag(178, 1);
        output.WriteMessage(GroupsSelfList);
      }
      if (payloadCase_ == PayloadOneofCase.GroupUsersList) {
        output.WriteRawTag(186, 1);
        output.WriteMessage(GroupUsersList);
      }
      if (payloadCase_ == PayloadOneofCase.GroupsJoin) {
        output.WriteRawTag(194, 1);
        output.WriteMessage(GroupsJoin);
      }
      if (payloadCase_ == PayloadOneofCase.GroupsLeave) {
        output.WriteRawTag(202, 1);
        output.WriteMessage(GroupsLeave);
      }
      if (payloadCase_ == PayloadOneofCase.GroupUsersAdd) {
        output.WriteRawTag(210, 1);
        output.WriteMessage(GroupUsersAdd);
      }
      if (payloadCase_ == PayloadOneofCase.GroupUsersKick) {
        output.WriteRawTag(218, 1);
        output.WriteMessage(GroupUsersKick);
      }
      if (payloadCase_ == PayloadOneofCase.GroupUsersPromote) {
        output.WriteRawTag(226, 1);
        output.WriteMessage(GroupUsersPromote);
      }
      if (payloadCase_ == PayloadOneofCase.Groups) {
        output.WriteRawTag(234, 1);
        output.WriteMessage(Groups);
      }
      if (payloadCase_ == PayloadOneofCase.GroupsSelf) {
        output.WriteRawTag(242, 1);
        output.WriteMessage(GroupsSelf);
      }
      if (payloadCase_ == PayloadOneofCase.GroupUsers) {
        output.WriteRawTag(250, 1);
        output.WriteMessage(GroupUsers);
      }
      if (payloadCase_ == PayloadOneofCase.TopicsJoin) {
        output.WriteRawTag(130, 2);
        output.WriteMessage(TopicsJoin);
      }
      if (payloadCase_ == PayloadOneofCase.TopicsLeave) {
        output.WriteRawTag(138, 2);
        output.WriteMessage(TopicsLeave);
      }
      if (payloadCase_ == PayloadOneofCase.TopicMessageSend) {
        output.WriteRawTag(146, 2);
        output.WriteMessage(TopicMessageSend);
      }
      if (payloadCase_ == PayloadOneofCase.TopicMessagesList) {
        output.WriteRawTag(154, 2);
        output.WriteMessage(TopicMessagesList);
      }
      if (payloadCase_ == PayloadOneofCase.Topics) {
        output.WriteRawTag(162, 2);
        output.WriteMessage(Topics);
      }
      if (payloadCase_ == PayloadOneofCase.TopicMessageAck) {
        output.WriteRawTag(170, 2);
        output.WriteMessage(TopicMessageAck);
      }
      if (payloadCase_ == PayloadOneofCase.TopicMessage) {
        output.WriteRawTag(178, 2);
        output.WriteMessage(TopicMessage);
      }
      if (payloadCase_ == PayloadOneofCase.TopicMessages) {
        output.WriteRawTag(186, 2);
        output.WriteMessage(TopicMessages);
      }
      if (payloadCase_ == PayloadOneofCase.TopicPresence) {
        output.WriteRawTag(194, 2);
        output.WriteMessage(TopicPresence);
      }
      if (payloadCase_ == PayloadOneofCase.MatchCreate) {
        output.WriteRawTag(202, 2);
        output.WriteMessage(MatchCreate);
      }
      if (payloadCase_ == PayloadOneofCase.MatchesJoin) {
        output.WriteRawTag(210, 2);
        output.WriteMessage(MatchesJoin);
      }
      if (payloadCase_ == PayloadOneofCase.MatchesLeave) {
        output.WriteRawTag(218, 2);
        output.WriteMessage(MatchesLeave);
      }
      if (payloadCase_ == PayloadOneofCase.MatchDataSend) {
        output.WriteRawTag(226, 2);
        output.WriteMessage(MatchDataSend);
      }
      if (payloadCase_ == PayloadOneofCase.Match) {
        output.WriteRawTag(234, 2);
        output.WriteMessage(Match);
      }
      if (payloadCase_ == PayloadOneofCase.Matches) {
        output.WriteRawTag(242, 2);
        output.WriteMessage(Matches);
      }
      if (payloadCase_ == PayloadOneofCase.MatchData) {
        output.WriteRawTag(250, 2);
        output.WriteMessage(MatchData);
      }
      if (payloadCase_ == PayloadOneofCase.MatchPresence) {
        output.WriteRawTag(130, 3);
        output.WriteMessage(MatchPresence);
      }
      if (payloadCase_ == PayloadOneofCase.StorageList) {
        output.WriteRawTag(138, 3);
        output.WriteMessage(StorageList);
      }
      if (payloadCase_ == PayloadOneofCase.StorageFetch) {
        output.WriteRawTag(146, 3);
        output.WriteMessage(StorageFetch);
      }
      if (payloadCase_ == PayloadOneofCase.StorageWrite) {
        output.WriteRawTag(154, 3);
        output.WriteMessage(StorageWrite);
      }
      if (payloadCase_ == PayloadOneofCase.StorageUpdate) {
        output.WriteRawTag(162, 3);
        output.WriteMessage(StorageUpdate);
      }
      if (payloadCase_ == PayloadOneofCase.StorageRemove) {
        output.WriteRawTag(170, 3);
        output.WriteMessage(StorageRemove);
      }
      if (payloadCase_ == PayloadOneofCase.StorageData) {
        output.WriteRawTag(178, 3);
        output.WriteMessage(StorageData);
      }
      if (payloadCase_ == PayloadOneofCase.StorageKeys) {
        output.WriteRawTag(186, 3);
        output.WriteMessage(StorageKeys);
      }
      if (payloadCase_ == PayloadOneofCase.LeaderboardsList) {
        output.WriteRawTag(194, 3);
        output.WriteMessage(LeaderboardsList);
      }
      if (payloadCase_ == PayloadOneofCase.LeaderboardRecordsWrite) {
        output.WriteRawTag(202, 3);
        output.WriteMessage(LeaderboardRecordsWrite);
      }
      if (payloadCase_ == PayloadOneofCase.LeaderboardRecordsFetch) {
        output.WriteRawTag(210, 3);
        output.WriteMessage(LeaderboardRecordsFetch);
      }
      if (payloadCase_ == PayloadOneofCase.LeaderboardRecordsList) {
        output.WriteRawTag(218, 3);
        output.WriteMessage(LeaderboardRecordsList);
      }
      if (payloadCase_ == PayloadOneofCase.Leaderboards) {
        output.WriteRawTag(226, 3);
        output.WriteMessage(Leaderboards);
      }
      if (payloadCase_ == PayloadOneofCase.LeaderboardRecords) {
        output.WriteRawTag(234, 3);
        output.WriteMessage(LeaderboardRecords);
      }
      if (payloadCase_ == PayloadOneofCase.MatchmakeAdd) {
        output.WriteRawTag(242, 3);
        output.WriteMessage(MatchmakeAdd);
      }
      if (payloadCase_ == PayloadOneofCase.MatchmakeRemove) {
        output.WriteRawTag(250, 3);
        output.WriteMessage(MatchmakeRemove);
      }
      if (payloadCase_ == PayloadOneofCase.MatchmakeTicket) {
        output.WriteRawTag(130, 4);
        output.WriteMessage(MatchmakeTicket);
      }
      if (payloadCase_ == PayloadOneofCase.MatchmakeMatched) {
        output.WriteRawTag(138, 4);
        output.WriteMessage(MatchmakeMatched);
      }
      if (payloadCase_ == PayloadOneofCase.Rpc) {
        output.WriteRawTag(146, 4);
        output.WriteMessage(Rpc);
      }
      if (payloadCase_ == PayloadOneofCase.Purchase) {
        output.WriteRawTag(154, 4);
        output.WriteMessage(Purchase);
      }
      if (payloadCase_ == PayloadOneofCase.PurchaseRecord) {
        output.WriteRawTag(162, 4);
        output.WriteMessage(PurchaseRecord);
      }
      if (payloadCase_ == PayloadOneofCase.NotificationsList) {
        output.WriteRawTag(170, 4);
        output.WriteMessage(NotificationsList);
      }
      if (payloadCase_ == PayloadOneofCase.NotificationsRemove) {
        output.WriteRawTag(178, 4);
        output.WriteMessage(NotificationsRemove);
      }
      if (payloadCase_ == PayloadOneofCase.Notifications) {
        output.WriteRawTag(186, 4);
        output.WriteMessage(Notifications);
      }
      if (payloadCase_ == PayloadOneofCase.LiveNotifications) {
        output.WriteRawTag(194, 4);
        output.WriteMessage(LiveNotifications);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (CollationId.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(CollationId);
      }
      if (payloadCase_ == PayloadOneofCase.Error) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Error);
      }
      if (payloadCase_ == PayloadOneofCase.Heartbeat) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Heartbeat);
      }
      if (payloadCase_ == PayloadOneofCase.Logout) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Logout);
      }
      if (payloadCase_ == PayloadOneofCase.Link) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Link);
      }
      if (payloadCase_ == PayloadOneofCase.Unlink) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Unlink);
      }
      if (payloadCase_ == PayloadOneofCase.SelfFetch) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(SelfFetch);
      }
      if (payloadCase_ == PayloadOneofCase.SelfUpdate) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(SelfUpdate);
      }
      if (payloadCase_ == PayloadOneofCase.UsersFetch) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(UsersFetch);
      }
      if (payloadCase_ == PayloadOneofCase.Self) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Self);
      }
      if (payloadCase_ == PayloadOneofCase.Users) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Users);
      }
      if (payloadCase_ == PayloadOneofCase.FriendsAdd) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(FriendsAdd);
      }
      if (payloadCase_ == PayloadOneofCase.FriendsRemove) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(FriendsRemove);
      }
      if (payloadCase_ == PayloadOneofCase.FriendsBlock) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(FriendsBlock);
      }
      if (payloadCase_ == PayloadOneofCase.FriendsList) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(FriendsList);
      }
      if (payloadCase_ == PayloadOneofCase.Friends) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(Friends);
      }
      if (payloadCase_ == PayloadOneofCase.GroupsCreate) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(GroupsCreate);
      }
      if (payloadCase_ == PayloadOneofCase.GroupsUpdate) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(GroupsUpdate);
      }
      if (payloadCase_ == PayloadOneofCase.GroupsRemove) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(GroupsRemove);
      }
      if (payloadCase_ == PayloadOneofCase.GroupsFetch) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(GroupsFetch);
      }
      if (payloadCase_ == PayloadOneofCase.GroupsList) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(GroupsList);
      }
      if (payloadCase_ == PayloadOneofCase.GroupsSelfList) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(GroupsSelfList);
      }
      if (payloadCase_ == PayloadOneofCase.GroupUsersList) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(GroupUsersList);
      }
      if (payloadCase_ == PayloadOneofCase.GroupsJoin) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(GroupsJoin);
      }
      if (payloadCase_ == PayloadOneofCase.GroupsLeave) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(GroupsLeave);
      }
      if (payloadCase_ == PayloadOneofCase.GroupUsersAdd) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(GroupUsersAdd);
      }
      if (payloadCase_ == PayloadOneofCase.GroupUsersKick) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(GroupUsersKick);
      }
      if (payloadCase_ == PayloadOneofCase.GroupUsersPromote) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(GroupUsersPromote);
      }
      if (payloadCase_ == PayloadOneofCase.Groups) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(Groups);
      }
      if (payloadCase_ == PayloadOneofCase.GroupsSelf) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(GroupsSelf);
      }
      if (payloadCase_ == PayloadOneofCase.GroupUsers) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(GroupUsers);
      }
      if (payloadCase_ == PayloadOneofCase.TopicsJoin) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(TopicsJoin);
      }
      if (payloadCase_ == PayloadOneofCase.TopicsLeave) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(TopicsLeave);
      }
      if (payloadCase_ == PayloadOneofCase.TopicMessageSend) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(TopicMessageSend);
      }
      if (payloadCase_ == PayloadOneofCase.TopicMessagesList) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(TopicMessagesList);
      }
      if (payloadCase_ == PayloadOneofCase.Topics) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(Topics);
      }
      if (payloadCase_ == PayloadOneofCase.TopicMessageAck) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(TopicMessageAck);
      }
      if (payloadCase_ == PayloadOneofCase.TopicMessage) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(TopicMessage);
      }
      if (payloadCase_ == PayloadOneofCase.TopicMessages) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(TopicMessages);
      }
      if (payloadCase_ == PayloadOneofCase.TopicPresence) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(TopicPresence);
      }
      if (payloadCase_ == PayloadOneofCase.MatchCreate) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(MatchCreate);
      }
      if (payloadCase_ == PayloadOneofCase.MatchesJoin) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(MatchesJoin);
      }
      if (payloadCase_ == PayloadOneofCase.MatchesLeave) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(MatchesLeave);
      }
      if (payloadCase_ == PayloadOneofCase.MatchDataSend) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(MatchDataSend);
      }
      if (payloadCase_ == PayloadOneofCase.Match) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(Match);
      }
      if (payloadCase_ == PayloadOneofCase.Matches) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(Matches);
      }
      if (payloadCase_ == PayloadOneofCase.MatchData) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(MatchData);
      }
      if (payloadCase_ == PayloadOneofCase.MatchPresence) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(MatchPresence);
      }
      if (payloadCase_ == PayloadOneofCase.StorageList) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(StorageList);
      }
      if (payloadCase_ == PayloadOneofCase.StorageFetch) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(StorageFetch);
      }
      if (payloadCase_ == PayloadOneofCase.StorageWrite) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(StorageWrite);
      }
      if (payloadCase_ == PayloadOneofCase.StorageUpdate) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(StorageUpdate);
      }
      if (payloadCase_ == PayloadOneofCase.StorageRemove) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(StorageRemove);
      }
      if (payloadCase_ == PayloadOneofCase.StorageData) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(StorageData);
      }
      if (payloadCase_ == PayloadOneofCase.StorageKeys) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(StorageKeys);
      }
      if (payloadCase_ == PayloadOneofCase.LeaderboardsList) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(LeaderboardsList);
      }
      if (payloadCase_ == PayloadOneofCase.LeaderboardRecordsWrite) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(LeaderboardRecordsWrite);
      }
      if (payloadCase_ == PayloadOneofCase.LeaderboardRecordsFetch) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(LeaderboardRecordsFetch);
      }
      if (payloadCase_ == PayloadOneofCase.LeaderboardRecordsList) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(LeaderboardRecordsList);
      }
      if (payloadCase_ == PayloadOneofCase.Leaderboards) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(Leaderboards);
      }
      if (payloadCase_ == PayloadOneofCase.LeaderboardRecords) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(LeaderboardRecords);
      }
      if (payloadCase_ == PayloadOneofCase.MatchmakeAdd) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(MatchmakeAdd);
      }
      if (payloadCase_ == PayloadOneofCase.MatchmakeRemove) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(MatchmakeRemove);
      }
      if (payloadCase_ == PayloadOneofCase.MatchmakeTicket) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(MatchmakeTicket);
      }
      if (payloadCase_ == PayloadOneofCase.MatchmakeMatched) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(MatchmakeMatched);
      }
      if (payloadCase_ == PayloadOneofCase.Rpc) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(Rpc);
      }
      if (payloadCase_ == PayloadOneofCase.Purchase) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(Purchase);
      }
      if (payloadCase_ == PayloadOneofCase.PurchaseRecord) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(PurchaseRecord);
      }
      if (payloadCase_ == PayloadOneofCase.NotificationsList) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(NotificationsList);
      }
      if (payloadCase_ == PayloadOneofCase.NotificationsRemove) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(NotificationsRemove);
      }
      if (payloadCase_ == PayloadOneofCase.Notifications) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(Notifications);
      }
      if (payloadCase_ == PayloadOneofCase.LiveNotifications) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(LiveNotifications);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Envelope other) {
      if (other == null) {
        return;
      }
      if (other.CollationId.Length != 0) {
        CollationId = other.CollationId;
      }
      switch (other.PayloadCase) {
        case PayloadOneofCase.Error:
          if (Error == null) {
            Error = new global::Nakama.Error();
          }
          Error.MergeFrom(other.Error);
          break;
        case PayloadOneofCase.Heartbeat:
          if (Heartbeat == null) {
            Heartbeat = new global::Nakama.Heartbeat();
          }
          Heartbeat.MergeFrom(other.Heartbeat);
          break;
        case PayloadOneofCase.Logout:
          if (Logout == null) {
            Logout = new global::Nakama.Logout();
          }
          Logout.MergeFrom(other.Logout);
          break;
        case PayloadOneofCase.Link:
          if (Link == null) {
            Link = new global::Nakama.TLink();
          }
          Link.MergeFrom(other.Link);
          break;
        case PayloadOneofCase.Unlink:
          if (Unlink == null) {
            Unlink = new global::Nakama.TUnlink();
          }
          Unlink.MergeFrom(other.Unlink);
          break;
        case PayloadOneofCase.SelfFetch:
          if (SelfFetch == null) {
            SelfFetch = new global::Nakama.TSelfFetch();
          }
          SelfFetch.MergeFrom(other.SelfFetch);
          break;
        case PayloadOneofCase.SelfUpdate:
          if (SelfUpdate == null) {
            SelfUpdate = new global::Nakama.TSelfUpdate();
          }
          SelfUpdate.MergeFrom(other.SelfUpdate);
          break;
        case PayloadOneofCase.UsersFetch:
          if (UsersFetch == null) {
            UsersFetch = new global::Nakama.TUsersFetch();
          }
          UsersFetch.MergeFrom(other.UsersFetch);
          break;
        case PayloadOneofCase.Self:
          if (Self == null) {
            Self = new global::Nakama.TSelf();
          }
          Self.MergeFrom(other.Self);
          break;
        case PayloadOneofCase.Users:
          if (Users == null) {
            Users = new global::Nakama.TUsers();
          }
          Users.MergeFrom(other.Users);
          break;
        case PayloadOneofCase.FriendsAdd:
          if (FriendsAdd == null) {
            FriendsAdd = new global::Nakama.TFriendsAdd();
          }
          FriendsAdd.MergeFrom(other.FriendsAdd);
          break;
        case PayloadOneofCase.FriendsRemove:
          if (FriendsRemove == null) {
            FriendsRemove = new global::Nakama.TFriendsRemove();
          }
          FriendsRemove.MergeFrom(other.FriendsRemove);
          break;
        case PayloadOneofCase.FriendsBlock:
          if (FriendsBlock == null) {
            FriendsBlock = new global::Nakama.TFriendsBlock();
          }
          FriendsBlock.MergeFrom(other.FriendsBlock);
          break;
        case PayloadOneofCase.FriendsList:
          if (FriendsList == null) {
            FriendsList = new global::Nakama.TFriendsList();
          }
          FriendsList.MergeFrom(other.FriendsList);
          break;
        case PayloadOneofCase.Friends:
          if (Friends == null) {
            Friends = new global::Nakama.TFriends();
          }
          Friends.MergeFrom(other.Friends);
          break;
        case PayloadOneofCase.GroupsCreate:
          if (GroupsCreate == null) {
            GroupsCreate = new global::Nakama.TGroupsCreate();
          }
          GroupsCreate.MergeFrom(other.GroupsCreate);
          break;
        case PayloadOneofCase.GroupsUpdate:
          if (GroupsUpdate == null) {
            GroupsUpdate = new global::Nakama.TGroupsUpdate();
          }
          GroupsUpdate.MergeFrom(other.GroupsUpdate);
          break;
        case PayloadOneofCase.GroupsRemove:
          if (GroupsRemove == null) {
            GroupsRemove = new global::Nakama.TGroupsRemove();
          }
          GroupsRemove.MergeFrom(other.GroupsRemove);
          break;
        case PayloadOneofCase.GroupsFetch:
          if (GroupsFetch == null) {
            GroupsFetch = new global::Nakama.TGroupsFetch();
          }
          GroupsFetch.MergeFrom(other.GroupsFetch);
          break;
        case PayloadOneofCase.GroupsList:
          if (GroupsList == null) {
            GroupsList = new global::Nakama.TGroupsList();
          }
          GroupsList.MergeFrom(other.GroupsList);
          break;
        case PayloadOneofCase.GroupsSelfList:
          if (GroupsSelfList == null) {
            GroupsSelfList = new global::Nakama.TGroupsSelfList();
          }
          GroupsSelfList.MergeFrom(other.GroupsSelfList);
          break;
        case PayloadOneofCase.GroupUsersList:
          if (GroupUsersList == null) {
            GroupUsersList = new global::Nakama.TGroupUsersList();
          }
          GroupUsersList.MergeFrom(other.GroupUsersList);
          break;
        case PayloadOneofCase.GroupsJoin:
          if (GroupsJoin == null) {
            GroupsJoin = new global::Nakama.TGroupsJoin();
          }
          GroupsJoin.MergeFrom(other.GroupsJoin);
          break;
        case PayloadOneofCase.GroupsLeave:
          if (GroupsLeave == null) {
            GroupsLeave = new global::Nakama.TGroupsLeave();
          }
          GroupsLeave.MergeFrom(other.GroupsLeave);
          break;
        case PayloadOneofCase.GroupUsersAdd:
          if (GroupUsersAdd == null) {
            GroupUsersAdd = new global::Nakama.TGroupUsersAdd();
          }
          GroupUsersAdd.MergeFrom(other.GroupUsersAdd);
          break;
        case PayloadOneofCase.GroupUsersKick:
          if (GroupUsersKick == null) {
            GroupUsersKick = new global::Nakama.TGroupUsersKick();
          }
          GroupUsersKick.MergeFrom(other.GroupUsersKick);
          break;
        case PayloadOneofCase.GroupUsersPromote:
          if (GroupUsersPromote == null) {
            GroupUsersPromote = new global::Nakama.TGroupUsersPromote();
          }
          GroupUsersPromote.MergeFrom(other.GroupUsersPromote);
          break;
        case PayloadOneofCase.Groups:
          if (Groups == null) {
            Groups = new global::Nakama.TGroups();
          }
          Groups.MergeFrom(other.Groups);
          break;
        case PayloadOneofCase.GroupsSelf:
          if (GroupsSelf == null) {
            GroupsSelf = new global::Nakama.TGroupsSelf();
          }
          GroupsSelf.MergeFrom(other.GroupsSelf);
          break;
        case PayloadOneofCase.GroupUsers:
          if (GroupUsers == null) {
            GroupUsers = new global::Nakama.TGroupUsers();
          }
          GroupUsers.MergeFrom(other.GroupUsers);
          break;
        case PayloadOneofCase.TopicsJoin:
          if (TopicsJoin == null) {
            TopicsJoin = new global::Nakama.TTopicsJoin();
          }
          TopicsJoin.MergeFrom(other.TopicsJoin);
          break;
        case PayloadOneofCase.TopicsLeave:
          if (TopicsLeave == null) {
            TopicsLeave = new global::Nakama.TTopicsLeave();
          }
          TopicsLeave.MergeFrom(other.TopicsLeave);
          break;
        case PayloadOneofCase.TopicMessageSend:
          if (TopicMessageSend == null) {
            TopicMessageSend = new global::Nakama.TTopicMessageSend();
          }
          TopicMessageSend.MergeFrom(other.TopicMessageSend);
          break;
        case PayloadOneofCase.TopicMessagesList:
          if (TopicMessagesList == null) {
            TopicMessagesList = new global::Nakama.TTopicMessagesList();
          }
          TopicMessagesList.MergeFrom(other.TopicMessagesList);
          break;
        case PayloadOneofCase.Topics:
          if (Topics == null) {
            Topics = new global::Nakama.TTopics();
          }
          Topics.MergeFrom(other.Topics);
          break;
        case PayloadOneofCase.TopicMessageAck:
          if (TopicMessageAck == null) {
            TopicMessageAck = new global::Nakama.TTopicMessageAck();
          }
          TopicMessageAck.MergeFrom(other.TopicMessageAck);
          break;
        case PayloadOneofCase.TopicMessage:
          if (TopicMessage == null) {
            TopicMessage = new global::Nakama.TopicMessage();
          }
          TopicMessage.MergeFrom(other.TopicMessage);
          break;
        case PayloadOneofCase.TopicMessages:
          if (TopicMessages == null) {
            TopicMessages = new global::Nakama.TTopicMessages();
          }
          TopicMessages.MergeFrom(other.TopicMessages);
          break;
        case PayloadOneofCase.TopicPresence:
          if (TopicPresence == null) {
            TopicPresence = new global::Nakama.TopicPresence();
          }
          TopicPresence.MergeFrom(other.TopicPresence);
          break;
        case PayloadOneofCase.MatchCreate:
          if (MatchCreate == null) {
            MatchCreate = new global::Nakama.TMatchCreate();
          }
          MatchCreate.MergeFrom(other.MatchCreate);
          break;
        case PayloadOneofCase.MatchesJoin:
          if (MatchesJoin == null) {
            MatchesJoin = new global::Nakama.TMatchesJoin();
          }
          MatchesJoin.MergeFrom(other.MatchesJoin);
          break;
        case PayloadOneofCase.MatchesLeave:
          if (MatchesLeave == null) {
            MatchesLeave = new global::Nakama.TMatchesLeave();
          }
          MatchesLeave.MergeFrom(other.MatchesLeave);
          break;
        case PayloadOneofCase.MatchDataSend:
          if (MatchDataSend == null) {
            MatchDataSend = new global::Nakama.MatchDataSend();
          }
          MatchDataSend.MergeFrom(other.MatchDataSend);
          break;
        case PayloadOneofCase.Match:
          if (Match == null) {
            Match = new global::Nakama.TMatch();
          }
          Match.MergeFrom(other.Match);
          break;
        case PayloadOneofCase.Matches:
          if (Matches == null) {
            Matches = new global::Nakama.TMatches();
          }
          Matches.MergeFrom(other.Matches);
          break;
        case PayloadOneofCase.MatchData:
          if (MatchData == null) {
            MatchData = new global::Nakama.MatchData();
          }
          MatchData.MergeFrom(other.MatchData);
          break;
        case PayloadOneofCase.MatchPresence:
          if (MatchPresence == null) {
            MatchPresence = new global::Nakama.MatchPresence();
          }
          MatchPresence.MergeFrom(other.MatchPresence);
          break;
        case PayloadOneofCase.StorageList:
          if (StorageList == null) {
            StorageList = new global::Nakama.TStorageList();
          }
          StorageList.MergeFrom(other.StorageList);
          break;
        case PayloadOneofCase.StorageFetch:
          if (StorageFetch == null) {
            StorageFetch = new global::Nakama.TStorageFetch();
          }
          StorageFetch.MergeFrom(other.StorageFetch);
          break;
        case PayloadOneofCase.StorageWrite:
          if (StorageWrite == null) {
            StorageWrite = new global::Nakama.TStorageWrite();
          }
          StorageWrite.MergeFrom(other.StorageWrite);
          break;
        case PayloadOneofCase.StorageUpdate:
          if (StorageUpdate == null) {
            StorageUpdate = new global::Nakama.TStorageUpdate();
          }
          StorageUpdate.MergeFrom(other.StorageUpdate);
          break;
        case PayloadOneofCase.StorageRemove:
          if (StorageRemove == null) {
            StorageRemove = new global::Nakama.TStorageRemove();
          }
          StorageRemove.MergeFrom(other.StorageRemove);
          break;
        case PayloadOneofCase.StorageData:
          if (StorageData == null) {
            StorageData = new global::Nakama.TStorageData();
          }
          StorageData.MergeFrom(other.StorageData);
          break;
        case PayloadOneofCase.StorageKeys:
          if (StorageKeys == null) {
            StorageKeys = new global::Nakama.TStorageKeys();
          }
          StorageKeys.MergeFrom(other.StorageKeys);
          break;
        case PayloadOneofCase.LeaderboardsList:
          if (LeaderboardsList == null) {
            LeaderboardsList = new global::Nakama.TLeaderboardsList();
          }
          LeaderboardsList.MergeFrom(other.LeaderboardsList);
          break;
        case PayloadOneofCase.LeaderboardRecordsWrite:
          if (LeaderboardRecordsWrite == null) {
            LeaderboardRecordsWrite = new global::Nakama.TLeaderboardRecordsWrite();
          }
          LeaderboardRecordsWrite.MergeFrom(other.LeaderboardRecordsWrite);
          break;
        case PayloadOneofCase.LeaderboardRecordsFetch:
          if (LeaderboardRecordsFetch == null) {
            LeaderboardRecordsFetch = new global::Nakama.TLeaderboardRecordsFetch();
          }
          LeaderboardRecordsFetch.MergeFrom(other.LeaderboardRecordsFetch);
          break;
        case PayloadOneofCase.LeaderboardRecordsList:
          if (LeaderboardRecordsList == null) {
            LeaderboardRecordsList = new global::Nakama.TLeaderboardRecordsList();
          }
          LeaderboardRecordsList.MergeFrom(other.LeaderboardRecordsList);
          break;
        case PayloadOneofCase.Leaderboards:
          if (Leaderboards == null) {
            Leaderboards = new global::Nakama.TLeaderboards();
          }
          Leaderboards.MergeFrom(other.Leaderboards);
          break;
        case PayloadOneofCase.LeaderboardRecords:
          if (LeaderboardRecords == null) {
            LeaderboardRecords = new global::Nakama.TLeaderboardRecords();
          }
          LeaderboardRecords.MergeFrom(other.LeaderboardRecords);
          break;
        case PayloadOneofCase.MatchmakeAdd:
          if (MatchmakeAdd == null) {
            MatchmakeAdd = new global::Nakama.TMatchmakeAdd();
          }
          MatchmakeAdd.MergeFrom(other.MatchmakeAdd);
          break;
        case PayloadOneofCase.MatchmakeRemove:
          if (MatchmakeRemove == null) {
            MatchmakeRemove = new global::Nakama.TMatchmakeRemove();
          }
          MatchmakeRemove.MergeFrom(other.MatchmakeRemove);
          break;
        case PayloadOneofCase.MatchmakeTicket:
          if (MatchmakeTicket == null) {
            MatchmakeTicket = new global::Nakama.TMatchmakeTicket();
          }
          MatchmakeTicket.MergeFrom(other.MatchmakeTicket);
          break;
        case PayloadOneofCase.MatchmakeMatched:
          if (MatchmakeMatched == null) {
            MatchmakeMatched = new global::Nakama.MatchmakeMatched();
          }
          MatchmakeMatched.MergeFrom(other.MatchmakeMatched);
          break;
        case PayloadOneofCase.Rpc:
          if (Rpc == null) {
            Rpc = new global::Nakama.TRpc();
          }
          Rpc.MergeFrom(other.Rpc);
          break;
        case PayloadOneofCase.Purchase:
          if (Purchase == null) {
            Purchase = new global::Nakama.TPurchaseValidation();
          }
          Purchase.MergeFrom(other.Purchase);
          break;
        case PayloadOneofCase.PurchaseRecord:
          if (PurchaseRecord == null) {
            PurchaseRecord = new global::Nakama.TPurchaseRecord();
          }
          PurchaseRecord.MergeFrom(other.PurchaseRecord);
          break;
        case PayloadOneofCase.NotificationsList:
          if (NotificationsList == null) {
            NotificationsList = new global::Nakama.TNotificationsList();
          }
          NotificationsList.MergeFrom(other.NotificationsList);
          break;
        case PayloadOneofCase.NotificationsRemove:
          if (NotificationsRemove == null) {
            NotificationsRemove = new global::Nakama.TNotificationsRemove();
          }
          NotificationsRemove.MergeFrom(other.NotificationsRemove);
          break;
        case PayloadOneofCase.Notifications:
          if (Notifications == null) {
            Notifications = new global::Nakama.TNotifications();
          }
          Notifications.MergeFrom(other.Notifications);
          break;
        case PayloadOneofCase.LiveNotifications:
          if (LiveNotifications == null) {
            LiveNotifications = new global::Nakama.Notifications();
          }
          LiveNotifications.MergeFrom(other.LiveNotifications);
          break;
      }

    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            CollationId = input.ReadString();
            break;
          }
          case 18: {
            global::Nakama.Error subBuilder = new global::Nakama.Error();
            if (payloadCase_ == PayloadOneofCase.Error) {
              subBuilder.MergeFrom(Error);
            }
            input.ReadMessage(subBuilder);
            Error = subBuilder;
            break;
          }
          case 26: {
            global::Nakama.Heartbeat subBuilder = new global::Nakama.Heartbeat();
            if (payloadCase_ == PayloadOneofCase.Heartbeat) {
              subBuilder.MergeFrom(Heartbeat);
            }
            input.ReadMessage(subBuilder);
            Heartbeat = subBuilder;
            break;
          }
          case 34: {
            global::Nakama.Logout subBuilder = new global::Nakama.Logout();
            if (payloadCase_ == PayloadOneofCase.Logout) {
              subBuilder.MergeFrom(Logout);
            }
            input.ReadMessage(subBuilder);
            Logout = subBuilder;
            break;
          }
          case 42: {
            global::Nakama.TLink subBuilder = new global::Nakama.TLink();
            if (payloadCase_ == PayloadOneofCase.Link) {
              subBuilder.MergeFrom(Link);
            }
            input.ReadMessage(subBuilder);
            Link = subBuilder;
            break;
          }
          case 50: {
            global::Nakama.TUnlink subBuilder = new global::Nakama.TUnlink();
            if (payloadCase_ == PayloadOneofCase.Unlink) {
              subBuilder.MergeFrom(Unlink);
            }
            input.ReadMessage(subBuilder);
            Unlink = subBuilder;
            break;
          }
          case 58: {
            global::Nakama.TSelfFetch subBuilder = new global::Nakama.TSelfFetch();
            if (payloadCase_ == PayloadOneofCase.SelfFetch) {
              subBuilder.MergeFrom(SelfFetch);
            }
            input.ReadMessage(subBuilder);
            SelfFetch = subBuilder;
            break;
          }
          case 66: {
            global::Nakama.TSelfUpdate subBuilder = new global::Nakama.TSelfUpdate();
            if (payloadCase_ == PayloadOneofCase.SelfUpdate) {
              subBuilder.MergeFrom(SelfUpdate);
            }
            input.ReadMessage(subBuilder);
            SelfUpdate = subBuilder;
            break;
          }
          case 74: {
            global::Nakama.TUsersFetch subBuilder = new global::Nakama.TUsersFetch();
            if (payloadCase_ == PayloadOneofCase.UsersFetch) {
              subBuilder.MergeFrom(UsersFetch);
            }
            input.ReadMessage(subBuilder);
            UsersFetch = subBuilder;
            break;
          }
          case 82: {
            global::Nakama.TSelf subBuilder = new global::Nakama.TSelf();
            if (payloadCase_ == PayloadOneofCase.Self) {
              subBuilder.MergeFrom(Self);
            }
            input.ReadMessage(subBuilder);
            Self = subBuilder;
            break;
          }
          case 90: {
            global::Nakama.TUsers subBuilder = new global::Nakama.TUsers();
            if (payloadCase_ == PayloadOneofCase.Users) {
              subBuilder.MergeFrom(Users);
            }
            input.ReadMessage(subBuilder);
            Users = subBuilder;
            break;
          }
          case 98: {
            global::Nakama.TFriendsAdd subBuilder = new global::Nakama.TFriendsAdd();
            if (payloadCase_ == PayloadOneofCase.FriendsAdd) {
              subBuilder.MergeFrom(FriendsAdd);
            }
            input.ReadMessage(subBuilder);
            FriendsAdd = subBuilder;
            break;
          }
          case 106: {
            global::Nakama.TFriendsRemove subBuilder = new global::Nakama.TFriendsRemove();
            if (payloadCase_ == PayloadOneofCase.FriendsRemove) {
              subBuilder.MergeFrom(FriendsRemove);
            }
            input.ReadMessage(subBuilder);
            FriendsRemove = subBuilder;
            break;
          }
          case 114: {
            global::Nakama.TFriendsBlock subBuilder = new global::Nakama.TFriendsBlock();
            if (payloadCase_ == PayloadOneofCase.FriendsBlock) {
              subBuilder.MergeFrom(FriendsBlock);
            }
            input.ReadMessage(subBuilder);
            FriendsBlock = subBuilder;
            break;
          }
          case 122: {
            global::Nakama.TFriendsList subBuilder = new global::Nakama.TFriendsList();
            if (payloadCase_ == PayloadOneofCase.FriendsList) {
              subBuilder.MergeFrom(FriendsList);
            }
            input.ReadMessage(subBuilder);
            FriendsList = subBuilder;
            break;
          }
          case 130: {
            global::Nakama.TFriends subBuilder = new global::Nakama.TFriends();
            if (payloadCase_ == PayloadOneofCase.Friends) {
              subBuilder.MergeFrom(Friends);
            }
            input.ReadMessage(subBuilder);
            Friends = subBuilder;
            break;
          }
          case 138: {
            global::Nakama.TGroupsCreate subBuilder = new global::Nakama.TGroupsCreate();
            if (payloadCase_ == PayloadOneofCase.GroupsCreate) {
              subBuilder.MergeFrom(GroupsCreate);
            }
            input.ReadMessage(subBuilder);
            GroupsCreate = subBuilder;
            break;
          }
          case 146: {
            global::Nakama.TGroupsUpdate subBuilder = new global::Nakama.TGroupsUpdate();
            if (payloadCase_ == PayloadOneofCase.GroupsUpdate) {
              subBuilder.MergeFrom(GroupsUpdate);
            }
            input.ReadMessage(subBuilder);
            GroupsUpdate = subBuilder;
            break;
          }
          case 154: {
            global::Nakama.TGroupsRemove subBuilder = new global::Nakama.TGroupsRemove();
            if (payloadCase_ == PayloadOneofCase.GroupsRemove) {
              subBuilder.MergeFrom(GroupsRemove);
            }
            input.ReadMessage(subBuilder);
            GroupsRemove = subBuilder;
            break;
          }
          case 162: {
            global::Nakama.TGroupsFetch subBuilder = new global::Nakama.TGroupsFetch();
            if (payloadCase_ == PayloadOneofCase.GroupsFetch) {
              subBuilder.MergeFrom(GroupsFetch);
            }
            input.ReadMessage(subBuilder);
            GroupsFetch = subBuilder;
            break;
          }
          case 170: {
            global::Nakama.TGroupsList subBuilder = new global::Nakama.TGroupsList();
            if (payloadCase_ == PayloadOneofCase.GroupsList) {
              subBuilder.MergeFrom(GroupsList);
            }
            input.ReadMessage(subBuilder);
            GroupsList = subBuilder;
            break;
          }
          case 178: {
            global::Nakama.TGroupsSelfList subBuilder = new global::Nakama.TGroupsSelfList();
            if (payloadCase_ == PayloadOneofCase.GroupsSelfList) {
              subBuilder.MergeFrom(GroupsSelfList);
            }
            input.ReadMessage(subBuilder);
            GroupsSelfList = subBuilder;
            break;
          }
          case 186: {
            global::Nakama.TGroupUsersList subBuilder = new global::Nakama.TGroupUsersList();
            if (payloadCase_ == PayloadOneofCase.GroupUsersList) {
              subBuilder.MergeFrom(GroupUsersList);
            }
            input.ReadMessage(subBuilder);
            GroupUsersList = subBuilder;
            break;
          }
          case 194: {
            global::Nakama.TGroupsJoin subBuilder = new global::Nakama.TGroupsJoin();
            if (payloadCase_ == PayloadOneofCase.GroupsJoin) {
              subBuilder.MergeFrom(GroupsJoin);
            }
            input.ReadMessage(subBuilder);
            GroupsJoin = subBuilder;
            break;
          }
          case 202: {
            global::Nakama.TGroupsLeave subBuilder = new global::Nakama.TGroupsLeave();
            if (payloadCase_ == PayloadOneofCase.GroupsLeave) {
              subBuilder.MergeFrom(GroupsLeave);
            }
            input.ReadMessage(subBuilder);
            GroupsLeave = subBuilder;
            break;
          }
          case 210: {
            global::Nakama.TGroupUsersAdd subBuilder = new global::Nakama.TGroupUsersAdd();
            if (payloadCase_ == PayloadOneofCase.GroupUsersAdd) {
              subBuilder.MergeFrom(GroupUsersAdd);
            }
            input.ReadMessage(subBuilder);
            GroupUsersAdd = subBuilder;
            break;
          }
          case 218: {
            global::Nakama.TGroupUsersKick subBuilder = new global::Nakama.TGroupUsersKick();
            if (payloadCase_ == PayloadOneofCase.GroupUsersKick) {
              subBuilder.MergeFrom(GroupUsersKick);
            }
            input.ReadMessage(subBuilder);
            GroupUsersKick = subBuilder;
            break;
          }
          case 226: {
            global::Nakama.TGroupUsersPromote subBuilder = new global::Nakama.TGroupUsersPromote();
            if (payloadCase_ == PayloadOneofCase.GroupUsersPromote) {
              subBuilder.MergeFrom(GroupUsersPromote);
            }
            input.ReadMessage(subBuilder);
            GroupUsersPromote = subBuilder;
            break;
          }
          case 234: {
            global::Nakama.TGroups subBuilder = new global::Nakama.TGroups();
            if (payloadCase_ == PayloadOneofCase.Groups) {
              subBuilder.MergeFrom(Groups);
            }
            input.ReadMessage(subBuilder);
            Groups = subBuilder;
            break;
          }
          case 242: {
            global::Nakama.TGroupsSelf subBuilder = new global::Nakama.TGroupsSelf();
            if (payloadCase_ == PayloadOneofCase.GroupsSelf) {
              subBuilder.MergeFrom(GroupsSelf);
            }
            input.ReadMessage(subBuilder);
            GroupsSelf = subBuilder;
            break;
          }
          case 250: {
            global::Nakama.TGroupUsers subBuilder = new global::Nakama.TGroupUsers();
            if (payloadCase_ == PayloadOneofCase.GroupUsers) {
              subBuilder.MergeFrom(GroupUsers);
            }
            input.ReadMessage(subBuilder);
            GroupUsers = subBuilder;
            break;
          }
          case 258: {
            global::Nakama.TTopicsJoin subBuilder = new global::Nakama.TTopicsJoin();
            if (payloadCase_ == PayloadOneofCase.TopicsJoin) {
              subBuilder.MergeFrom(TopicsJoin);
            }
            input.ReadMessage(subBuilder);
            TopicsJoin = subBuilder;
            break;
          }
          case 266: {
            global::Nakama.TTopicsLeave subBuilder = new global::Nakama.TTopicsLeave();
            if (payloadCase_ == PayloadOneofCase.TopicsLeave) {
              subBuilder.MergeFrom(TopicsLeave);
            }
            input.ReadMessage(subBuilder);
            TopicsLeave = subBuilder;
            break;
          }
          case 274: {
            global::Nakama.TTopicMessageSend subBuilder = new global::Nakama.TTopicMessageSend();
            if (payloadCase_ == PayloadOneofCase.TopicMessageSend) {
              subBuilder.MergeFrom(TopicMessageSend);
            }
            input.ReadMessage(subBuilder);
            TopicMessageSend = subBuilder;
            break;
          }
          case 282: {
            global::Nakama.TTopicMessagesList subBuilder = new global::Nakama.TTopicMessagesList();
            if (payloadCase_ == PayloadOneofCase.TopicMessagesList) {
              subBuilder.MergeFrom(TopicMessagesList);
            }
            input.ReadMessage(subBuilder);
            TopicMessagesList = subBuilder;
            break;
          }
          case 290: {
            global::Nakama.TTopics subBuilder = new global::Nakama.TTopics();
            if (payloadCase_ == PayloadOneofCase.Topics) {
              subBuilder.MergeFrom(Topics);
            }
            input.ReadMessage(subBuilder);
            Topics = subBuilder;
            break;
          }
          case 298: {
            global::Nakama.TTopicMessageAck subBuilder = new global::Nakama.TTopicMessageAck();
            if (payloadCase_ == PayloadOneofCase.TopicMessageAck) {
              subBuilder.MergeFrom(TopicMessageAck);
            }
            input.ReadMessage(subBuilder);
            TopicMessageAck = subBuilder;
            break;
          }
          case 306: {
            global::Nakama.TopicMessage subBuilder = new global::Nakama.TopicMessage();
            if (payloadCase_ == PayloadOneofCase.TopicMessage) {
              subBuilder.MergeFrom(TopicMessage);
            }
            input.ReadMessage(subBuilder);
            TopicMessage = subBuilder;
            break;
          }
          case 314: {
            global::Nakama.TTopicMessages subBuilder = new global::Nakama.TTopicMessages();
            if (payloadCase_ == PayloadOneofCase.TopicMessages) {
              subBuilder.MergeFrom(TopicMessages);
            }
            input.ReadMessage(subBuilder);
            TopicMessages = subBuilder;
            break;
          }
          case 322: {
            global::Nakama.TopicPresence subBuilder = new global::Nakama.TopicPresence();
            if (payloadCase_ == PayloadOneofCase.TopicPresence) {
              subBuilder.MergeFrom(TopicPresence);
            }
            input.ReadMessage(subBuilder);
            TopicPresence = subBuilder;
            break;
          }
          case 330: {
            global::Nakama.TMatchCreate subBuilder = new global::Nakama.TMatchCreate();
            if (payloadCase_ == PayloadOneofCase.MatchCreate) {
              subBuilder.MergeFrom(MatchCreate);
            }
            input.ReadMessage(subBuilder);
            MatchCreate = subBuilder;
            break;
          }
          case 338: {
            global::Nakama.TMatchesJoin subBuilder = new global::Nakama.TMatchesJoin();
            if (payloadCase_ == PayloadOneofCase.MatchesJoin) {
              subBuilder.MergeFrom(MatchesJoin);
            }
            input.ReadMessage(subBuilder);
            MatchesJoin = subBuilder;
            break;
          }
          case 346: {
            global::Nakama.TMatchesLeave subBuilder = new global::Nakama.TMatchesLeave();
            if (payloadCase_ == PayloadOneofCase.MatchesLeave) {
              subBuilder.MergeFrom(MatchesLeave);
            }
            input.ReadMessage(subBuilder);
            MatchesLeave = subBuilder;
            break;
          }
          case 354: {
            global::Nakama.MatchDataSend subBuilder = new global::Nakama.MatchDataSend();
            if (payloadCase_ == PayloadOneofCase.MatchDataSend) {
              subBuilder.MergeFrom(MatchDataSend);
            }
            input.ReadMessage(subBuilder);
            MatchDataSend = subBuilder;
            break;
          }
          case 362: {
            global::Nakama.TMatch subBuilder = new global::Nakama.TMatch();
            if (payloadCase_ == PayloadOneofCase.Match) {
              subBuilder.MergeFrom(Match);
            }
            input.ReadMessage(subBuilder);
            Match = subBuilder;
            break;
          }
          case 370: {
            global::Nakama.TMatches subBuilder = new global::Nakama.TMatches();
            if (payloadCase_ == PayloadOneofCase.Matches) {
              subBuilder.MergeFrom(Matches);
            }
            input.ReadMessage(subBuilder);
            Matches = subBuilder;
            break;
          }
          case 378: {
            global::Nakama.MatchData subBuilder = new global::Nakama.MatchData();
            if (payloadCase_ == PayloadOneofCase.MatchData) {
              subBuilder.MergeFrom(MatchData);
            }
            input.ReadMessage(subBuilder);
            MatchData = subBuilder;
            break;
          }
          case 386: {
            global::Nakama.MatchPresence subBuilder = new global::Nakama.MatchPresence();
            if (payloadCase_ == PayloadOneofCase.MatchPresence) {
              subBuilder.MergeFrom(MatchPresence);
            }
            input.ReadMessage(subBuilder);
            MatchPresence = subBuilder;
            break;
          }
          case 394: {
            global::Nakama.TStorageList subBuilder = new global::Nakama.TStorageList();
            if (payloadCase_ == PayloadOneofCase.StorageList) {
              subBuilder.MergeFrom(StorageList);
            }
            input.ReadMessage(subBuilder);
            StorageList = subBuilder;
            break;
          }
          case 402: {
            global::Nakama.TStorageFetch subBuilder = new global::Nakama.TStorageFetch();
            if (payloadCase_ == PayloadOneofCase.StorageFetch) {
              subBuilder.MergeFrom(StorageFetch);
            }
            input.ReadMessage(subBuilder);
            StorageFetch = subBuilder;
            break;
          }
          case 410: {
            global::Nakama.TStorageWrite subBuilder = new global::Nakama.TStorageWrite();
            if (payloadCase_ == PayloadOneofCase.StorageWrite) {
              subBuilder.MergeFrom(StorageWrite);
            }
            input.ReadMessage(subBuilder);
            StorageWrite = subBuilder;
            break;
          }
          case 418: {
            global::Nakama.TStorageUpdate subBuilder = new global::Nakama.TStorageUpdate();
            if (payloadCase_ == PayloadOneofCase.StorageUpdate) {
              subBuilder.MergeFrom(StorageUpdate);
            }
            input.ReadMessage(subBuilder);
            StorageUpdate = subBuilder;
            break;
          }
          case 426: {
            global::Nakama.TStorageRemove subBuilder = new global::Nakama.TStorageRemove();
            if (payloadCase_ == PayloadOneofCase.StorageRemove) {
              subBuilder.MergeFrom(StorageRemove);
            }
            input.ReadMessage(subBuilder);
            StorageRemove = subBuilder;
            break;
          }
          case 434: {
            global::Nakama.TStorageData subBuilder = new global::Nakama.TStorageData();
            if (payloadCase_ == PayloadOneofCase.StorageData) {
              subBuilder.MergeFrom(StorageData);
            }
            input.ReadMessage(subBuilder);
            StorageData = subBuilder;
            break;
          }
          case 442: {
            global::Nakama.TStorageKeys subBuilder = new global::Nakama.TStorageKeys();
            if (payloadCase_ == PayloadOneofCase.StorageKeys) {
              subBuilder.MergeFrom(StorageKeys);
            }
            input.ReadMessage(subBuilder);
            StorageKeys = subBuilder;
            break;
          }
          case 450: {
            global::Nakama.TLeaderboardsList subBuilder = new global::Nakama.TLeaderboardsList();
            if (payloadCase_ == PayloadOneofCase.LeaderboardsList) {
              subBuilder.MergeFrom(LeaderboardsList);
            }
            input.ReadMessage(subBuilder);
            LeaderboardsList = subBuilder;
            break;
          }
          case 458: {
            global::Nakama.TLeaderboardRecordsWrite subBuilder = new global::Nakama.TLeaderboardRecordsWrite();
            if (payloadCase_ == PayloadOneofCase.LeaderboardRecordsWrite) {
              subBuilder.MergeFrom(LeaderboardRecordsWrite);
            }
            input.ReadMessage(subBuilder);
            LeaderboardRecordsWrite = subBuilder;
            break;
          }
          case 466: {
            global::Nakama.TLeaderboardRecordsFetch subBuilder = new global::Nakama.TLeaderboardRecordsFetch();
            if (payloadCase_ == PayloadOneofCase.LeaderboardRecordsFetch) {
              subBuilder.MergeFrom(LeaderboardRecordsFetch);
            }
            input.ReadMessage(subBuilder);
            LeaderboardRecordsFetch = subBuilder;
            break;
          }
          case 474: {
            global::Nakama.TLeaderboardRecordsList subBuilder = new global::Nakama.TLeaderboardRecordsList();
            if (payloadCase_ == PayloadOneofCase.LeaderboardRecordsList) {
              subBuilder.MergeFrom(LeaderboardRecordsList);
            }
            input.ReadMessage(subBuilder);
            LeaderboardRecordsList = subBuilder;
            break;
          }
          case 482: {
            global::Nakama.TLeaderboards subBuilder = new global::Nakama.TLeaderboards();
            if (payloadCase_ == PayloadOneofCase.Leaderboards) {
              subBuilder.MergeFrom(Leaderboards);
            }
            input.ReadMessage(subBuilder);
            Leaderboards = subBuilder;
            break;
          }
          case 490: {
            global::Nakama.TLeaderboardRecords subBuilder = new global::Nakama.TLeaderboardRecords();
            if (payloadCase_ == PayloadOneofCase.LeaderboardRecords) {
              subBuilder.MergeFrom(LeaderboardRecords);
            }
            input.ReadMessage(subBuilder);
            LeaderboardRecords = subBuilder;
            break;
          }
          case 498: {
            global::Nakama.TMatchmakeAdd subBuilder = new global::Nakama.TMatchmakeAdd();
            if (payloadCase_ == PayloadOneofCase.MatchmakeAdd) {
              subBuilder.MergeFrom(MatchmakeAdd);
            }
            input.ReadMessage(subBuilder);
            MatchmakeAdd = subBuilder;
            break;
          }
          case 506: {
            global::Nakama.TMatchmakeRemove subBuilder = new global::Nakama.TMatchmakeRemove();
            if (payloadCase_ == PayloadOneofCase.MatchmakeRemove) {
              subBuilder.MergeFrom(MatchmakeRemove);
            }
            input.ReadMessage(subBuilder);
            MatchmakeRemove = subBuilder;
            break;
          }
          case 514: {
            global::Nakama.TMatchmakeTicket subBuilder = new global::Nakama.TMatchmakeTicket();
            if (payloadCase_ == PayloadOneofCase.MatchmakeTicket) {
              subBuilder.MergeFrom(MatchmakeTicket);
            }
            input.ReadMessage(subBuilder);
            MatchmakeTicket = subBuilder;
            break;
          }
          case 522: {
            global::Nakama.MatchmakeMatched subBuilder = new global::Nakama.MatchmakeMatched();
            if (payloadCase_ == PayloadOneofCase.MatchmakeMatched) {
              subBuilder.MergeFrom(MatchmakeMatched);
            }
            input.ReadMessage(subBuilder);
            MatchmakeMatched = subBuilder;
            break;
          }
          case 530: {
            global::Nakama.TRpc subBuilder = new global::Nakama.TRpc();
            if (payloadCase_ == PayloadOneofCase.Rpc) {
              subBuilder.MergeFrom(Rpc);
            }
            input.ReadMessage(subBuilder);
            Rpc = subBuilder;
            break;
          }
          case 538: {
            global::Nakama.TPurchaseValidation subBuilder = new global::Nakama.TPurchaseValidation();
            if (payloadCase_ == PayloadOneofCase.Purchase) {
              subBuilder.MergeFrom(Purchase);
            }
            input.ReadMessage(subBuilder);
            Purchase = subBuilder;
            break;
          }
          case 546: {
            global::Nakama.TPurchaseRecord subBuilder = new global::Nakama.TPurchaseRecord();
            if (payloadCase_ == PayloadOneofCase.PurchaseRecord) {
              subBuilder.MergeFrom(PurchaseRecord);
            }
            input.ReadMessage(subBuilder);
            PurchaseRecord = subBuilder;
            break;
          }
          case 554: {
            global::Nakama.TNotificationsList subBuilder = new global::Nakama.TNotificationsList();
            if (payloadCase_ == PayloadOneofCase.NotificationsList) {
              subBuilder.MergeFrom(NotificationsList);
            }
            input.ReadMessage(subBuilder);
            NotificationsList = subBuilder;
            break;
          }
          case 562: {
            global::Nakama.TNotificationsRemove subBuilder = new global::Nakama.TNotificationsRemove();
            if (payloadCase_ == PayloadOneofCase.NotificationsRemove) {
              subBuilder.MergeFrom(NotificationsRemove);
            }
            input.ReadMessage(subBuilder);
            NotificationsRemove = subBuilder;
            break;
          }
          case 570: {
            global::Nakama.TNotifications subBuilder = new global::Nakama.TNotifications();
            if (payloadCase_ == PayloadOneofCase.Notifications) {
              subBuilder.MergeFrom(Notifications);
            }
            input.ReadMessage(subBuilder);
            Notifications = subBuilder;
            break;
          }
          case 578: {
            global::Nakama.Notifications subBuilder = new global::Nakama.Notifications();
            if (payloadCase_ == PayloadOneofCase.LiveNotifications) {
              subBuilder.MergeFrom(LiveNotifications);
            }
            input.ReadMessage(subBuilder);
            LiveNotifications = subBuilder;
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///*
  /// Logout message used to gracefully disconnect the client from the server.
  /// It will also blacklist the authentication session token.
  /// </summary>
  public sealed partial class Logout : pb::IMessage<Logout> {
    private static readonly pb::MessageParser<Logout> _parser = new pb::MessageParser<Logout>(() => new Logout());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Logout> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Nakama.ApiReflection.Descriptor.MessageTypes[5]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Logout() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Logout(Logout other) : this() {
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Logout Clone() {
      return new Logout(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Logout);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Logout other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Logout other) {
      if (other == null) {
        return;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
        }
      }
    }

  }

  /// <summary>
  ///*
  /// TLink message is used to link a profile with a user account
  /// It expects same input as an authentication.
  /// </summary>
  public sealed partial class TLink : pb::IMessage<TLink> {
    private static readonly pb::MessageParser<TLink> _parser = new pb::MessageParser<TLink>(() => new TLink());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<TLink> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Nakama.ApiReflection.Descriptor.MessageTypes[6]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TLink() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TLink(TLink other) : this() {
      switch (other.IdCase) {
        case IdOneofCase.Email:
          Email = other.Email.Clone();
          break;
        case IdOneofCase.Facebook:
          Facebook = other.Facebook;
          break;
        case IdOneofCase.Google:
          Google = other.Google;
          break;
        case IdOneofCase.GameCenter:
          GameCenter = other.GameCenter.Clone();
          break;
        case IdOneofCase.Steam:
          Steam = other.Steam;
          break;
        case IdOneofCase.Device:
          Device = other.Device;
          break;
        case IdOneofCase.Custom:
          Custom = other.Custom;
          break;
      }

    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TLink Clone() {
      return new TLink(this);
    }

    /// <summary>Field number for the "email" field.</summary>
    public const int EmailFieldNumber = 1;
    /// <summary>
    //// Email address and password.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Nakama.AuthenticateRequest.Types.Email Email {
      get { return idCase_ == IdOneofCase.Email ? (global::Nakama.AuthenticateRequest.Types.Email) id_ : null; }
      set {
        id_ = value;
        idCase_ = value == null ? IdOneofCase.None : IdOneofCase.Email;
      }
    }

    /// <summary>Field number for the "facebook" field.</summary>
    public const int FacebookFieldNumber = 2;
    /// <summary>
    //// Facebook OAuth Access Token.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Facebook {
      get { return idCase_ == IdOneofCase.Facebook ? (string) id_ : ""; }
      set {
        id_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
        idCase_ = IdOneofCase.Facebook;
      }
    }

    /// <summary>Field number for the "google" field.</summary>
    public const int GoogleFieldNumber = 3;
    /// <summary>
    //// Google OAuth Access Token.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Google {
      get { return idCase_ == IdOneofCase.Google ? (string) id_ : ""; }
      set {
        id_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
        idCase_ = IdOneofCase.Google;
      }
    }

    /// <summary>Field number for the "game_center" field.</summary>
    public const int GameCenterFieldNumber = 4;
    /// <summary>
    //// GameCenter.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Nakama.AuthenticateRequest.Types.GameCenter GameCenter {
      get { return idCase_ == IdOneofCase.GameCenter ? (global::Nakama.AuthenticateRequest.Types.GameCenter) id_ : null; }
      set {
        id_ = value;
        idCase_ = value == null ? IdOneofCase.None : IdOneofCase.GameCenter;
      }
    }

    /// <summary>Field number for the "steam" field.</summary>
    public const int SteamFieldNumber = 5;
    /// <summary>
    //// Steam Token.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Steam {
      get { return idCase_ == IdOneofCase.Steam ? (string) id_ : ""; }
      set {
        id_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
        idCase_ = IdOneofCase.Steam;
      }
    }

    /// <summary>Field number for the "device" field.</summary>
    public const int DeviceFieldNumber = 6;
    /// <summary>
    //// Device ID.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Device {
      get { return idCase_ == IdOneofCase.Device ? (string) id_ : ""; }
      set {
        id_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
        idCase_ = IdOneofCase.Device;
      }
    }

    /// <summary>Field number for the "custom" field.</summary>
    public const int CustomFieldNumber = 7;
    /// <summary>
    //// Custom ID.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Custom {
      get { return idCase_ == IdOneofCase.Custom ? (string) id_ : ""; }
      set {
        id_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
        idCase_ = IdOneofCase.Custom;
      }
    }

    private object id_;
    /// <summary>Enum of possible cases for the "id" oneof.</summary>
    public enum IdOneofCase {
      None = 0,
      Email = 1,
      Facebook = 2,
      Google = 3,
      GameCenter = 4,
      Steam = 5,
      Device = 6,
      Custom = 7,
    }
    private IdOneofCase idCase_ = IdOneofCase.None;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public IdOneofCase IdCase {
      get { return idCase_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearId() {
      idCase_ = IdOneofCase.None;
      id_ = null;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as TLink);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(TLink other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(Email, other.Email)) return false;
      if (Facebook != other.Facebook) return false;
      if (Google != other.Google) return false;
      if (!object.Equals(GameCenter, other.GameCenter)) return false;
      if (Steam != other.Steam) return false;
      if (Device != other.Device) return false;
      if (Custom != other.Custom) return false;
      if (IdCase != other.IdCase) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (idCase_ == IdOneofCase.Email) hash ^= Email.GetHashCode();
      if (idCase_ == IdOneofCase.Facebook) hash ^= Facebook.GetHashCode();
      if (idCase_ == IdOneofCase.Google) hash ^= Google.GetHashCode();
      if (idCase_ == IdOneofCase.GameCenter) hash ^= GameCenter.GetHashCode();
      if (idCase_ == IdOneofCase.Steam) hash ^= Steam.GetHashCode();
      if (idCase_ == IdOneofCase.Device) hash ^= Device.GetHashCode();
      if (idCase_ == IdOneofCase.Custom) hash ^= Custom.GetHashCode();
      hash ^= (int) idCase_;
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (idCase_ == IdOneofCase.Email) {
        output.WriteRawTag(10);
        output.WriteMessage(Email);
      }
      if (idCase_ == IdOneofCase.Facebook) {
        output.WriteRawTag(18);
        output.WriteString(Facebook);
      }
      if (idCase_ == IdOneofCase.Google) {
        output.WriteRawTag(26);
        output.WriteString(Google);
      }
      if (idCase_ == IdOneofCase.GameCenter) {
        output.WriteRawTag(34);
        output.WriteMessage(GameCenter);
      }
      if (idCase_ == IdOneofCase.Steam) {
        output.WriteRawTag(42);
        output.WriteString(Steam);
      }
      if (idCase_ == IdOneofCase.Device) {
        output.WriteRawTag(50);
        output.WriteString(Device);
      }
      if (idCase_ == IdOneofCase.Custom) {
        output.WriteRawTag(58);
        output.WriteString(Custom);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (idCase_ == IdOneofCase.Email) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Email);
      }
      if (idCase_ == IdOneofCase.Facebook) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Facebook);
      }
      if (idCase_ == IdOneofCase.Google) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Google);
      }
      if (idCase_ == IdOneofCase.GameCenter) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(GameCenter);
      }
      if (idCase_ == IdOneofCase.Steam) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Steam);
      }
      if (idCase_ == IdOneofCase.Device) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Device);
      }
      if (idCase_ == IdOneofCase.Custom) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Custom);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(TLink other) {
      if (other == null) {
        return;
      }
      switch (other.IdCase) {
        case IdOneofCase.Email:
          if (Email == null) {
            Email = new global::Nakama.AuthenticateRequest.Types.Email();
          }
          Email.MergeFrom(other.Email);
          break;
        case IdOneofCase.Facebook:
          Facebook = other.Facebook;
          break;
        case IdOneofCase.Google:
          Google = other.Google;
          break;
        case IdOneofCase.GameCenter:
          if (GameCenter == null) {
            GameCenter = new global::Nakama.AuthenticateRequest.Types.GameCenter();
          }
          GameCenter.MergeFrom(other.GameCenter);
          break;
        case IdOneofCase.Steam:
          Steam = other.Steam;
          break;
        case IdOneofCase.Device:
          Device = other.Device;
          break;
        case IdOneofCase.Custom:
          Custom = other.Custom;
          break;
      }

    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            global::Nakama.AuthenticateRequest.Types.Email subBuilder = new global::Nakama.AuthenticateRequest.Types.Email();
            if (idCase_ == IdOneofCase.Email) {
              subBuilder.MergeFrom(Email);
            }
            input.ReadMessage(subBuilder);
            Email = subBuilder;
            break;
          }
          case 18: {
            Facebook = input.ReadString();
            break;
          }
          case 26: {
            Google = input.ReadString();
            break;
          }
          case 34: {
            global::Nakama.AuthenticateRequest.Types.GameCenter subBuilder = new global::Nakama.AuthenticateRequest.Types.GameCenter();
            if (idCase_ == IdOneofCase.GameCenter) {
              subBuilder.MergeFrom(GameCenter);
            }
            input.ReadMessage(subBuilder);
            GameCenter = subBuilder;
            break;
          }
          case 42: {
            Steam = input.ReadString();
            break;
          }
          case 50: {
            Device = input.ReadString();
            break;
          }
          case 58: {
            Custom = input.ReadString();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///*
  /// TUnlink message is used to unlink a profile with a user account
  /// Unlink allows direct IDs, no tokens needed.
  /// </summary>
  public sealed partial class TUnlink : pb::IMessage<TUnlink> {
    private static readonly pb::MessageParser<TUnlink> _parser = new pb::MessageParser<TUnlink>(() => new TUnlink());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<TUnlink> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Nakama.ApiReflection.Descriptor.MessageTypes[7]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TUnlink() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TUnlink(TUnlink other) : this() {
      switch (other.IdCase) {
        case IdOneofCase.Email:
          Email = other.Email;
          break;
        case IdOneofCase.Facebook:
          Facebook = other.Facebook;
          break;
        case IdOneofCase.Google:
          Google = other.Google;
          break;
        case IdOneofCase.GameCenter:
          GameCenter = other.GameCenter;
          break;
        case IdOneofCase.Steam:
          Steam = other.Steam;
          break;
        case IdOneofCase.Device:
          Device = other.Device;
          break;
        case IdOneofCase.Custom:
          Custom = other.Custom;
          break;
      }

    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TUnlink Clone() {
      return new TUnlink(this);
    }

    /// <summary>Field number for the "email" field.</summary>
    public const int EmailFieldNumber = 1;
    /// <summary>
    //// Email address.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Email {
      get { return idCase_ == IdOneofCase.Email ? (string) id_ : ""; }
      set {
        id_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
        idCase_ = IdOneofCase.Email;
      }
    }

    /// <summary>Field number for the "facebook" field.</summary>
    public const int FacebookFieldNumber = 2;
    /// <summary>
    //// Facebook ID.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Facebook {
      get { return idCase_ == IdOneofCase.Facebook ? (string) id_ : ""; }
      set {
        id_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
        idCase_ = IdOneofCase.Facebook;
      }
    }

    /// <summary>Field number for the "google" field.</summary>
    public const int GoogleFieldNumber = 3;
    /// <summary>
    //// Google ID.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Google {
      get { return idCase_ == IdOneofCase.Google ? (string) id_ : ""; }
      set {
        id_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
        idCase_ = IdOneofCase.Google;
      }
    }

    /// <summary>Field number for the "game_center" field.</summary>
    public const int GameCenterFieldNumber = 4;
    /// <summary>
    //// GameCenter ID.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string GameCenter {
      get { return idCase_ == IdOneofCase.GameCenter ? (string) id_ : ""; }
      set {
        id_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
        idCase_ = IdOneofCase.GameCenter;
      }
    }

    /// <summary>Field number for the "steam" field.</summary>
    public const int SteamFieldNumber = 5;
    /// <summary>
    //// Steam ID.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Steam {
      get { return idCase_ == IdOneofCase.Steam ? (string) id_ : ""; }
      set {
        id_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
        idCase_ = IdOneofCase.Steam;
      }
    }

    /// <summary>Field number for the "device" field.</summary>
    public const int DeviceFieldNumber = 6;
    /// <summary>
    //// Device ID.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Device {
      get { return idCase_ == IdOneofCase.Device ? (string) id_ : ""; }
      set {
        id_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
        idCase_ = IdOneofCase.Device;
      }
    }

    /// <summary>Field number for the "custom" field.</summary>
    public const int CustomFieldNumber = 7;
    /// <summary>
    //// Custom ID.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Custom {
      get { return idCase_ == IdOneofCase.Custom ? (string) id_ : ""; }
      set {
        id_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
        idCase_ = IdOneofCase.Custom;
      }
    }

    private object id_;
    /// <summary>Enum of possible cases for the "id" oneof.</summary>
    public enum IdOneofCase {
      None = 0,
      Email = 1,
      Facebook = 2,
      Google = 3,
      GameCenter = 4,
      Steam = 5,
      Device = 6,
      Custom = 7,
    }
    private IdOneofCase idCase_ = IdOneofCase.None;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public IdOneofCase IdCase {
      get { return idCase_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearId() {
      idCase_ = IdOneofCase.None;
      id_ = null;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as TUnlink);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(TUnlink other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Email != other.Email) return false;
      if (Facebook != other.Facebook) return false;
      if (Google != other.Google) return false;
      if (GameCenter != other.GameCenter) return false;
      if (Steam != other.Steam) return false;
      if (Device != other.Device) return false;
      if (Custom != other.Custom) return false;
      if (IdCase != other.IdCase) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (idCase_ == IdOneofCase.Email) hash ^= Email.GetHashCode();
      if (idCase_ == IdOneofCase.Facebook) hash ^= Facebook.GetHashCode();
      if (idCase_ == IdOneofCase.Google) hash ^= Google.GetHashCode();
      if (idCase_ == IdOneofCase.GameCenter) hash ^= GameCenter.GetHashCode();
      if (idCase_ == IdOneofCase.Steam) hash ^= Steam.GetHashCode();
      if (idCase_ == IdOneofCase.Device) hash ^= Device.GetHashCode();
      if (idCase_ == IdOneofCase.Custom) hash ^= Custom.GetHashCode();
      hash ^= (int) idCase_;
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (idCase_ == IdOneofCase.Email) {
        output.WriteRawTag(10);
        output.WriteString(Email);
      }
      if (idCase_ == IdOneofCase.Facebook) {
        output.WriteRawTag(18);
        output.WriteString(Facebook);
      }
      if (idCase_ == IdOneofCase.Google) {
        output.WriteRawTag(26);
        output.WriteString(Google);
      }
      if (idCase_ == IdOneofCase.GameCenter) {
        output.WriteRawTag(34);
        output.WriteString(GameCenter);
      }
      if (idCase_ == IdOneofCase.Steam) {
        output.WriteRawTag(42);
        output.WriteString(Steam);
      }
      if (idCase_ == IdOneofCase.Device) {
        output.WriteRawTag(50);
        output.WriteString(Device);
      }
      if (idCase_ == IdOneofCase.Custom) {
        output.WriteRawTag(58);
        output.WriteString(Custom);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (idCase_ == IdOneofCase.Email) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Email);
      }
      if (idCase_ == IdOneofCase.Facebook) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Facebook);
      }
      if (idCase_ == IdOneofCase.Google) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Google);
      }
      if (idCase_ == IdOneofCase.GameCenter) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(GameCenter);
      }
      if (idCase_ == IdOneofCase.Steam) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Steam);
      }
      if (idCase_ == IdOneofCase.Device) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Device);
      }
      if (idCase_ == IdOneofCase.Custom) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Custom);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(TUnlink other) {
      if (other == null) {
        return;
      }
      switch (other.IdCase) {
        case IdOneofCase.Email:
          Email = other.Email;
          break;
        case IdOneofCase.Facebook:
          Facebook = other.Facebook;
          break;
        case IdOneofCase.Google:
          Google = other.Google;
          break;
        case IdOneofCase.GameCenter:
          GameCenter = other.GameCenter;
          break;
        case IdOneofCase.Steam:
          Steam = other.Steam;
          break;
        case IdOneofCase.Device:
          Device = other.Device;
          break;
        case IdOneofCase.Custom:
          Custom = other.Custom;
          break;
      }

    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            Email = input.ReadString();
            break;
          }
          case 18: {
            Facebook = input.ReadString();
            break;
          }
          case 26: {
            Google = input.ReadString();
            break;
          }
          case 34: {
            GameCenter = input.ReadString();
            break;
          }
          case 42: {
            Steam = input.ReadString();
            break;
          }
          case 50: {
            Device = input.ReadString();
            break;
          }
          case 58: {
            Custom = input.ReadString();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///*
  /// User is the core domain type representing a user in Nakama.
  /// </summary>
  public sealed partial class User : pb::IMessage<User> {
    private static readonly pb::MessageParser<User> _parser = new pb::MessageParser<User>(() => new User());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<User> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Nakama.ApiReflection.Descriptor.MessageTypes[8]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public User() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public User(User other) : this() {
      id_ = other.id_;
      handle_ = other.handle_;
      fullname_ = other.fullname_;
      avatarUrl_ = other.avatarUrl_;
      lang_ = other.lang_;
      location_ = other.location_;
      timezone_ = other.timezone_;
      metadata_ = other.metadata_;
      createdAt_ = other.createdAt_;
      updatedAt_ = other.updatedAt_;
      lastOnlineAt_ = other.lastOnlineAt_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public User Clone() {
      return new User(this);
    }

    /// <summary>Field number for the "id" field.</summary>
    public const int IdFieldNumber = 1;
    private string id_ = "";
    /// <summary>
    //// User ID.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Id {
      get { return id_; }
      set {
        id_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "handle" field.</summary>
    public const int HandleFieldNumber = 2;
    private string handle_ = "";
    /// <summary>
    //// User Handle (username).
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Handle {
      get { return handle_; }
      set {
        handle_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "fullname" field.</summary>
    public const int FullnameFieldNumber = 3;
    private string fullname_ = "";
    /// <summary>
    //// User's fullname.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Fullname {
      get { return fullname_; }
      set {
        fullname_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "avatar_url" field.</summary>
    public const int AvatarUrlFieldNumber = 4;
    private string avatarUrl_ = "";
    /// <summary>
    //// Link to avatar.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string AvatarUrl {
      get { return avatarUrl_; }
      set {
        avatarUrl_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "lang" field.</summary>
    public const int LangFieldNumber = 5;
    private string lang_ = "";
    /// <summary>
    //// Language tag corresponding to the BCP 47 spec.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Lang {
      get { return lang_; }
      set {
        lang_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "location" field.</summary>
    public const int LocationFieldNumber = 6;
    private string location_ = "";
    /// <summary>
    //// User's location.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Location {
      get { return location_; }
      set {
        location_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "timezone" field.</summary>
    public const int TimezoneFieldNumber = 7;
    private string timezone_ = "";
    /// <summary>
    //// User's timezone.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Timezone {
      get { return timezone_; }
      set {
        timezone_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "metadata" field.</summary>
    public const int MetadataFieldNumber = 8;
    private string metadata_ = "";
    /// <summary>
    //// Custom user metadata.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Metadata {
      get { return metadata_; }
      set {
        metadata_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "created_at" field.</summary>
    public const int CreatedAtFieldNumber = 9;
    private long createdAt_;
    /// <summary>
    //// Unix timestamp when this user registered.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long CreatedAt {
      get { return createdAt_; }
      set {
        createdAt_ = value;
      }
    }

    /// <summary>Field number for the "updated_at" field.</summary>
    public const int UpdatedAtFieldNumber = 10;
    private long updatedAt_;
    /// <summary>
    //// Unix timestamp when user profile was last changed.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long UpdatedAt {
      get { return updatedAt_; }
      set {
        updatedAt_ = value;
      }
    }

    /// <summary>Field number for the "last_online_at" field.</summary>
    public const int LastOnlineAtFieldNumber = 11;
    private long lastOnlineAt_;
    /// <summary>
    //// Unix timestamp when user was last connected.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long LastOnlineAt {
      get { return lastOnlineAt_; }
      set {
        lastOnlineAt_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as User);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(User other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Id != other.Id) return false;
      if (Handle != other.Handle) return false;
      if (Fullname != other.Fullname) return false;
      if (AvatarUrl != other.AvatarUrl) return false;
      if (Lang != other.Lang) return false;
      if (Location != other.Location) return false;
      if (Timezone != other.Timezone) return false;
      if (Metadata != other.Metadata) return false;
      if (CreatedAt != other.CreatedAt) return false;
      if (UpdatedAt != other.UpdatedAt) return false;
      if (LastOnlineAt != other.LastOnlineAt) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Id.Length != 0) hash ^= Id.GetHashCode();
      if (Handle.Length != 0) hash ^= Handle.GetHashCode();
      if (Fullname.Length != 0) hash ^= Fullname.GetHashCode();
      if (AvatarUrl.Length != 0) hash ^= AvatarUrl.GetHashCode();
      if (Lang.Length != 0) hash ^= Lang.GetHashCode();
      if (Location.Length != 0) hash ^= Location.GetHashCode();
      if (Timezone.Length != 0) hash ^= Timezone.GetHashCode();
      if (Metadata.Length != 0) hash ^= Metadata.GetHashCode();
      if (CreatedAt != 0L) hash ^= CreatedAt.GetHashCode();
      if (UpdatedAt != 0L) hash ^= UpdatedAt.GetHashCode();
      if (LastOnlineAt != 0L) hash ^= LastOnlineAt.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Id.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Id);
      }
      if (Handle.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(Handle);
      }
      if (Fullname.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(Fullname);
      }
      if (AvatarUrl.Length != 0) {
        output.WriteRawTag(34);
        output.WriteString(AvatarUrl);
      }
      if (Lang.Length != 0) {
        output.WriteRawTag(42);
        output.WriteString(Lang);
      }
      if (Location.Length != 0) {
        output.WriteRawTag(50);
        output.WriteString(Location);
      }
      if (Timezone.Length != 0) {
        output.WriteRawTag(58);
        output.WriteString(Timezone);
      }
      if (Metadata.Length != 0) {
        output.WriteRawTag(66);
        output.WriteString(Metadata);
      }
      if (CreatedAt != 0L) {
        output.WriteRawTag(72);
        output.WriteInt64(CreatedAt);
      }
      if (UpdatedAt != 0L) {
        output.WriteRawTag(80);
        output.WriteInt64(UpdatedAt);
      }
      if (LastOnlineAt != 0L) {
        output.WriteRawTag(88);
        output.WriteInt64(LastOnlineAt);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Id.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Id);
      }
      if (Handle.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Handle);
      }
      if (Fullname.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Fullname);
      }
      if (AvatarUrl.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(AvatarUrl);
      }
      if (Lang.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Lang);
      }
      if (Location.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Location);
      }
      if (Timezone.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Timezone);
      }
      if (Metadata.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Metadata);
      }
      if (CreatedAt != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(CreatedAt);
      }
      if (UpdatedAt != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(UpdatedAt);
      }
      if (LastOnlineAt != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(LastOnlineAt);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(User other) {
      if (other == null) {
        return;
      }
      if (other.Id.Length != 0) {
        Id = other.Id;
      }
      if (other.Handle.Length != 0) {
        Handle = other.Handle;
      }
      if (other.Fullname.Length != 0) {
        Fullname = other.Fullname;
      }
      if (other.AvatarUrl.Length != 0) {
        AvatarUrl = other.AvatarUrl;
      }
      if (other.Lang.Length != 0) {
        Lang = other.Lang;
      }
      if (other.Location.Length != 0) {
        Location = other.Location;
      }
      if (other.Timezone.Length != 0) {
        Timezone = other.Timezone;
      }
      if (other.Metadata.Length != 0) {
        Metadata = other.Metadata;
      }
      if (other.CreatedAt != 0L) {
        CreatedAt = other.CreatedAt;
      }
      if (other.UpdatedAt != 0L) {
        UpdatedAt = other.UpdatedAt;
      }
      if (other.LastOnlineAt != 0L) {
        LastOnlineAt = other.LastOnlineAt;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            Id = input.ReadString();
            break;
          }
          case 18: {
            Handle = input.ReadString();
            break;
          }
          case 26: {
            Fullname = input.ReadString();
            break;
          }
          case 34: {
            AvatarUrl = input.ReadString();
            break;
          }
          case 42: {
            Lang = input.ReadString();
            break;
          }
          case 50: {
            Location = input.ReadString();
            break;
          }
          case 58: {
            Timezone = input.ReadString();
            break;
          }
          case 66: {
            Metadata = input.ReadString();
            break;
          }
          case 72: {
            CreatedAt = input.ReadInt64();
            break;
          }
          case 80: {
            UpdatedAt = input.ReadInt64();
            break;
          }
          case 88: {
            LastOnlineAt = input.ReadInt64();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///*
  /// Self is the core domain type representing the currently connected user in Nakama.
  /// Alongside the normal user properties, it also contains various other fields only relevant for the current user.
  /// </summary>
  public sealed partial class Self : pb::IMessage<Self> {
    private static readonly pb::MessageParser<Self> _parser = new pb::MessageParser<Self>(() => new Self());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Self> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Nakama.ApiReflection.Descriptor.MessageTypes[9]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Self() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Self(Self other) : this() {
      User = other.user_ != null ? other.User.Clone() : null;
      verified_ = other.verified_;
      email_ = other.email_;
      deviceIds_ = other.deviceIds_.Clone();
      facebookId_ = other.facebookId_;
      googleId_ = other.googleId_;
      gamecenterId_ = other.gamecenterId_;
      steamId_ = other.steamId_;
      customId_ = other.customId_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Self Clone() {
      return new Self(this);
    }

    /// <summary>Field number for the "user" field.</summary>
    public const int UserFieldNumber = 1;
    private global::Nakama.User user_;
    /// <summary>
    //// User's account.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Nakama.User User {
      get { return user_; }
      set {
        user_ = value;
      }
    }

    /// <summary>Field number for the "verified" field.</summary>
    public const int VerifiedFieldNumber = 2;
    private bool verified_;
    /// <summary>
    //// Whether the user was verified, either via email or social accounts.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Verified {
      get { return verified_; }
      set {
        verified_ = value;
      }
    }

    /// <summary>Field number for the "email" field.</summary>
    public const int EmailFieldNumber = 3;
    private string email_ = "";
    /// <summary>
    //// User's email address.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Email {
      get { return email_; }
      set {
        email_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "device_ids" field.</summary>
    public const int DeviceIdsFieldNumber = 4;
    private static readonly pb::FieldCodec<string> _repeated_deviceIds_codec
        = pb::FieldCodec.ForString(34);
    private readonly pbc::RepeatedField<string> deviceIds_ = new pbc::RepeatedField<string>();
    /// <summary>
    //// List of device IDs the user has.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<string> DeviceIds {
      get { return deviceIds_; }
    }

    /// <summary>Field number for the "facebook_id" field.</summary>
    public const int FacebookIdFieldNumber = 5;
    private string facebookId_ = "";
    /// <summary>
    //// User's Facebook ID.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string FacebookId {
      get { return facebookId_; }
      set {
        facebookId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "google_id" field.</summary>
    public const int GoogleIdFieldNumber = 6;
    private string googleId_ = "";
    /// <summary>
    //// User's Google ID.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string GoogleId {
      get { return googleId_; }
      set {
        googleId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "gamecenter_id" field.</summary>
    public const int GamecenterIdFieldNumber = 7;
    private string gamecenterId_ = "";
    /// <summary>
    //// User's Game Center ID.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string GamecenterId {
      get { return gamecenterId_; }
      set {
        gamecenterId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "steam_id" field.</summary>
    public const int SteamIdFieldNumber = 8;
    private string steamId_ = "";
    /// <summary>
    //// User's Steam ID.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string SteamId {
      get { return steamId_; }
      set {
        steamId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "custom_id" field.</summary>
    public const int CustomIdFieldNumber = 9;
    private string customId_ = "";
    /// <summary>
    //// Custom ID associated with the user.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string CustomId {
      get { return customId_; }
      set {
        customId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Self);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Self other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(User, other.User)) return false;
      if (Verified != other.Verified) return false;
      if (Email != other.Email) return false;
      if(!deviceIds_.Equals(other.deviceIds_)) return false;
      if (FacebookId != other.FacebookId) return false;
      if (GoogleId != other.GoogleId) return false;
      if (GamecenterId != other.GamecenterId) return false;
      if (SteamId != other.SteamId) return false;
      if (CustomId != other.CustomId) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (user_ != null) hash ^= User.GetHashCode();
      if (Verified != false) hash ^= Verified.GetHashCode();
      if (Email.Length != 0) hash ^= Email.GetHashCode();
      hash ^= deviceIds_.GetHashCode();
      if (FacebookId.Length != 0) hash ^= FacebookId.GetHashCode();
      if (GoogleId.Length != 0) hash ^= GoogleId.GetHashCode();
      if (GamecenterId.Length != 0) hash ^= GamecenterId.GetHashCode();
      if (SteamId.Length != 0) hash ^= SteamId.GetHashCode();
      if (CustomId.Length != 0) hash ^= CustomId.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (user_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(User);
      }
      if (Verified != false) {
        output.WriteRawTag(16);
        output.WriteBool(Verified);
      }
      if (Email.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(Email);
      }
      deviceIds_.WriteTo(output, _repeated_deviceIds_codec);
      if (FacebookId.Length != 0) {
        output.WriteRawTag(42);
        output.WriteString(FacebookId);
      }
      if (GoogleId.Length != 0) {
        output.WriteRawTag(50);
        output.WriteString(GoogleId);
      }
      if (GamecenterId.Length != 0) {
        output.WriteRawTag(58);
        output.WriteString(GamecenterId);
      }
      if (SteamId.Length != 0) {
        output.WriteRawTag(66);
        output.WriteString(SteamId);
      }
      if (CustomId.Length != 0) {
        output.WriteRawTag(74);
        output.WriteString(CustomId);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (user_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(User);
      }
      if (Verified != false) {
        size += 1 + 1;
      }
      if (Email.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Email);
      }
      size += deviceIds_.CalculateSize(_repeated_deviceIds_codec);
      if (FacebookId.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(FacebookId);
      }
      if (GoogleId.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(GoogleId);
      }
      if (GamecenterId.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(GamecenterId);
      }
      if (SteamId.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(SteamId);
      }
      if (CustomId.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(CustomId);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Self other) {
      if (other == null) {
        return;
      }
      if (other.user_ != null) {
        if (user_ == null) {
          user_ = new global::Nakama.User();
        }
        User.MergeFrom(other.User);
      }
      if (other.Verified != false) {
        Verified = other.Verified;
      }
      if (other.Email.Length != 0) {
        Email = other.Email;
      }
      deviceIds_.Add(other.deviceIds_);
      if (other.FacebookId.Length != 0) {
        FacebookId = other.FacebookId;
      }
      if (other.GoogleId.Length != 0) {
        GoogleId = other.GoogleId;
      }
      if (other.GamecenterId.Length != 0) {
        GamecenterId = other.GamecenterId;
      }
      if (other.SteamId.Length != 0) {
        SteamId = other.SteamId;
      }
      if (other.CustomId.Length != 0) {
        CustomId = other.CustomId;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            if (user_ == null) {
              user_ = new global::Nakama.User();
            }
            input.ReadMessage(user_);
            break;
          }
          case 16: {
            Verified = input.ReadBool();
            break;
          }
          case 26: {
            Email = input.ReadString();
            break;
          }
          case 34: {
            deviceIds_.AddEntriesFrom(input, _repeated_deviceIds_codec);
            break;
          }
          case 42: {
            FacebookId = input.ReadString();
            break;
          }
          case 50: {
            GoogleId = input.ReadString();
            break;
          }
          case 58: {
            GamecenterId = input.ReadString();
            break;
          }
          case 66: {
            SteamId = input.ReadString();
            break;
          }
          case 74: {
            CustomId = input.ReadString();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///*
  /// TSelfFetch message is used to send a request to retrieve the user account associated with the currently connected user.
  ///
  /// @returns TSelf
  /// </summary>
  public sealed partial class TSelfFetch : pb::IMessage<TSelfFetch> {
    private static readonly pb::MessageParser<TSelfFetch> _parser = new pb::MessageParser<TSelfFetch>(() => new TSelfFetch());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<TSelfFetch> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Nakama.ApiReflection.Descriptor.MessageTypes[10]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TSelfFetch() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TSelfFetch(TSelfFetch other) : this() {
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TSelfFetch Clone() {
      return new TSelfFetch(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as TSelfFetch);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(TSelfFetch other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(TSelfFetch other) {
      if (other == null) {
        return;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
        }
      }
    }

  }

  /// <summary>
  ///*
  /// TSelf is the user account and any other associated IDs with the user.
  /// </summary>
  public sealed partial class TSelf : pb::IMessage<TSelf> {
    private static readonly pb::MessageParser<TSelf> _parser = new pb::MessageParser<TSelf>(() => new TSelf());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<TSelf> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Nakama.ApiReflection.Descriptor.MessageTypes[11]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TSelf() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TSelf(TSelf other) : this() {
      Self = other.self_ != null ? other.Self.Clone() : null;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TSelf Clone() {
      return new TSelf(this);
    }

    /// <summary>Field number for the "self" field.</summary>
    public const int SelfFieldNumber = 1;
    private global::Nakama.Self self_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Nakama.Self Self {
      get { return self_; }
      set {
        self_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as TSelf);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(TSelf other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(Self, other.Self)) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (self_ != null) hash ^= Self.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (self_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(Self);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (self_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Self);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(TSelf other) {
      if (other == null) {
        return;
      }
      if (other.self_ != null) {
        if (self_ == null) {
          self_ = new global::Nakama.Self();
        }
        Self.MergeFrom(other.Self);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            if (self_ == null) {
              self_ = new global::Nakama.Self();
            }
            input.ReadMessage(self_);
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///*
  /// TSelfUpdate message is used to update parts of the user account associated with the currently connected user.
  /// </summary>
  public sealed partial class TSelfUpdate : pb::IMessage<TSelfUpdate> {
    private static readonly pb::MessageParser<TSelfUpdate> _parser = new pb::MessageParser<TSelfUpdate>(() => new TSelfUpdate());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<TSelfUpdate> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Nakama.ApiReflection.Descriptor.MessageTypes[12]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TSelfUpdate() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TSelfUpdate(TSelfUpdate other) : this() {
      handle_ = other.handle_;
      fullname_ = other.fullname_;
      timezone_ = other.timezone_;
      location_ = other.location_;
      lang_ = other.lang_;
      metadata_ = other.metadata_;
      avatarUrl_ = other.avatarUrl_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TSelfUpdate Clone() {
      return new TSelfUpdate(this);
    }

    /// <summary>Field number for the "handle" field.</summary>
    public const int HandleFieldNumber = 1;
    private string handle_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Handle {
      get { return handle_; }
      set {
        handle_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "fullname" field.</summary>
    public const int FullnameFieldNumber = 2;
    private string fullname_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Fullname {
      get { return fullname_; }
      set {
        fullname_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "timezone" field.</summary>
    public const int TimezoneFieldNumber = 3;
    private string timezone_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Timezone {
      get { return timezone_; }
      set {
        timezone_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "location" field.</summary>
    public const int LocationFieldNumber = 4;
    private string location_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Location {
      get { return location_; }
      set {
        location_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "lang" field.</summary>
    public const int LangFieldNumber = 5;
    private string lang_ = "";
    /// <summary>
    //// Language tag corresponding to the BCP 47 spec
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Lang {
      get { return lang_; }
      set {
        lang_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "metadata" field.</summary>
    public const int MetadataFieldNumber = 6;
    private string metadata_ = "";
    /// <summary>
    //// Set or remove User's metadata
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Metadata {
      get { return metadata_; }
      set {
        metadata_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "avatar_url" field.</summary>
    public const int AvatarUrlFieldNumber = 7;
    private string avatarUrl_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string AvatarUrl {
      get { return avatarUrl_; }
      set {
        avatarUrl_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as TSelfUpdate);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(TSelfUpdate other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Handle != other.Handle) return false;
      if (Fullname != other.Fullname) return false;
      if (Timezone != other.Timezone) return false;
      if (Location != other.Location) return false;
      if (Lang != other.Lang) return false;
      if (Metadata != other.Metadata) return false;
      if (AvatarUrl != other.AvatarUrl) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Handle.Length != 0) hash ^= Handle.GetHashCode();
      if (Fullname.Length != 0) hash ^= Fullname.GetHashCode();
      if (Timezone.Length != 0) hash ^= Timezone.GetHashCode();
      if (Location.Length != 0) hash ^= Location.GetHashCode();
      if (Lang.Length != 0) hash ^= Lang.GetHashCode();
      if (Metadata.Length != 0) hash ^= Metadata.GetHashCode();
      if (AvatarUrl.Length != 0) hash ^= AvatarUrl.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Handle.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Handle);
      }
      if (Fullname.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(Fullname);
      }
      if (Timezone.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(Timezone);
      }
      if (Location.Length != 0) {
        output.WriteRawTag(34);
        output.WriteString(Location);
      }
      if (Lang.Length != 0) {
        output.WriteRawTag(42);
        output.WriteString(Lang);
      }
      if (Metadata.Length != 0) {
        output.WriteRawTag(50);
        output.WriteString(Metadata);
      }
      if (AvatarUrl.Length != 0) {
        output.WriteRawTag(58);
        output.WriteString(AvatarUrl);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Handle.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Handle);
      }
      if (Fullname.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Fullname);
      }
      if (Timezone.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Timezone);
      }
      if (Location.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Location);
      }
      if (Lang.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Lang);
      }
      if (Metadata.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Metadata);
      }
      if (AvatarUrl.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(AvatarUrl);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(TSelfUpdate other) {
      if (other == null) {
        return;
      }
      if (other.Handle.Length != 0) {
        Handle = other.Handle;
      }
      if (other.Fullname.Length != 0) {
        Fullname = other.Fullname;
      }
      if (other.Timezone.Length != 0) {
        Timezone = other.Timezone;
      }
      if (other.Location.Length != 0) {
        Location = other.Location;
      }
      if (other.Lang.Length != 0) {
        Lang = other.Lang;
      }
      if (other.Metadata.Length != 0) {
        Metadata = other.Metadata;
      }
      if (other.AvatarUrl.Length != 0) {
        AvatarUrl = other.AvatarUrl;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            Handle = input.ReadString();
            break;
          }
          case 18: {
            Fullname = input.ReadString();
            break;
          }
          case 26: {
            Timezone = input.ReadString();
            break;
          }
          case 34: {
            Location = input.ReadString();
            break;
          }
          case 42: {
            Lang = input.ReadString();
            break;
          }
          case 50: {
            Metadata = input.ReadString();
            break;
          }
          case 58: {
            AvatarUrl = input.ReadString();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///*
  /// TUsersFetch fetches a list of users that match the given set of user IDs or user Handles.
  ///
  /// @returns TUsers
  /// </summary>
  public sealed partial class TUsersFetch : pb::IMessage<TUsersFetch> {
    private static readonly pb::MessageParser<TUsersFetch> _parser = new pb::MessageParser<TUsersFetch>(() => new TUsersFetch());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<TUsersFetch> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Nakama.ApiReflection.Descriptor.MessageTypes[13]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TUsersFetch() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TUsersFetch(TUsersFetch other) : this() {
      users_ = other.users_.Clone();
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TUsersFetch Clone() {
      return new TUsersFetch(this);
    }

    /// <summary>Field number for the "users" field.</summary>
    public const int UsersFieldNumber = 1;
    private static readonly pb::FieldCodec<global::Nakama.TUsersFetch.Types.UsersFetch> _repeated_users_codec
        = pb::FieldCodec.ForMessage(10, global::Nakama.TUsersFetch.Types.UsersFetch.Parser);
    private readonly pbc::RepeatedField<global::Nakama.TUsersFetch.Types.UsersFetch> users_ = new pbc::RepeatedField<global::Nakama.TUsersFetch.Types.UsersFetch>();
    /// <summary>
    //// Must at least contain one item.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Nakama.TUsersFetch.Types.UsersFetch> Users {
      get { return users_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as TUsersFetch);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(TUsersFetch other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!users_.Equals(other.users_)) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= users_.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      users_.WriteTo(output, _repeated_users_codec);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += users_.CalculateSize(_repeated_users_codec);
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(TUsersFetch other) {
      if (other == null) {
        return;
      }
      users_.Add(other.users_);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            users_.AddEntriesFrom(input, _repeated_users_codec);
            break;
          }
        }
      }
    }

    #region Nested types
    /// <summary>Container for nested types declared in the TUsersFetch message type.</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static partial class Types {
      public sealed partial class UsersFetch : pb::IMessage<UsersFetch> {
        private static readonly pb::MessageParser<UsersFetch> _parser = new pb::MessageParser<UsersFetch>(() => new UsersFetch());
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<UsersFetch> Parser { get { return _parser; } }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor {
          get { return global::Nakama.TUsersFetch.Descriptor.NestedTypes[0]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor {
          get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public UsersFetch() {
          OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public UsersFetch(UsersFetch other) : this() {
          switch (other.IdCase) {
            case IdOneofCase.UserId:
              UserId = other.UserId;
              break;
            case IdOneofCase.Handle:
              Handle = other.Handle;
              break;
          }

        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public UsersFetch Clone() {
          return new UsersFetch(this);
        }

        /// <summary>Field number for the "user_id" field.</summary>
        public const int UserIdFieldNumber = 1;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public string UserId {
          get { return idCase_ == IdOneofCase.UserId ? (string) id_ : ""; }
          set {
            id_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
            idCase_ = IdOneofCase.UserId;
          }
        }

        /// <summary>Field number for the "handle" field.</summary>
        public const int HandleFieldNumber = 2;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public string Handle {
          get { return idCase_ == IdOneofCase.Handle ? (string) id_ : ""; }
          set {
            id_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
            idCase_ = IdOneofCase.Handle;
          }
        }

        private object id_;
        /// <summary>Enum of possible cases for the "id" oneof.</summary>
        public enum IdOneofCase {
          None = 0,
          UserId = 1,
          Handle = 2,
        }
        private IdOneofCase idCase_ = IdOneofCase.None;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public IdOneofCase IdCase {
          get { return idCase_; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void ClearId() {
          idCase_ = IdOneofCase.None;
          id_ = null;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other) {
          return Equals(other as UsersFetch);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(UsersFetch other) {
          if (ReferenceEquals(other, null)) {
            return false;
          }
          if (ReferenceEquals(other, this)) {
            return true;
          }
          if (UserId != other.UserId) return false;
          if (Handle != other.Handle) return false;
          if (IdCase != other.IdCase) return false;
          return true;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode() {
          int hash = 1;
          if (idCase_ == IdOneofCase.UserId) hash ^= UserId.GetHashCode();
          if (idCase_ == IdOneofCase.Handle) hash ^= Handle.GetHashCode();
          hash ^= (int) idCase_;
          return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString() {
          return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output) {
          if (idCase_ == IdOneofCase.UserId) {
            output.WriteRawTag(10);
            output.WriteString(UserId);
          }
          if (idCase_ == IdOneofCase.Handle) {
            output.WriteRawTag(18);
            output.WriteString(Handle);
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize() {
          int size = 0;
          if (idCase_ == IdOneofCase.UserId) {
            size += 1 + pb::CodedOutputStream.ComputeStringSize(UserId);
          }
          if (idCase_ == IdOneofCase.Handle) {
            size += 1 + pb::CodedOutputStream.ComputeStringSize(Handle);
          }
          return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(UsersFetch other) {
          if (other == null) {
            return;
          }
          switch (other.IdCase) {
            case IdOneofCase.UserId:
              UserId = other.UserId;
              break;
            case IdOneofCase.Handle:
              Handle = other.Handle;
              break;
          }

        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input) {
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                input.SkipLastField();
                break;
              case 10: {
                UserId = input.ReadString();
                break;
              }
              case 18: {
                Handle = input.ReadString();
                break;
              }
            }
          }
        }

      }

    }
    #endregion

  }

  /// <summary>
  ///*
  /// TUsers contains a list of Users. The list could be empty.
  /// </summary>
  public sealed partial class TUsers : pb::IMessage<TUsers> {
    private static readonly pb::MessageParser<TUsers> _parser = new pb::MessageParser<TUsers>(() => new TUsers());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<TUsers> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Nakama.ApiReflection.Descriptor.MessageTypes[14]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TUsers() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TUsers(TUsers other) : this() {
      users_ = other.users_.Clone();
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TUsers Clone() {
      return new TUsers(this);
    }

    /// <summary>Field number for the "users" field.</summary>
    public const int UsersFieldNumber = 1;
    private static readonly pb::FieldCodec<global::Nakama.User> _repeated_users_codec
        = pb::FieldCodec.ForMessage(10, global::Nakama.User.Parser);
    private readonly pbc::RepeatedField<global::Nakama.User> users_ = new pbc::RepeatedField<global::Nakama.User>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Nakama.User> Users {
      get { return users_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as TUsers);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(TUsers other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!users_.Equals(other.users_)) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= users_.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      users_.WriteTo(output, _repeated_users_codec);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += users_.CalculateSize(_repeated_users_codec);
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(TUsers other) {
      if (other == null) {
        return;
      }
      users_.Add(other.users_);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            users_.AddEntriesFrom(input, _repeated_users_codec);
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///*
  /// Friend is the core domain type representing a friend relationship in Nakama.
  /// </summary>
  public sealed partial class Friend : pb::IMessage<Friend> {
    private static readonly pb::MessageParser<Friend> _parser = new pb::MessageParser<Friend>(() => new Friend());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Friend> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Nakama.ApiReflection.Descriptor.MessageTypes[15]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Friend() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Friend(Friend other) : this() {
      User = other.user_ != null ? other.User.Clone() : null;
      state_ = other.state_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Friend Clone() {
      return new Friend(this);
    }

    /// <summary>Field number for the "user" field.</summary>
    public const int UserFieldNumber = 1;
    private global::Nakama.User user_;
    /// <summary>
    //// The user that is the friend of the currently connected user.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Nakama.User User {
      get { return user_; }
      set {
        user_ = value;
      }
    }

    /// <summary>Field number for the "state" field.</summary>
    public const int StateFieldNumber = 2;
    private long state_;
    /// <summary>
    //// The type of relationship this is. The value can be one of the following:
    //// Friend(0): Mutual friendship.
    //// Invite(1): Current user has sent an invitation.
    //// Invited(2): Current user has received an invitation.
    //// Blocked(3): Current user has blocked this friend.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long State {
      get { return state_; }
      set {
        state_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Friend);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Friend other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(User, other.User)) return false;
      if (State != other.State) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (user_ != null) hash ^= User.GetHashCode();
      if (State != 0L) hash ^= State.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (user_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(User);
      }
      if (State != 0L) {
        output.WriteRawTag(16);
        output.WriteInt64(State);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (user_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(User);
      }
      if (State != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(State);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Friend other) {
      if (other == null) {
        return;
      }
      if (other.user_ != null) {
        if (user_ == null) {
          user_ = new global::Nakama.User();
        }
        User.MergeFrom(other.User);
      }
      if (other.State != 0L) {
        State = other.State;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            if (user_ == null) {
              user_ = new global::Nakama.User();
            }
            input.ReadMessage(user_);
            break;
          }
          case 16: {
            State = input.ReadInt64();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///*
  /// TFriendsAdd sends a list of user IDs or handles to the server that the current user would like to form a friendship with.
  /// If a reverse relationship already exists, then a mutual friendship is formed, otherwise a friendship request is recorded for the user.
  /// </summary>
  public sealed partial class TFriendsAdd : pb::IMessage<TFriendsAdd> {
    private static readonly pb::MessageParser<TFriendsAdd> _parser = new pb::MessageParser<TFriendsAdd>(() => new TFriendsAdd());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<TFriendsAdd> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Nakama.ApiReflection.Descriptor.MessageTypes[16]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TFriendsAdd() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TFriendsAdd(TFriendsAdd other) : this() {
      friends_ = other.friends_.Clone();
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TFriendsAdd Clone() {
      return new TFriendsAdd(this);
    }

    /// <summary>Field number for the "friends" field.</summary>
    public const int FriendsFieldNumber = 1;
    private static readonly pb::FieldCodec<global::Nakama.TFriendsAdd.Types.FriendsAdd> _repeated_friends_codec
        = pb::FieldCodec.ForMessage(10, global::Nakama.TFriendsAdd.Types.FriendsAdd.Parser);
    private readonly pbc::RepeatedField<global::Nakama.TFriendsAdd.Types.FriendsAdd> friends_ = new pbc::RepeatedField<global::Nakama.TFriendsAdd.Types.FriendsAdd>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Nakama.TFriendsAdd.Types.FriendsAdd> Friends {
      get { return friends_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as TFriendsAdd);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(TFriendsAdd other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!friends_.Equals(other.friends_)) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= friends_.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      friends_.WriteTo(output, _repeated_friends_codec);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += friends_.CalculateSize(_repeated_friends_codec);
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(TFriendsAdd other) {
      if (other == null) {
        return;
      }
      friends_.Add(other.friends_);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            friends_.AddEntriesFrom(input, _repeated_friends_codec);
            break;
          }
        }
      }
    }

    #region Nested types
    /// <summary>Container for nested types declared in the TFriendsAdd message type.</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static partial class Types {
      public sealed partial class FriendsAdd : pb::IMessage<FriendsAdd> {
        private static readonly pb::MessageParser<FriendsAdd> _parser = new pb::MessageParser<FriendsAdd>(() => new FriendsAdd());
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<FriendsAdd> Parser { get { return _parser; } }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor {
          get { return global::Nakama.TFriendsAdd.Descriptor.NestedTypes[0]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor {
          get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public FriendsAdd() {
          OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public FriendsAdd(FriendsAdd other) : this() {
          switch (other.IdCase) {
            case IdOneofCase.UserId:
              UserId = other.UserId;
              break;
            case IdOneofCase.Handle:
              Handle = other.Handle;
              break;
          }

        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public FriendsAdd Clone() {
          return new FriendsAdd(this);
        }

        /// <summary>Field number for the "user_id" field.</summary>
        public const int UserIdFieldNumber = 1;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public string UserId {
          get { return idCase_ == IdOneofCase.UserId ? (string) id_ : ""; }
          set {
            id_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
            idCase_ = IdOneofCase.UserId;
          }
        }

        /// <summary>Field number for the "handle" field.</summary>
        public const int HandleFieldNumber = 2;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public string Handle {
          get { return idCase_ == IdOneofCase.Handle ? (string) id_ : ""; }
          set {
            id_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
            idCase_ = IdOneofCase.Handle;
          }
        }

        private object id_;
        /// <summary>Enum of possible cases for the "id" oneof.</summary>
        public enum IdOneofCase {
          None = 0,
          UserId = 1,
          Handle = 2,
        }
        private IdOneofCase idCase_ = IdOneofCase.None;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public IdOneofCase IdCase {
          get { return idCase_; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void ClearId() {
          idCase_ = IdOneofCase.None;
          id_ = null;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other) {
          return Equals(other as FriendsAdd);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(FriendsAdd other) {
          if (ReferenceEquals(other, null)) {
            return false;
          }
          if (ReferenceEquals(other, this)) {
            return true;
          }
          if (UserId != other.UserId) return false;
          if (Handle != other.Handle) return false;
          if (IdCase != other.IdCase) return false;
          return true;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode() {
          int hash = 1;
          if (idCase_ == IdOneofCase.UserId) hash ^= UserId.GetHashCode();
          if (idCase_ == IdOneofCase.Handle) hash ^= Handle.GetHashCode();
          hash ^= (int) idCase_;
          return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString() {
          return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output) {
          if (idCase_ == IdOneofCase.UserId) {
            output.WriteRawTag(10);
            output.WriteString(UserId);
          }
          if (idCase_ == IdOneofCase.Handle) {
            output.WriteRawTag(18);
            output.WriteString(Handle);
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize() {
          int size = 0;
          if (idCase_ == IdOneofCase.UserId) {
            size += 1 + pb::CodedOutputStream.ComputeStringSize(UserId);
          }
          if (idCase_ == IdOneofCase.Handle) {
            size += 1 + pb::CodedOutputStream.ComputeStringSize(Handle);
          }
          return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(FriendsAdd other) {
          if (other == null) {
            return;
          }
          switch (other.IdCase) {
            case IdOneofCase.UserId:
              UserId = other.UserId;
              break;
            case IdOneofCase.Handle:
              Handle = other.Handle;
              break;
          }

        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input) {
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                input.SkipLastField();
                break;
              case 10: {
                UserId = input.ReadString();
                break;
              }
              case 18: {
                Handle = input.ReadString();
                break;
              }
            }
          }
        }

      }

    }
    #endregion

  }

  /// <summary>
  ///*
  /// TFriendsRemove sends a list of user IDs or handles to the server that the current user would like to remove relationship status from.
  /// This could be unfriending a friend, or removing a friend request.
  /// </summary>
  public sealed partial class TFriendsRemove : pb::IMessage<TFriendsRemove> {
    private static readonly pb::MessageParser<TFriendsRemove> _parser = new pb::MessageParser<TFriendsRemove>(() => new TFriendsRemove());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<TFriendsRemove> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Nakama.ApiReflection.Descriptor.MessageTypes[17]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TFriendsRemove() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TFriendsRemove(TFriendsRemove other) : this() {
      userIds_ = other.userIds_.Clone();
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TFriendsRemove Clone() {
      return new TFriendsRemove(this);
    }

    /// <summary>Field number for the "user_ids" field.</summary>
    public const int UserIdsFieldNumber = 1;
    private static readonly pb::FieldCodec<string> _repeated_userIds_codec
        = pb::FieldCodec.ForString(10);
    private readonly pbc::RepeatedField<string> userIds_ = new pbc::RepeatedField<string>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<string> UserIds {
      get { return userIds_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as TFriendsRemove);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(TFriendsRemove other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!userIds_.Equals(other.userIds_)) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= userIds_.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      userIds_.WriteTo(output, _repeated_userIds_codec);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += userIds_.CalculateSize(_repeated_userIds_codec);
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(TFriendsRemove other) {
      if (other == null) {
        return;
      }
      userIds_.Add(other.userIds_);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            userIds_.AddEntriesFrom(input, _repeated_userIds_codec);
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///*
  /// TFriendsBlock sends a list of user IDs or handles to the server that the current user would like to block.
  /// If the current user is a friend, relationship is removed bidirectionaly from both users and a new Block status is formed.
  /// </summary>
  public sealed partial class TFriendsBlock : pb::IMessage<TFriendsBlock> {
    private static readonly pb::MessageParser<TFriendsBlock> _parser = new pb::MessageParser<TFriendsBlock>(() => new TFriendsBlock());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<TFriendsBlock> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Nakama.ApiReflection.Descriptor.MessageTypes[18]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TFriendsBlock() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TFriendsBlock(TFriendsBlock other) : this() {
      userIds_ = other.userIds_.Clone();
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TFriendsBlock Clone() {
      return new TFriendsBlock(this);
    }

    /// <summary>Field number for the "user_ids" field.</summary>
    public const int UserIdsFieldNumber = 1;
    private static readonly pb::FieldCodec<string> _repeated_userIds_codec
        = pb::FieldCodec.ForString(10);
    private readonly pbc::RepeatedField<string> userIds_ = new pbc::RepeatedField<string>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<string> UserIds {
      get { return userIds_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as TFriendsBlock);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(TFriendsBlock other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!userIds_.Equals(other.userIds_)) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= userIds_.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      userIds_.WriteTo(output, _repeated_userIds_codec);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += userIds_.CalculateSize(_repeated_userIds_codec);
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(TFriendsBlock other) {
      if (other == null) {
        return;
      }
      userIds_.Add(other.userIds_);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            userIds_.AddEntriesFrom(input, _repeated_userIds_codec);
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///*
  /// TFriendsList fetches a list of users that have a relationship with the current user.
  ///
  /// @returns TFriends
  /// </summary>
  public sealed partial class TFriendsList : pb::IMessage<TFriendsList> {
    private static readonly pb::MessageParser<TFriendsList> _parser = new pb::MessageParser<TFriendsList>(() => new TFriendsList());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<TFriendsList> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Nakama.ApiReflection.Descriptor.MessageTypes[19]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TFriendsList() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TFriendsList(TFriendsList other) : this() {
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TFriendsList Clone() {
      return new TFriendsList(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as TFriendsList);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(TFriendsList other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(TFriendsList other) {
      if (other == null) {
        return;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
        }
      }
    }

  }

  /// <summary>
  ///*
  /// TUsers contains a list of Friends. The list could be empty.
  /// </summary>
  public sealed partial class TFriends : pb::IMessage<TFriends> {
    private static readonly pb::MessageParser<TFriends> _parser = new pb::MessageParser<TFriends>(() => new TFriends());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<TFriends> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Nakama.ApiReflection.Descriptor.MessageTypes[20]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TFriends() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TFriends(TFriends other) : this() {
      friends_ = other.friends_.Clone();
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TFriends Clone() {
      return new TFriends(this);
    }

    /// <summary>Field number for the "friends" field.</summary>
    public const int FriendsFieldNumber = 1;
    private static readonly pb::FieldCodec<global::Nakama.Friend> _repeated_friends_codec
        = pb::FieldCodec.ForMessage(10, global::Nakama.Friend.Parser);
    private readonly pbc::RepeatedField<global::Nakama.Friend> friends_ = new pbc::RepeatedField<global::Nakama.Friend>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Nakama.Friend> Friends {
      get { return friends_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as TFriends);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(TFriends other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!friends_.Equals(other.friends_)) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= friends_.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      friends_.WriteTo(output, _repeated_friends_codec);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += friends_.CalculateSize(_repeated_friends_codec);
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(TFriends other) {
      if (other == null) {
        return;
      }
      friends_.Add(other.friends_);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            friends_.AddEntriesFrom(input, _repeated_friends_codec);
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///*
  /// Group is the core domain type representing a group of users in Nakama.
  /// </summary>
  public sealed partial class Group : pb::IMessage<Group> {
    private static readonly pb::MessageParser<Group> _parser = new pb::MessageParser<Group>(() => new Group());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Group> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Nakama.ApiReflection.Descriptor.MessageTypes[21]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Group() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Group(Group other) : this() {
      id_ = other.id_;
      private_ = other.private_;
      creatorId_ = other.creatorId_;
      name_ = other.name_;
      description_ = other.description_;
      avatarUrl_ = other.avatarUrl_;
      lang_ = other.lang_;
      utcOffsetMs_ = other.utcOffsetMs_;
      metadata_ = other.metadata_;
      count_ = other.count_;
      createdAt_ = other.createdAt_;
      updatedAt_ = other.updatedAt_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Group Clone() {
      return new Group(this);
    }

    /// <summary>Field number for the "id" field.</summary>
    public const int IdFieldNumber = 1;
    private string id_ = "";
    /// <summary>
    //// Group ID
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Id {
      get { return id_; }
      set {
        id_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "private" field.</summary>
    public const int PrivateFieldNumber = 2;
    private bool private_;
    /// <summary>
    //// Whether the group is private or public. If private, group admins will accept user join requests.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Private {
      get { return private_; }
      set {
        private_ = value;
      }
    }

    /// <summary>Field number for the "creator_id" field.</summary>
    public const int CreatorIdFieldNumber = 3;
    private string creatorId_ = "";
    /// <summary>
    //// User ID of the group creator.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string CreatorId {
      get { return creatorId_; }
      set {
        creatorId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "name" field.</summary>
    public const int NameFieldNumber = 4;
    private string name_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Name {
      get { return name_; }
      set {
        name_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "description" field.</summary>
    public const int DescriptionFieldNumber = 5;
    private string description_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Description {
      get { return description_; }
      set {
        description_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "avatar_url" field.</summary>
    public const int AvatarUrlFieldNumber = 6;
    private string avatarUrl_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string AvatarUrl {
      get { return avatarUrl_; }
      set {
        avatarUrl_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "lang" field.</summary>
    public const int LangFieldNumber = 7;
    private string lang_ = "";
    /// <summary>
    //// Language tag corresponding to the BCP 47 spec. This is important and used for Group search.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Lang {
      get { return lang_; }
      set {
        lang_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "utc_offset_ms" field.</summary>
    public const int UtcOffsetMsFieldNumber = 8;
    private long utcOffsetMs_;
    /// <summary>
    //// Offset time in millisecond from UTC.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long UtcOffsetMs {
      get { return utcOffsetMs_; }
      set {
        utcOffsetMs_ = value;
      }
    }

    /// <summary>Field number for the "metadata" field.</summary>
    public const int MetadataFieldNumber = 9;
    private string metadata_ = "";
    /// <summary>
    //// Group metadata information.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Metadata {
      get { return metadata_; }
      set {
        metadata_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "count" field.</summary>
    public const int CountFieldNumber = 10;
    private long count_;
    /// <summary>
    //// Current number of users in this group.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long Count {
      get { return count_; }
      set {
        count_ = value;
      }
    }

    /// <summary>Field number for the "created_at" field.</summary>
    public const int CreatedAtFieldNumber = 11;
    private long createdAt_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long CreatedAt {
      get { return createdAt_; }
      set {
        createdAt_ = value;
      }
    }

    /// <summary>Field number for the "updated_at" field.</summary>
    public const int UpdatedAtFieldNumber = 12;
    private long updatedAt_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long UpdatedAt {
      get { return updatedAt_; }
      set {
        updatedAt_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Group);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Group other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Id != other.Id) return false;
      if (Private != other.Private) return false;
      if (CreatorId != other.CreatorId) return false;
      if (Name != other.Name) return false;
      if (Description != other.Description) return false;
      if (AvatarUrl != other.AvatarUrl) return false;
      if (Lang != other.Lang) return false;
      if (UtcOffsetMs != other.UtcOffsetMs) return false;
      if (Metadata != other.Metadata) return false;
      if (Count != other.Count) return false;
      if (CreatedAt != other.CreatedAt) return false;
      if (UpdatedAt != other.UpdatedAt) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Id.Length != 0) hash ^= Id.GetHashCode();
      if (Private != false) hash ^= Private.GetHashCode();
      if (CreatorId.Length != 0) hash ^= CreatorId.GetHashCode();
      if (Name.Length != 0) hash ^= Name.GetHashCode();
      if (Description.Length != 0) hash ^= Description.GetHashCode();
      if (AvatarUrl.Length != 0) hash ^= AvatarUrl.GetHashCode();
      if (Lang.Length != 0) hash ^= Lang.GetHashCode();
      if (UtcOffsetMs != 0L) hash ^= UtcOffsetMs.GetHashCode();
      if (Metadata.Length != 0) hash ^= Metadata.GetHashCode();
      if (Count != 0L) hash ^= Count.GetHashCode();
      if (CreatedAt != 0L) hash ^= CreatedAt.GetHashCode();
      if (UpdatedAt != 0L) hash ^= UpdatedAt.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Id.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Id);
      }
      if (Private != false) {
        output.WriteRawTag(16);
        output.WriteBool(Private);
      }
      if (CreatorId.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(CreatorId);
      }
      if (Name.Length != 0) {
        output.WriteRawTag(34);
        output.WriteString(Name);
      }
      if (Description.Length != 0) {
        output.WriteRawTag(42);
        output.WriteString(Description);
      }
      if (AvatarUrl.Length != 0) {
        output.WriteRawTag(50);
        output.WriteString(AvatarUrl);
      }
      if (Lang.Length != 0) {
        output.WriteRawTag(58);
        output.WriteString(Lang);
      }
      if (UtcOffsetMs != 0L) {
        output.WriteRawTag(64);
        output.WriteInt64(UtcOffsetMs);
      }
      if (Metadata.Length != 0) {
        output.WriteRawTag(74);
        output.WriteString(Metadata);
      }
      if (Count != 0L) {
        output.WriteRawTag(80);
        output.WriteInt64(Count);
      }
      if (CreatedAt != 0L) {
        output.WriteRawTag(88);
        output.WriteInt64(CreatedAt);
      }
      if (UpdatedAt != 0L) {
        output.WriteRawTag(96);
        output.WriteInt64(UpdatedAt);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Id.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Id);
      }
      if (Private != false) {
        size += 1 + 1;
      }
      if (CreatorId.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(CreatorId);
      }
      if (Name.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Name);
      }
      if (Description.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Description);
      }
      if (AvatarUrl.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(AvatarUrl);
      }
      if (Lang.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Lang);
      }
      if (UtcOffsetMs != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(UtcOffsetMs);
      }
      if (Metadata.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Metadata);
      }
      if (Count != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(Count);
      }
      if (CreatedAt != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(CreatedAt);
      }
      if (UpdatedAt != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(UpdatedAt);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Group other) {
      if (other == null) {
        return;
      }
      if (other.Id.Length != 0) {
        Id = other.Id;
      }
      if (other.Private != false) {
        Private = other.Private;
      }
      if (other.CreatorId.Length != 0) {
        CreatorId = other.CreatorId;
      }
      if (other.Name.Length != 0) {
        Name = other.Name;
      }
      if (other.Description.Length != 0) {
        Description = other.Description;
      }
      if (other.AvatarUrl.Length != 0) {
        AvatarUrl = other.AvatarUrl;
      }
      if (other.Lang.Length != 0) {
        Lang = other.Lang;
      }
      if (other.UtcOffsetMs != 0L) {
        UtcOffsetMs = other.UtcOffsetMs;
      }
      if (other.Metadata.Length != 0) {
        Metadata = other.Metadata;
      }
      if (other.Count != 0L) {
        Count = other.Count;
      }
      if (other.CreatedAt != 0L) {
        CreatedAt = other.CreatedAt;
      }
      if (other.UpdatedAt != 0L) {
        UpdatedAt = other.UpdatedAt;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            Id = input.ReadString();
            break;
          }
          case 16: {
            Private = input.ReadBool();
            break;
          }
          case 26: {
            CreatorId = input.ReadString();
            break;
          }
          case 34: {
            Name = input.ReadString();
            break;
          }
          case 42: {
            Description = input.ReadString();
            break;
          }
          case 50: {
            AvatarUrl = input.ReadString();
            break;
          }
          case 58: {
            Lang = input.ReadString();
            break;
          }
          case 64: {
            UtcOffsetMs = input.ReadInt64();
            break;
          }
          case 74: {
            Metadata = input.ReadString();
            break;
          }
          case 80: {
            Count = input.ReadInt64();
            break;
          }
          case 88: {
            CreatedAt = input.ReadInt64();
            break;
          }
          case 96: {
            UpdatedAt = input.ReadInt64();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///*
  /// TGroupsCreate creates a new group.
  ///
  /// @returns TGroups
  ///
  /// NOTE: The server only processes the first item of the list, and will ignore and logs a warning message for other items.
  /// </summary>
  public sealed partial class TGroupsCreate : pb::IMessage<TGroupsCreate> {
    private static readonly pb::MessageParser<TGroupsCreate> _parser = new pb::MessageParser<TGroupsCreate>(() => new TGroupsCreate());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<TGroupsCreate> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Nakama.ApiReflection.Descriptor.MessageTypes[22]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TGroupsCreate() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TGroupsCreate(TGroupsCreate other) : this() {
      groups_ = other.groups_.Clone();
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TGroupsCreate Clone() {
      return new TGroupsCreate(this);
    }

    /// <summary>Field number for the "groups" field.</summary>
    public const int GroupsFieldNumber = 1;
    private static readonly pb::FieldCodec<global::Nakama.TGroupsCreate.Types.GroupCreate> _repeated_groups_codec
        = pb::FieldCodec.ForMessage(10, global::Nakama.TGroupsCreate.Types.GroupCreate.Parser);
    private readonly pbc::RepeatedField<global::Nakama.TGroupsCreate.Types.GroupCreate> groups_ = new pbc::RepeatedField<global::Nakama.TGroupsCreate.Types.GroupCreate>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Nakama.TGroupsCreate.Types.GroupCreate> Groups {
      get { return groups_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as TGroupsCreate);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(TGroupsCreate other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!groups_.Equals(other.groups_)) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= groups_.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      groups_.WriteTo(output, _repeated_groups_codec);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += groups_.CalculateSize(_repeated_groups_codec);
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(TGroupsCreate other) {
      if (other == null) {
        return;
      }
      groups_.Add(other.groups_);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            groups_.AddEntriesFrom(input, _repeated_groups_codec);
            break;
          }
        }
      }
    }

    #region Nested types
    /// <summary>Container for nested types declared in the TGroupsCreate message type.</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static partial class Types {
      public sealed partial class GroupCreate : pb::IMessage<GroupCreate> {
        private static readonly pb::MessageParser<GroupCreate> _parser = new pb::MessageParser<GroupCreate>(() => new GroupCreate());
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<GroupCreate> Parser { get { return _parser; } }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor {
          get { return global::Nakama.TGroupsCreate.Descriptor.NestedTypes[0]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor {
          get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public GroupCreate() {
          OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public GroupCreate(GroupCreate other) : this() {
          name_ = other.name_;
          description_ = other.description_;
          avatarUrl_ = other.avatarUrl_;
          lang_ = other.lang_;
          metadata_ = other.metadata_;
          private_ = other.private_;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public GroupCreate Clone() {
          return new GroupCreate(this);
        }

        /// <summary>Field number for the "name" field.</summary>
        public const int NameFieldNumber = 1;
        private string name_ = "";
        /// <summary>
        //// Group name must be unique.
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public string Name {
          get { return name_; }
          set {
            name_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
          }
        }

        /// <summary>Field number for the "description" field.</summary>
        public const int DescriptionFieldNumber = 2;
        private string description_ = "";
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public string Description {
          get { return description_; }
          set {
            description_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
          }
        }

        /// <summary>Field number for the "avatar_url" field.</summary>
        public const int AvatarUrlFieldNumber = 3;
        private string avatarUrl_ = "";
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public string AvatarUrl {
          get { return avatarUrl_; }
          set {
            avatarUrl_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
          }
        }

        /// <summary>Field number for the "lang" field.</summary>
        public const int LangFieldNumber = 4;
        private string lang_ = "";
        /// <summary>
        //// Language tag corresponding to the BCP 47 spec. This is important and used for Group search.
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public string Lang {
          get { return lang_; }
          set {
            lang_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
          }
        }

        /// <summary>Field number for the "metadata" field.</summary>
        public const int MetadataFieldNumber = 5;
        private string metadata_ = "";
        /// <summary>
        //// Group metadata information.
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public string Metadata {
          get { return metadata_; }
          set {
            metadata_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
          }
        }

        /// <summary>Field number for the "private" field.</summary>
        public const int PrivateFieldNumber = 6;
        private bool private_;
        /// <summary>
        //// Whether the group is private or public. If private, group admins will accept user join requests.
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Private {
          get { return private_; }
          set {
            private_ = value;
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other) {
          return Equals(other as GroupCreate);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(GroupCreate other) {
          if (ReferenceEquals(other, null)) {
            return false;
          }
          if (ReferenceEquals(other, this)) {
            return true;
          }
          if (Name != other.Name) return false;
          if (Description != other.Description) return false;
          if (AvatarUrl != other.AvatarUrl) return false;
          if (Lang != other.Lang) return false;
          if (Metadata != other.Metadata) return false;
          if (Private != other.Private) return false;
          return true;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode() {
          int hash = 1;
          if (Name.Length != 0) hash ^= Name.GetHashCode();
          if (Description.Length != 0) hash ^= Description.GetHashCode();
          if (AvatarUrl.Length != 0) hash ^= AvatarUrl.GetHashCode();
          if (Lang.Length != 0) hash ^= Lang.GetHashCode();
          if (Metadata.Length != 0) hash ^= Metadata.GetHashCode();
          if (Private != false) hash ^= Private.GetHashCode();
          return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString() {
          return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output) {
          if (Name.Length != 0) {
            output.WriteRawTag(10);
            output.WriteString(Name);
          }
          if (Description.Length != 0) {
            output.WriteRawTag(18);
            output.WriteString(Description);
          }
          if (AvatarUrl.Length != 0) {
            output.WriteRawTag(26);
            output.WriteString(AvatarUrl);
          }
          if (Lang.Length != 0) {
            output.WriteRawTag(34);
            output.WriteString(Lang);
          }
          if (Metadata.Length != 0) {
            output.WriteRawTag(42);
            output.WriteString(Metadata);
          }
          if (Private != false) {
            output.WriteRawTag(48);
            output.WriteBool(Private);
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize() {
          int size = 0;
          if (Name.Length != 0) {
            size += 1 + pb::CodedOutputStream.ComputeStringSize(Name);
          }
          if (Description.Length != 0) {
            size += 1 + pb::CodedOutputStream.ComputeStringSize(Description);
          }
          if (AvatarUrl.Length != 0) {
            size += 1 + pb::CodedOutputStream.ComputeStringSize(AvatarUrl);
          }
          if (Lang.Length != 0) {
            size += 1 + pb::CodedOutputStream.ComputeStringSize(Lang);
          }
          if (Metadata.Length != 0) {
            size += 1 + pb::CodedOutputStream.ComputeStringSize(Metadata);
          }
          if (Private != false) {
            size += 1 + 1;
          }
          return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(GroupCreate other) {
          if (other == null) {
            return;
          }
          if (other.Name.Length != 0) {
            Name = other.Name;
          }
          if (other.Description.Length != 0) {
            Description = other.Description;
          }
          if (other.AvatarUrl.Length != 0) {
            AvatarUrl = other.AvatarUrl;
          }
          if (other.Lang.Length != 0) {
            Lang = other.Lang;
          }
          if (other.Metadata.Length != 0) {
            Metadata = other.Metadata;
          }
          if (other.Private != false) {
            Private = other.Private;
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input) {
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                input.SkipLastField();
                break;
              case 10: {
                Name = input.ReadString();
                break;
              }
              case 18: {
                Description = input.ReadString();
                break;
              }
              case 26: {
                AvatarUrl = input.ReadString();
                break;
              }
              case 34: {
                Lang = input.ReadString();
                break;
              }
              case 42: {
                Metadata = input.ReadString();
                break;
              }
              case 48: {
                Private = input.ReadBool();
                break;
              }
            }
          }
        }

      }

    }
    #endregion

  }

  /// <summary>
  ///*
  /// TGroupsUpdate updates the group with matching Group ID.
  /// Only group admins can update group information.
  ///
  /// NOTE: The server only processes the first item of the list, and will ignore and logs a warning message for other items.
  /// </summary>
  public sealed partial class TGroupsUpdate : pb::IMessage<TGroupsUpdate> {
    private static readonly pb::MessageParser<TGroupsUpdate> _parser = new pb::MessageParser<TGroupsUpdate>(() => new TGroupsUpdate());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<TGroupsUpdate> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Nakama.ApiReflection.Descriptor.MessageTypes[23]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TGroupsUpdate() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TGroupsUpdate(TGroupsUpdate other) : this() {
      groups_ = other.groups_.Clone();
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TGroupsUpdate Clone() {
      return new TGroupsUpdate(this);
    }

    /// <summary>Field number for the "groups" field.</summary>
    public const int GroupsFieldNumber = 1;
    private static readonly pb::FieldCodec<global::Nakama.TGroupsUpdate.Types.GroupUpdate> _repeated_groups_codec
        = pb::FieldCodec.ForMessage(10, global::Nakama.TGroupsUpdate.Types.GroupUpdate.Parser);
    private readonly pbc::RepeatedField<global::Nakama.TGroupsUpdate.Types.GroupUpdate> groups_ = new pbc::RepeatedField<global::Nakama.TGroupsUpdate.Types.GroupUpdate>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Nakama.TGroupsUpdate.Types.GroupUpdate> Groups {
      get { return groups_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as TGroupsUpdate);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(TGroupsUpdate other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!groups_.Equals(other.groups_)) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= groups_.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      groups_.WriteTo(output, _repeated_groups_codec);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += groups_.CalculateSize(_repeated_groups_codec);
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(TGroupsUpdate other) {
      if (other == null) {
        return;
      }
      groups_.Add(other.groups_);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            groups_.AddEntriesFrom(input, _repeated_groups_codec);
            break;
          }
        }
      }
    }

    #region Nested types
    /// <summary>Container for nested types declared in the TGroupsUpdate message type.</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static partial class Types {
      public sealed partial class GroupUpdate : pb::IMessage<GroupUpdate> {
        private static readonly pb::MessageParser<GroupUpdate> _parser = new pb::MessageParser<GroupUpdate>(() => new GroupUpdate());
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<GroupUpdate> Parser { get { return _parser; } }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor {
          get { return global::Nakama.TGroupsUpdate.Descriptor.NestedTypes[0]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor {
          get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public GroupUpdate() {
          OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public GroupUpdate(GroupUpdate other) : this() {
          groupId_ = other.groupId_;
          private_ = other.private_;
          name_ = other.name_;
          description_ = other.description_;
          avatarUrl_ = other.avatarUrl_;
          lang_ = other.lang_;
          metadata_ = other.metadata_;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public GroupUpdate Clone() {
          return new GroupUpdate(this);
        }

        /// <summary>Field number for the "group_id" field.</summary>
        public const int GroupIdFieldNumber = 1;
        private string groupId_ = "";
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public string GroupId {
          get { return groupId_; }
          set {
            groupId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
          }
        }

        /// <summary>Field number for the "private" field.</summary>
        public const int PrivateFieldNumber = 2;
        private bool private_;
        /// <summary>
        //// Whether the group is private or public. If private, group admins will accept user join requests.
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Private {
          get { return private_; }
          set {
            private_ = value;
          }
        }

        /// <summary>Field number for the "name" field.</summary>
        public const int NameFieldNumber = 3;
        private string name_ = "";
        /// <summary>
        //// Group name must be unique.
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public string Name {
          get { return name_; }
          set {
            name_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
          }
        }

        /// <summary>Field number for the "description" field.</summary>
        public const int DescriptionFieldNumber = 4;
        private string description_ = "";
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public string Description {
          get { return description_; }
          set {
            description_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
          }
        }

        /// <summary>Field number for the "avatar_url" field.</summary>
        public const int AvatarUrlFieldNumber = 5;
        private string avatarUrl_ = "";
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public string AvatarUrl {
          get { return avatarUrl_; }
          set {
            avatarUrl_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
          }
        }

        /// <summary>Field number for the "lang" field.</summary>
        public const int LangFieldNumber = 6;
        private string lang_ = "";
        /// <summary>
        //// Language tag corresponding to the BCP 47 spec. This is important and used for Group search.
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public string Lang {
          get { return lang_; }
          set {
            lang_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
          }
        }

        /// <summary>Field number for the "metadata" field.</summary>
        public const int MetadataFieldNumber = 7;
        private string metadata_ = "";
        /// <summary>
        //// Set or remove metadata information.
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public string Metadata {
          get { return metadata_; }
          set {
            metadata_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other) {
          return Equals(other as GroupUpdate);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(GroupUpdate other) {
          if (ReferenceEquals(other, null)) {
            return false;
          }
          if (ReferenceEquals(other, this)) {
            return true;
          }
          if (GroupId != other.GroupId) return false;
          if (Private != other.Private) return false;
          if (Name != other.Name) return false;
          if (Description != other.Description) return false;
          if (AvatarUrl != other.AvatarUrl) return false;
          if (Lang != other.Lang) return false;
          if (Metadata != other.Metadata) return false;
          return true;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode() {
          int hash = 1;
          if (GroupId.Length != 0) hash ^= GroupId.GetHashCode();
          if (Private != false) hash ^= Private.GetHashCode();
          if (Name.Length != 0) hash ^= Name.GetHashCode();
          if (Description.Length != 0) hash ^= Description.GetHashCode();
          if (AvatarUrl.Length != 0) hash ^= AvatarUrl.GetHashCode();
          if (Lang.Length != 0) hash ^= Lang.GetHashCode();
          if (Metadata.Length != 0) hash ^= Metadata.GetHashCode();
          return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString() {
          return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output) {
          if (GroupId.Length != 0) {
            output.WriteRawTag(10);
            output.WriteString(GroupId);
          }
          if (Private != false) {
            output.WriteRawTag(16);
            output.WriteBool(Private);
          }
          if (Name.Length != 0) {
            output.WriteRawTag(26);
            output.WriteString(Name);
          }
          if (Description.Length != 0) {
            output.WriteRawTag(34);
            output.WriteString(Description);
          }
          if (AvatarUrl.Length != 0) {
            output.WriteRawTag(42);
            output.WriteString(AvatarUrl);
          }
          if (Lang.Length != 0) {
            output.WriteRawTag(50);
            output.WriteString(Lang);
          }
          if (Metadata.Length != 0) {
            output.WriteRawTag(58);
            output.WriteString(Metadata);
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize() {
          int size = 0;
          if (GroupId.Length != 0) {
            size += 1 + pb::CodedOutputStream.ComputeStringSize(GroupId);
          }
          if (Private != false) {
            size += 1 + 1;
          }
          if (Name.Length != 0) {
            size += 1 + pb::CodedOutputStream.ComputeStringSize(Name);
          }
          if (Description.Length != 0) {
            size += 1 + pb::CodedOutputStream.ComputeStringSize(Description);
          }
          if (AvatarUrl.Length != 0) {
            size += 1 + pb::CodedOutputStream.ComputeStringSize(AvatarUrl);
          }
          if (Lang.Length != 0) {
            size += 1 + pb::CodedOutputStream.ComputeStringSize(Lang);
          }
          if (Metadata.Length != 0) {
            size += 1 + pb::CodedOutputStream.ComputeStringSize(Metadata);
          }
          return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(GroupUpdate other) {
          if (other == null) {
            return;
          }
          if (other.GroupId.Length != 0) {
            GroupId = other.GroupId;
          }
          if (other.Private != false) {
            Private = other.Private;
          }
          if (other.Name.Length != 0) {
            Name = other.Name;
          }
          if (other.Description.Length != 0) {
            Description = other.Description;
          }
          if (other.AvatarUrl.Length != 0) {
            AvatarUrl = other.AvatarUrl;
          }
          if (other.Lang.Length != 0) {
            Lang = other.Lang;
          }
          if (other.Metadata.Length != 0) {
            Metadata = other.Metadata;
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input) {
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                input.SkipLastField();
                break;
              case 10: {
                GroupId = input.ReadString();
                break;
              }
              case 16: {
                Private = input.ReadBool();
                break;
              }
              case 26: {
                Name = input.ReadString();
                break;
              }
              case 34: {
                Description = input.ReadString();
                break;
              }
              case 42: {
                AvatarUrl = input.ReadString();
                break;
              }
              case 50: {
                Lang = input.ReadString();
                break;
              }
              case 58: {
                Metadata = input.ReadString();
                break;
              }
            }
          }
        }

      }

    }
    #endregion

  }

  /// <summary>
  ///*
  /// TGroupsRemove removes the group with matching Group ID.
  /// Only group admins can delete group.
  ///
  /// NOTE: The server only processes the first item of the list, and will ignore and logs a warning message for other items.
  /// </summary>
  public sealed partial class TGroupsRemove : pb::IMessage<TGroupsRemove> {
    private static readonly pb::MessageParser<TGroupsRemove> _parser = new pb::MessageParser<TGroupsRemove>(() => new TGroupsRemove());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<TGroupsRemove> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Nakama.ApiReflection.Descriptor.MessageTypes[24]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TGroupsRemove() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TGroupsRemove(TGroupsRemove other) : this() {
      groupIds_ = other.groupIds_.Clone();
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TGroupsRemove Clone() {
      return new TGroupsRemove(this);
    }

    /// <summary>Field number for the "group_ids" field.</summary>
    public const int GroupIdsFieldNumber = 1;
    private static readonly pb::FieldCodec<string> _repeated_groupIds_codec
        = pb::FieldCodec.ForString(10);
    private readonly pbc::RepeatedField<string> groupIds_ = new pbc::RepeatedField<string>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<string> GroupIds {
      get { return groupIds_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as TGroupsRemove);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(TGroupsRemove other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!groupIds_.Equals(other.groupIds_)) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= groupIds_.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      groupIds_.WriteTo(output, _repeated_groupIds_codec);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += groupIds_.CalculateSize(_repeated_groupIds_codec);
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(TGroupsRemove other) {
      if (other == null) {
        return;
      }
      groupIds_.Add(other.groupIds_);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            groupIds_.AddEntriesFrom(input, _repeated_groupIds_codec);
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///*
  /// TGroupsSelfList fetches a list of groups that the current user is part of.
  ///
  /// @returns TGroupsSelf
  /// </summary>
  public sealed partial class TGroupsSelfList : pb::IMessage<TGroupsSelfList> {
    private static readonly pb::MessageParser<TGroupsSelfList> _parser = new pb::MessageParser<TGroupsSelfList>(() => new TGroupsSelfList());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<TGroupsSelfList> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Nakama.ApiReflection.Descriptor.MessageTypes[25]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TGroupsSelfList() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TGroupsSelfList(TGroupsSelfList other) : this() {
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TGroupsSelfList Clone() {
      return new TGroupsSelfList(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as TGroupsSelfList);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(TGroupsSelfList other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(TGroupsSelfList other) {
      if (other == null) {
        return;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
        }
      }
    }

  }

  /// <summary>
  ///*
  /// TGroupsFetch fetches a list of groups that the match the group ID or group name.
  ///
  /// @returns TGroups
  /// </summary>
  public sealed partial class TGroupsFetch : pb::IMessage<TGroupsFetch> {
    private static readonly pb::MessageParser<TGroupsFetch> _parser = new pb::MessageParser<TGroupsFetch>(() => new TGroupsFetch());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<TGroupsFetch> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Nakama.ApiReflection.Descriptor.MessageTypes[26]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TGroupsFetch() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TGroupsFetch(TGroupsFetch other) : this() {
      groups_ = other.groups_.Clone();
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TGroupsFetch Clone() {
      return new TGroupsFetch(this);
    }

    /// <summary>Field number for the "groups" field.</summary>
    public const int GroupsFieldNumber = 1;
    private static readonly pb::FieldCodec<global::Nakama.TGroupsFetch.Types.GroupFetch> _repeated_groups_codec
        = pb::FieldCodec.ForMessage(10, global::Nakama.TGroupsFetch.Types.GroupFetch.Parser);
    private readonly pbc::RepeatedField<global::Nakama.TGroupsFetch.Types.GroupFetch> groups_ = new pbc::RepeatedField<global::Nakama.TGroupsFetch.Types.GroupFetch>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Nakama.TGroupsFetch.Types.GroupFetch> Groups {
      get { return groups_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as TGroupsFetch);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(TGroupsFetch other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!groups_.Equals(other.groups_)) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= groups_.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      groups_.WriteTo(output, _repeated_groups_codec);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += groups_.CalculateSize(_repeated_groups_codec);
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(TGroupsFetch other) {
      if (other == null) {
        return;
      }
      groups_.Add(other.groups_);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            groups_.AddEntriesFrom(input, _repeated_groups_codec);
            break;
          }
        }
      }
    }

    #region Nested types
    /// <summary>Container for nested types declared in the TGroupsFetch message type.</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static partial class Types {
      public sealed partial class GroupFetch : pb::IMessage<GroupFetch> {
        private static readonly pb::MessageParser<GroupFetch> _parser = new pb::MessageParser<GroupFetch>(() => new GroupFetch());
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<GroupFetch> Parser { get { return _parser; } }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor {
          get { return global::Nakama.TGroupsFetch.Descriptor.NestedTypes[0]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor {
          get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public GroupFetch() {
          OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public GroupFetch(GroupFetch other) : this() {
          switch (other.IdCase) {
            case IdOneofCase.GroupId:
              GroupId = other.GroupId;
              break;
            case IdOneofCase.Name:
              Name = other.Name;
              break;
          }

        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public GroupFetch Clone() {
          return new GroupFetch(this);
        }

        /// <summary>Field number for the "group_id" field.</summary>
        public const int GroupIdFieldNumber = 1;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public string GroupId {
          get { return idCase_ == IdOneofCase.GroupId ? (string) id_ : ""; }
          set {
            id_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
            idCase_ = IdOneofCase.GroupId;
          }
        }

        /// <summary>Field number for the "name" field.</summary>
        public const int NameFieldNumber = 2;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public string Name {
          get { return idCase_ == IdOneofCase.Name ? (string) id_ : ""; }
          set {
            id_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
            idCase_ = IdOneofCase.Name;
          }
        }

        private object id_;
        /// <summary>Enum of possible cases for the "id" oneof.</summary>
        public enum IdOneofCase {
          None = 0,
          GroupId = 1,
          Name = 2,
        }
        private IdOneofCase idCase_ = IdOneofCase.None;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public IdOneofCase IdCase {
          get { return idCase_; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void ClearId() {
          idCase_ = IdOneofCase.None;
          id_ = null;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other) {
          return Equals(other as GroupFetch);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(GroupFetch other) {
          if (ReferenceEquals(other, null)) {
            return false;
          }
          if (ReferenceEquals(other, this)) {
            return true;
          }
          if (GroupId != other.GroupId) return false;
          if (Name != other.Name) return false;
          if (IdCase != other.IdCase) return false;
          return true;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode() {
          int hash = 1;
          if (idCase_ == IdOneofCase.GroupId) hash ^= GroupId.GetHashCode();
          if (idCase_ == IdOneofCase.Name) hash ^= Name.GetHashCode();
          hash ^= (int) idCase_;
          return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString() {
          return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output) {
          if (idCase_ == IdOneofCase.GroupId) {
            output.WriteRawTag(10);
            output.WriteString(GroupId);
          }
          if (idCase_ == IdOneofCase.Name) {
            output.WriteRawTag(18);
            output.WriteString(Name);
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize() {
          int size = 0;
          if (idCase_ == IdOneofCase.GroupId) {
            size += 1 + pb::CodedOutputStream.ComputeStringSize(GroupId);
          }
          if (idCase_ == IdOneofCase.Name) {
            size += 1 + pb::CodedOutputStream.ComputeStringSize(Name);
          }
          return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(GroupFetch other) {
          if (other == null) {
            return;
          }
          switch (other.IdCase) {
            case IdOneofCase.GroupId:
              GroupId = other.GroupId;
              break;
            case IdOneofCase.Name:
              Name = other.Name;
              break;
          }

        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input) {
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                input.SkipLastField();
                break;
              case 10: {
                GroupId = input.ReadString();
                break;
              }
              case 18: {
                Name = input.ReadString();
                break;
              }
            }
          }
        }

      }

    }
    #endregion

  }

  /// <summary>
  ///*
  /// TGroupsList searches all groups for matching criteria.
  ///
  /// @returns TGroups
  /// </summary>
  public sealed partial class TGroupsList : pb::IMessage<TGroupsList> {
    private static readonly pb::MessageParser<TGroupsList> _parser = new pb::MessageParser<TGroupsList>(() => new TGroupsList());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<TGroupsList> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Nakama.ApiReflection.Descriptor.MessageTypes[27]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TGroupsList() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TGroupsList(TGroupsList other) : this() {
      pageLimit_ = other.pageLimit_;
      orderByAsc_ = other.orderByAsc_;
      cursor_ = other.cursor_;
      switch (other.FilterCase) {
        case FilterOneofCase.Lang:
          Lang = other.Lang;
          break;
        case FilterOneofCase.CreatedAt:
          CreatedAt = other.CreatedAt;
          break;
        case FilterOneofCase.Count:
          Count = other.Count;
          break;
      }

    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TGroupsList Clone() {
      return new TGroupsList(this);
    }

    /// <summary>Field number for the "page_limit" field.</summary>
    public const int PageLimitFieldNumber = 1;
    private long pageLimit_;
    /// <summary>
    //// Upper limit on the maximum number of groups to return per request. Max value is 100.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long PageLimit {
      get { return pageLimit_; }
      set {
        pageLimit_ = value;
      }
    }

    /// <summary>Field number for the "order_by_asc" field.</summary>
    public const int OrderByAscFieldNumber = 2;
    private bool orderByAsc_;
    /// <summary>
    //// Whether to order the result ascending or descending based on the filters defined below.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool OrderByAsc {
      get { return orderByAsc_; }
      set {
        orderByAsc_ = value;
      }
    }

    /// <summary>Field number for the "lang" field.</summary>
    public const int LangFieldNumber = 3;
    /// <summary>
    //// Find groups matching the given language tag.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Lang {
      get { return filterCase_ == FilterOneofCase.Lang ? (string) filter_ : ""; }
      set {
        filter_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
        filterCase_ = FilterOneofCase.Lang;
      }
    }

    /// <summary>Field number for the "created_at" field.</summary>
    public const int CreatedAtFieldNumber = 4;
    /// <summary>
    //// Find groups created after a given time.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long CreatedAt {
      get { return filterCase_ == FilterOneofCase.CreatedAt ? (long) filter_ : 0L; }
      set {
        filter_ = value;
        filterCase_ = FilterOneofCase.CreatedAt;
      }
    }

    /// <summary>Field number for the "count" field.</summary>
    public const int CountFieldNumber = 5;
    /// <summary>
    //// Find groups that have members up to (and equal to) the count value.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long Count {
      get { return filterCase_ == FilterOneofCase.Count ? (long) filter_ : 0L; }
      set {
        filter_ = value;
        filterCase_ = FilterOneofCase.Count;
      }
    }

    /// <summary>Field number for the "cursor" field.</summary>
    public const int CursorFieldNumber = 7;
    private string cursor_ = "";
    /// <summary>
    //// Binary cursor value used to paginate results.
    //// The value of this comes from TGroups.cursor.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Cursor {
      get { return cursor_; }
      set {
        cursor_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    private object filter_;
    /// <summary>Enum of possible cases for the "filter" oneof.</summary>
    public enum FilterOneofCase {
      None = 0,
      Lang = 3,
      CreatedAt = 4,
      Count = 5,
    }
    private FilterOneofCase filterCase_ = FilterOneofCase.None;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public FilterOneofCase FilterCase {
      get { return filterCase_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearFilter() {
      filterCase_ = FilterOneofCase.None;
      filter_ = null;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as TGroupsList);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(TGroupsList other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (PageLimit != other.PageLimit) return false;
      if (OrderByAsc != other.OrderByAsc) return false;
      if (Lang != other.Lang) return false;
      if (CreatedAt != other.CreatedAt) return false;
      if (Count != other.Count) return false;
      if (Cursor != other.Cursor) return false;
      if (FilterCase != other.FilterCase) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (PageLimit != 0L) hash ^= PageLimit.GetHashCode();
      if (OrderByAsc != false) hash ^= OrderByAsc.GetHashCode();
      if (filterCase_ == FilterOneofCase.Lang) hash ^= Lang.GetHashCode();
      if (filterCase_ == FilterOneofCase.CreatedAt) hash ^= CreatedAt.GetHashCode();
      if (filterCase_ == FilterOneofCase.Count) hash ^= Count.GetHashCode();
      if (Cursor.Length != 0) hash ^= Cursor.GetHashCode();
      hash ^= (int) filterCase_;
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (PageLimit != 0L) {
        output.WriteRawTag(8);
        output.WriteInt64(PageLimit);
      }
      if (OrderByAsc != false) {
        output.WriteRawTag(16);
        output.WriteBool(OrderByAsc);
      }
      if (filterCase_ == FilterOneofCase.Lang) {
        output.WriteRawTag(26);
        output.WriteString(Lang);
      }
      if (filterCase_ == FilterOneofCase.CreatedAt) {
        output.WriteRawTag(32);
        output.WriteInt64(CreatedAt);
      }
      if (filterCase_ == FilterOneofCase.Count) {
        output.WriteRawTag(40);
        output.WriteInt64(Count);
      }
      if (Cursor.Length != 0) {
        output.WriteRawTag(58);
        output.WriteString(Cursor);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (PageLimit != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(PageLimit);
      }
      if (OrderByAsc != false) {
        size += 1 + 1;
      }
      if (filterCase_ == FilterOneofCase.Lang) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Lang);
      }
      if (filterCase_ == FilterOneofCase.CreatedAt) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(CreatedAt);
      }
      if (filterCase_ == FilterOneofCase.Count) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(Count);
      }
      if (Cursor.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Cursor);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(TGroupsList other) {
      if (other == null) {
        return;
      }
      if (other.PageLimit != 0L) {
        PageLimit = other.PageLimit;
      }
      if (other.OrderByAsc != false) {
        OrderByAsc = other.OrderByAsc;
      }
      if (other.Cursor.Length != 0) {
        Cursor = other.Cursor;
      }
      switch (other.FilterCase) {
        case FilterOneofCase.Lang:
          Lang = other.Lang;
          break;
        case FilterOneofCase.CreatedAt:
          CreatedAt = other.CreatedAt;
          break;
        case FilterOneofCase.Count:
          Count = other.Count;
          break;
      }

    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            PageLimit = input.ReadInt64();
            break;
          }
          case 16: {
            OrderByAsc = input.ReadBool();
            break;
          }
          case 26: {
            Lang = input.ReadString();
            break;
          }
          case 32: {
            CreatedAt = input.ReadInt64();
            break;
          }
          case 40: {
            Count = input.ReadInt64();
            break;
          }
          case 58: {
            Cursor = input.ReadString();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///*
  /// TGroups contains a list of groups and a cursor that can be used to further paginate results.
  /// </summary>
  public sealed partial class TGroups : pb::IMessage<TGroups> {
    private static readonly pb::MessageParser<TGroups> _parser = new pb::MessageParser<TGroups>(() => new TGroups());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<TGroups> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Nakama.ApiReflection.Descriptor.MessageTypes[28]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TGroups() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TGroups(TGroups other) : this() {
      groups_ = other.groups_.Clone();
      cursor_ = other.cursor_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TGroups Clone() {
      return new TGroups(this);
    }

    /// <summary>Field number for the "groups" field.</summary>
    public const int GroupsFieldNumber = 1;
    private static readonly pb::FieldCodec<global::Nakama.Group> _repeated_groups_codec
        = pb::FieldCodec.ForMessage(10, global::Nakama.Group.Parser);
    private readonly pbc::RepeatedField<global::Nakama.Group> groups_ = new pbc::RepeatedField<global::Nakama.Group>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Nakama.Group> Groups {
      get { return groups_; }
    }

    /// <summary>Field number for the "cursor" field.</summary>
    public const int CursorFieldNumber = 2;
    private string cursor_ = "";
    /// <summary>
    //// Use cursor to paginate results.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Cursor {
      get { return cursor_; }
      set {
        cursor_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as TGroups);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(TGroups other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!groups_.Equals(other.groups_)) return false;
      if (Cursor != other.Cursor) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= groups_.GetHashCode();
      if (Cursor.Length != 0) hash ^= Cursor.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      groups_.WriteTo(output, _repeated_groups_codec);
      if (Cursor.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(Cursor);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += groups_.CalculateSize(_repeated_groups_codec);
      if (Cursor.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Cursor);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(TGroups other) {
      if (other == null) {
        return;
      }
      groups_.Add(other.groups_);
      if (other.Cursor.Length != 0) {
        Cursor = other.Cursor;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            groups_.AddEntriesFrom(input, _repeated_groups_codec);
            break;
          }
          case 18: {
            Cursor = input.ReadString();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///*
  /// TGroupsSelf contains a list of groups a particular user belongs to, and the user's relationsip to each.
  /// </summary>
  public sealed partial class TGroupsSelf : pb::IMessage<TGroupsSelf> {
    private static readonly pb::MessageParser<TGroupsSelf> _parser = new pb::MessageParser<TGroupsSelf>(() => new TGroupsSelf());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<TGroupsSelf> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Nakama.ApiReflection.Descriptor.MessageTypes[29]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TGroupsSelf() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TGroupsSelf(TGroupsSelf other) : this() {
      groupsSelf_ = other.groupsSelf_.Clone();
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TGroupsSelf Clone() {
      return new TGroupsSelf(this);
    }

    /// <summary>Field number for the "groups_self" field.</summary>
    public const int GroupsSelfFieldNumber = 1;
    private static readonly pb::FieldCodec<global::Nakama.TGroupsSelf.Types.GroupSelf> _repeated_groupsSelf_codec
        = pb::FieldCodec.ForMessage(10, global::Nakama.TGroupsSelf.Types.GroupSelf.Parser);
    private readonly pbc::RepeatedField<global::Nakama.TGroupsSelf.Types.GroupSelf> groupsSelf_ = new pbc::RepeatedField<global::Nakama.TGroupsSelf.Types.GroupSelf>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Nakama.TGroupsSelf.Types.GroupSelf> GroupsSelf {
      get { return groupsSelf_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as TGroupsSelf);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(TGroupsSelf other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!groupsSelf_.Equals(other.groupsSelf_)) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= groupsSelf_.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      groupsSelf_.WriteTo(output, _repeated_groupsSelf_codec);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += groupsSelf_.CalculateSize(_repeated_groupsSelf_codec);
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(TGroupsSelf other) {
      if (other == null) {
        return;
      }
      groupsSelf_.Add(other.groupsSelf_);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            groupsSelf_.AddEntriesFrom(input, _repeated_groupsSelf_codec);
            break;
          }
        }
      }
    }

    #region Nested types
    /// <summary>Container for nested types declared in the TGroupsSelf message type.</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static partial class Types {
      public sealed partial class GroupSelf : pb::IMessage<GroupSelf> {
        private static readonly pb::MessageParser<GroupSelf> _parser = new pb::MessageParser<GroupSelf>(() => new GroupSelf());
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<GroupSelf> Parser { get { return _parser; } }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor {
          get { return global::Nakama.TGroupsSelf.Descriptor.NestedTypes[0]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor {
          get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public GroupSelf() {
          OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public GroupSelf(GroupSelf other) : this() {
          Group = other.group_ != null ? other.Group.Clone() : null;
          state_ = other.state_;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public GroupSelf Clone() {
          return new GroupSelf(this);
        }

        /// <summary>Field number for the "group" field.</summary>
        public const int GroupFieldNumber = 1;
        private global::Nakama.Group group_;
        /// <summary>
        //// The core group information.
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public global::Nakama.Group Group {
          get { return group_; }
          set {
            group_ = value;
          }
        }

        /// <summary>Field number for the "state" field.</summary>
        public const int StateFieldNumber = 2;
        private long state_;
        /// <summary>
        //// The user's relationship to the group. One of:
        //// Admin(0): User is an admin for this group.
        //// Member(1): User is a regular member of this group.
        //// Join(2): User is currently waiting to be accepted in this group.
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public long State {
          get { return state_; }
          set {
            state_ = value;
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other) {
          return Equals(other as GroupSelf);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(GroupSelf other) {
          if (ReferenceEquals(other, null)) {
            return false;
          }
          if (ReferenceEquals(other, this)) {
            return true;
          }
          if (!object.Equals(Group, other.Group)) return false;
          if (State != other.State) return false;
          return true;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode() {
          int hash = 1;
          if (group_ != null) hash ^= Group.GetHashCode();
          if (State != 0L) hash ^= State.GetHashCode();
          return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString() {
          return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output) {
          if (group_ != null) {
            output.WriteRawTag(10);
            output.WriteMessage(Group);
          }
          if (State != 0L) {
            output.WriteRawTag(16);
            output.WriteInt64(State);
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize() {
          int size = 0;
          if (group_ != null) {
            size += 1 + pb::CodedOutputStream.ComputeMessageSize(Group);
          }
          if (State != 0L) {
            size += 1 + pb::CodedOutputStream.ComputeInt64Size(State);
          }
          return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(GroupSelf other) {
          if (other == null) {
            return;
          }
          if (other.group_ != null) {
            if (group_ == null) {
              group_ = new global::Nakama.Group();
            }
            Group.MergeFrom(other.Group);
          }
          if (other.State != 0L) {
            State = other.State;
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input) {
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                input.SkipLastField();
                break;
              case 10: {
                if (group_ == null) {
                  group_ = new global::Nakama.Group();
                }
                input.ReadMessage(group_);
                break;
              }
              case 16: {
                State = input.ReadInt64();
                break;
              }
            }
          }
        }

      }

    }
    #endregion

  }

  /// <summary>
  ///*
  /// GroupUser is the core domain type representing a user that belongs to a group and their relationship status with the group.
  /// </summary>
  public sealed partial class GroupUser : pb::IMessage<GroupUser> {
    private static readonly pb::MessageParser<GroupUser> _parser = new pb::MessageParser<GroupUser>(() => new GroupUser());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<GroupUser> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Nakama.ApiReflection.Descriptor.MessageTypes[30]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GroupUser() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GroupUser(GroupUser other) : this() {
      User = other.user_ != null ? other.User.Clone() : null;
      state_ = other.state_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GroupUser Clone() {
      return new GroupUser(this);
    }

    /// <summary>Field number for the "user" field.</summary>
    public const int UserFieldNumber = 1;
    private global::Nakama.User user_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Nakama.User User {
      get { return user_; }
      set {
        user_ = value;
      }
    }

    /// <summary>Field number for the "state" field.</summary>
    public const int StateFieldNumber = 2;
    private long state_;
    /// <summary>
    //// The type of relationship this is. The value can be one of the following:
    //// Admin(0): User is an admin for this group.
    //// Member(1): User is a regular member of this group.
    //// Join(2): User is currently waiting to be accepted in this group.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long State {
      get { return state_; }
      set {
        state_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as GroupUser);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(GroupUser other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(User, other.User)) return false;
      if (State != other.State) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (user_ != null) hash ^= User.GetHashCode();
      if (State != 0L) hash ^= State.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (user_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(User);
      }
      if (State != 0L) {
        output.WriteRawTag(16);
        output.WriteInt64(State);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (user_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(User);
      }
      if (State != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(State);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(GroupUser other) {
      if (other == null) {
        return;
      }
      if (other.user_ != null) {
        if (user_ == null) {
          user_ = new global::Nakama.User();
        }
        User.MergeFrom(other.User);
      }
      if (other.State != 0L) {
        State = other.State;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            if (user_ == null) {
              user_ = new global::Nakama.User();
            }
            input.ReadMessage(user_);
            break;
          }
          case 16: {
            State = input.ReadInt64();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///*
  /// TGroupsList fetches list of users in the given group.
  ///
  /// @returns TGroupUsers
  /// </summary>
  public sealed partial class TGroupUsersList : pb::IMessage<TGroupUsersList> {
    private static readonly pb::MessageParser<TGroupUsersList> _parser = new pb::MessageParser<TGroupUsersList>(() => new TGroupUsersList());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<TGroupUsersList> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Nakama.ApiReflection.Descriptor.MessageTypes[31]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TGroupUsersList() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TGroupUsersList(TGroupUsersList other) : this() {
      groupId_ = other.groupId_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TGroupUsersList Clone() {
      return new TGroupUsersList(this);
    }

    /// <summary>Field number for the "group_id" field.</summary>
    public const int GroupIdFieldNumber = 1;
    private string groupId_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string GroupId {
      get { return groupId_; }
      set {
        groupId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as TGroupUsersList);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(TGroupUsersList other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (GroupId != other.GroupId) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (GroupId.Length != 0) hash ^= GroupId.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (GroupId.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(GroupId);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (GroupId.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(GroupId);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(TGroupUsersList other) {
      if (other == null) {
        return;
      }
      if (other.GroupId.Length != 0) {
        GroupId = other.GroupId;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            GroupId = input.ReadString();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///*
  /// TGroupUsers contains all users and their relationship in a group.
  /// </summary>
  public sealed partial class TGroupUsers : pb::IMessage<TGroupUsers> {
    private static readonly pb::MessageParser<TGroupUsers> _parser = new pb::MessageParser<TGroupUsers>(() => new TGroupUsers());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<TGroupUsers> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Nakama.ApiReflection.Descriptor.MessageTypes[32]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TGroupUsers() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TGroupUsers(TGroupUsers other) : this() {
      users_ = other.users_.Clone();
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TGroupUsers Clone() {
      return new TGroupUsers(this);
    }

    /// <summary>Field number for the "users" field.</summary>
    public const int UsersFieldNumber = 1;
    private static readonly pb::FieldCodec<global::Nakama.GroupUser> _repeated_users_codec
        = pb::FieldCodec.ForMessage(10, global::Nakama.GroupUser.Parser);
    private readonly pbc::RepeatedField<global::Nakama.GroupUser> users_ = new pbc::RepeatedField<global::Nakama.GroupUser>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Nakama.GroupUser> Users {
      get { return users_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as TGroupUsers);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(TGroupUsers other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!users_.Equals(other.users_)) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= users_.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      users_.WriteTo(output, _repeated_users_codec);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += users_.CalculateSize(_repeated_users_codec);
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(TGroupUsers other) {
      if (other == null) {
        return;
      }
      users_.Add(other.users_);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            users_.AddEntriesFrom(input, _repeated_users_codec);
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///*
  /// TGroupsJoin adds the currently connected user to the groups below.
  /// If the group is private, they are added to a waiting queue until a group admin accepts or reject the request.
  ///
  /// NOTE: The server only processes the first item of the list, and will ignore and logs a warning message for other items.
  /// </summary>
  public sealed partial class TGroupsJoin : pb::IMessage<TGroupsJoin> {
    private static readonly pb::MessageParser<TGroupsJoin> _parser = new pb::MessageParser<TGroupsJoin>(() => new TGroupsJoin());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<TGroupsJoin> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Nakama.ApiReflection.Descriptor.MessageTypes[33]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TGroupsJoin() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TGroupsJoin(TGroupsJoin other) : this() {
      groupIds_ = other.groupIds_.Clone();
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TGroupsJoin Clone() {
      return new TGroupsJoin(this);
    }

    /// <summary>Field number for the "group_ids" field.</summary>
    public const int GroupIdsFieldNumber = 1;
    private static readonly pb::FieldCodec<string> _repeated_groupIds_codec
        = pb::FieldCodec.ForString(10);
    private readonly pbc::RepeatedField<string> groupIds_ = new pbc::RepeatedField<string>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<string> GroupIds {
      get { return groupIds_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as TGroupsJoin);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(TGroupsJoin other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!groupIds_.Equals(other.groupIds_)) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= groupIds_.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      groupIds_.WriteTo(output, _repeated_groupIds_codec);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += groupIds_.CalculateSize(_repeated_groupIds_codec);
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(TGroupsJoin other) {
      if (other == null) {
        return;
      }
      groupIds_.Add(other.groupIds_);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            groupIds_.AddEntriesFrom(input, _repeated_groupIds_codec);
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///*
  /// TGroupsLeave removes the currently connected user from group below.
  /// The user won't be able to leave if they are last admin, instead delete the group.
  ///
  /// NOTE: The server only processes the first item of the list, and will ignore and logs a warning message for other items.
  /// </summary>
  public sealed partial class TGroupsLeave : pb::IMessage<TGroupsLeave> {
    private static readonly pb::MessageParser<TGroupsLeave> _parser = new pb::MessageParser<TGroupsLeave>(() => new TGroupsLeave());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<TGroupsLeave> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Nakama.ApiReflection.Descriptor.MessageTypes[34]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TGroupsLeave() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TGroupsLeave(TGroupsLeave other) : this() {
      groupIds_ = other.groupIds_.Clone();
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TGroupsLeave Clone() {
      return new TGroupsLeave(this);
    }

    /// <summary>Field number for the "group_ids" field.</summary>
    public const int GroupIdsFieldNumber = 1;
    private static readonly pb::FieldCodec<string> _repeated_groupIds_codec
        = pb::FieldCodec.ForString(10);
    private readonly pbc::RepeatedField<string> groupIds_ = new pbc::RepeatedField<string>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<string> GroupIds {
      get { return groupIds_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as TGroupsLeave);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(TGroupsLeave other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!groupIds_.Equals(other.groupIds_)) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= groupIds_.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      groupIds_.WriteTo(output, _repeated_groupIds_codec);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += groupIds_.CalculateSize(_repeated_groupIds_codec);
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(TGroupsLeave other) {
      if (other == null) {
        return;
      }
      groupIds_.Add(other.groupIds_);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            groupIds_.AddEntriesFrom(input, _repeated_groupIds_codec);
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///*
  /// TGroupUsersAdd adds a list of users to a list of groups by the currently connected user.
  /// The current user must be an admin of *ALL* groups otherwise the request fails.
  /// This is also the way to accept a group join request.
  ///
  /// NOTE: The server only processes the first item of the list, and will ignore and logs a warning message for other items.
  /// </summary>
  public sealed partial class TGroupUsersAdd : pb::IMessage<TGroupUsersAdd> {
    private static readonly pb::MessageParser<TGroupUsersAdd> _parser = new pb::MessageParser<TGroupUsersAdd>(() => new TGroupUsersAdd());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<TGroupUsersAdd> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Nakama.ApiReflection.Descriptor.MessageTypes[35]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TGroupUsersAdd() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TGroupUsersAdd(TGroupUsersAdd other) : this() {
      groupUsers_ = other.groupUsers_.Clone();
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TGroupUsersAdd Clone() {
      return new TGroupUsersAdd(this);
    }

    /// <summary>Field number for the "group_users" field.</summary>
    public const int GroupUsersFieldNumber = 1;
    private static readonly pb::FieldCodec<global::Nakama.TGroupUsersAdd.Types.GroupUserAdd> _repeated_groupUsers_codec
        = pb::FieldCodec.ForMessage(10, global::Nakama.TGroupUsersAdd.Types.GroupUserAdd.Parser);
    private readonly pbc::RepeatedField<global::Nakama.TGroupUsersAdd.Types.GroupUserAdd> groupUsers_ = new pbc::RepeatedField<global::Nakama.TGroupUsersAdd.Types.GroupUserAdd>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Nakama.TGroupUsersAdd.Types.GroupUserAdd> GroupUsers {
      get { return groupUsers_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as TGroupUsersAdd);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(TGroupUsersAdd other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!groupUsers_.Equals(other.groupUsers_)) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= groupUsers_.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      groupUsers_.WriteTo(output, _repeated_groupUsers_codec);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += groupUsers_.CalculateSize(_repeated_groupUsers_codec);
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(TGroupUsersAdd other) {
      if (other == null) {
        return;
      }
      groupUsers_.Add(other.groupUsers_);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            groupUsers_.AddEntriesFrom(input, _repeated_groupUsers_codec);
            break;
          }
        }
      }
    }

    #region Nested types
    /// <summary>Container for nested types declared in the TGroupUsersAdd message type.</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static partial class Types {
      public sealed partial class GroupUserAdd : pb::IMessage<GroupUserAdd> {
        private static readonly pb::MessageParser<GroupUserAdd> _parser = new pb::MessageParser<GroupUserAdd>(() => new GroupUserAdd());
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<GroupUserAdd> Parser { get { return _parser; } }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor {
          get { return global::Nakama.TGroupUsersAdd.Descriptor.NestedTypes[0]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor {
          get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public GroupUserAdd() {
          OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public GroupUserAdd(GroupUserAdd other) : this() {
          groupId_ = other.groupId_;
          userId_ = other.userId_;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public GroupUserAdd Clone() {
          return new GroupUserAdd(this);
        }

        /// <summary>Field number for the "group_id" field.</summary>
        public const int GroupIdFieldNumber = 1;
        private string groupId_ = "";
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public string GroupId {
          get { return groupId_; }
          set {
            groupId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
          }
        }

        /// <summary>Field number for the "user_id" field.</summary>
        public const int UserIdFieldNumber = 2;
        private string userId_ = "";
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public string UserId {
          get { return userId_; }
          set {
            userId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other) {
          return Equals(other as GroupUserAdd);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(GroupUserAdd other) {
          if (ReferenceEquals(other, null)) {
            return false;
          }
          if (ReferenceEquals(other, this)) {
            return true;
          }
          if (GroupId != other.GroupId) return false;
          if (UserId != other.UserId) return false;
          return true;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode() {
          int hash = 1;
          if (GroupId.Length != 0) hash ^= GroupId.GetHashCode();
          if (UserId.Length != 0) hash ^= UserId.GetHashCode();
          return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString() {
          return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output) {
          if (GroupId.Length != 0) {
            output.WriteRawTag(10);
            output.WriteString(GroupId);
          }
          if (UserId.Length != 0) {
            output.WriteRawTag(18);
            output.WriteString(UserId);
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize() {
          int size = 0;
          if (GroupId.Length != 0) {
            size += 1 + pb::CodedOutputStream.ComputeStringSize(GroupId);
          }
          if (UserId.Length != 0) {
            size += 1 + pb::CodedOutputStream.ComputeStringSize(UserId);
          }
          return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(GroupUserAdd other) {
          if (other == null) {
            return;
          }
          if (other.GroupId.Length != 0) {
            GroupId = other.GroupId;
          }
          if (other.UserId.Length != 0) {
            UserId = other.UserId;
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input) {
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                input.SkipLastField();
                break;
              case 10: {
                GroupId = input.ReadString();
                break;
              }
              case 18: {
                UserId = input.ReadString();
                break;
              }
            }
          }
        }

      }

    }
    #endregion

  }

  /// <summary>
  ///*
  /// TGroupUsersKick removes a list of users from a list of groups by the currently connected user.
  /// The current user must be an admin of *ALL* groups otherwise the request fails.
  /// This is also the way to reject a group join request.
  ///
  /// NOTE: The server only processes the first item of the list, and will ignore and logs a warning message for other items.
  /// </summary>
  public sealed partial class TGroupUsersKick : pb::IMessage<TGroupUsersKick> {
    private static readonly pb::MessageParser<TGroupUsersKick> _parser = new pb::MessageParser<TGroupUsersKick>(() => new TGroupUsersKick());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<TGroupUsersKick> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Nakama.ApiReflection.Descriptor.MessageTypes[36]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TGroupUsersKick() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TGroupUsersKick(TGroupUsersKick other) : this() {
      groupUsers_ = other.groupUsers_.Clone();
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TGroupUsersKick Clone() {
      return new TGroupUsersKick(this);
    }

    /// <summary>Field number for the "group_users" field.</summary>
    public const int GroupUsersFieldNumber = 1;
    private static readonly pb::FieldCodec<global::Nakama.TGroupUsersKick.Types.GroupUserKick> _repeated_groupUsers_codec
        = pb::FieldCodec.ForMessage(10, global::Nakama.TGroupUsersKick.Types.GroupUserKick.Parser);
    private readonly pbc::RepeatedField<global::Nakama.TGroupUsersKick.Types.GroupUserKick> groupUsers_ = new pbc::RepeatedField<global::Nakama.TGroupUsersKick.Types.GroupUserKick>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Nakama.TGroupUsersKick.Types.GroupUserKick> GroupUsers {
      get { return groupUsers_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as TGroupUsersKick);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(TGroupUsersKick other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!groupUsers_.Equals(other.groupUsers_)) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= groupUsers_.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      groupUsers_.WriteTo(output, _repeated_groupUsers_codec);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += groupUsers_.CalculateSize(_repeated_groupUsers_codec);
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(TGroupUsersKick other) {
      if (other == null) {
        return;
      }
      groupUsers_.Add(other.groupUsers_);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            groupUsers_.AddEntriesFrom(input, _repeated_groupUsers_codec);
            break;
          }
        }
      }
    }

    #region Nested types
    /// <summary>Container for nested types declared in the TGroupUsersKick message type.</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static partial class Types {
      public sealed partial class GroupUserKick : pb::IMessage<GroupUserKick> {
        private static readonly pb::MessageParser<GroupUserKick> _parser = new pb::MessageParser<GroupUserKick>(() => new GroupUserKick());
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<GroupUserKick> Parser { get { return _parser; } }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor {
          get { return global::Nakama.TGroupUsersKick.Descriptor.NestedTypes[0]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor {
          get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public GroupUserKick() {
          OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public GroupUserKick(GroupUserKick other) : this() {
          groupId_ = other.groupId_;
          userId_ = other.userId_;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public GroupUserKick Clone() {
          return new GroupUserKick(this);
        }

        /// <summary>Field number for the "group_id" field.</summary>
        public const int GroupIdFieldNumber = 1;
        private string groupId_ = "";
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public string GroupId {
          get { return groupId_; }
          set {
            groupId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
          }
        }

        /// <summary>Field number for the "user_id" field.</summary>
        public const int UserIdFieldNumber = 2;
        private string userId_ = "";
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public string UserId {
          get { return userId_; }
          set {
            userId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other) {
          return Equals(other as GroupUserKick);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(GroupUserKick other) {
          if (ReferenceEquals(other, null)) {
            return false;
          }
          if (ReferenceEquals(other, this)) {
            return true;
          }
          if (GroupId != other.GroupId) return false;
          if (UserId != other.UserId) return false;
          return true;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode() {
          int hash = 1;
          if (GroupId.Length != 0) hash ^= GroupId.GetHashCode();
          if (UserId.Length != 0) hash ^= UserId.GetHashCode();
          return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString() {
          return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output) {
          if (GroupId.Length != 0) {
            output.WriteRawTag(10);
            output.WriteString(GroupId);
          }
          if (UserId.Length != 0) {
            output.WriteRawTag(18);
            output.WriteString(UserId);
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize() {
          int size = 0;
          if (GroupId.Length != 0) {
            size += 1 + pb::CodedOutputStream.ComputeStringSize(GroupId);
          }
          if (UserId.Length != 0) {
            size += 1 + pb::CodedOutputStream.ComputeStringSize(UserId);
          }
          return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(GroupUserKick other) {
          if (other == null) {
            return;
          }
          if (other.GroupId.Length != 0) {
            GroupId = other.GroupId;
          }
          if (other.UserId.Length != 0) {
            UserId = other.UserId;
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input) {
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                input.SkipLastField();
                break;
              case 10: {
                GroupId = input.ReadString();
                break;
              }
              case 18: {
                UserId = input.ReadString();
                break;
              }
            }
          }
        }

      }

    }
    #endregion

  }

  /// <summary>
  ///*
  /// TGroupUsersPromote updates a list of regular users to have group admin priviliges for a list of groups by the currently connected user.
  /// The current user must be an admin of *ALL* groups otherwise the request fails.
  ///
  /// NOTE: The server only processes the first item of the list, and will ignore and logs a warning message for other items.
  /// </summary>
  public sealed partial class TGroupUsersPromote : pb::IMessage<TGroupUsersPromote> {
    private static readonly pb::MessageParser<TGroupUsersPromote> _parser = new pb::MessageParser<TGroupUsersPromote>(() => new TGroupUsersPromote());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<TGroupUsersPromote> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Nakama.ApiReflection.Descriptor.MessageTypes[37]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TGroupUsersPromote() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TGroupUsersPromote(TGroupUsersPromote other) : this() {
      groupUsers_ = other.groupUsers_.Clone();
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TGroupUsersPromote Clone() {
      return new TGroupUsersPromote(this);
    }

    /// <summary>Field number for the "group_users" field.</summary>
    public const int GroupUsersFieldNumber = 1;
    private static readonly pb::FieldCodec<global::Nakama.TGroupUsersPromote.Types.GroupUserPromote> _repeated_groupUsers_codec
        = pb::FieldCodec.ForMessage(10, global::Nakama.TGroupUsersPromote.Types.GroupUserPromote.Parser);
    private readonly pbc::RepeatedField<global::Nakama.TGroupUsersPromote.Types.GroupUserPromote> groupUsers_ = new pbc::RepeatedField<global::Nakama.TGroupUsersPromote.Types.GroupUserPromote>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Nakama.TGroupUsersPromote.Types.GroupUserPromote> GroupUsers {
      get { return groupUsers_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as TGroupUsersPromote);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(TGroupUsersPromote other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!groupUsers_.Equals(other.groupUsers_)) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= groupUsers_.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      groupUsers_.WriteTo(output, _repeated_groupUsers_codec);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += groupUsers_.CalculateSize(_repeated_groupUsers_codec);
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(TGroupUsersPromote other) {
      if (other == null) {
        return;
      }
      groupUsers_.Add(other.groupUsers_);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            groupUsers_.AddEntriesFrom(input, _repeated_groupUsers_codec);
            break;
          }
        }
      }
    }

    #region Nested types
    /// <summary>Container for nested types declared in the TGroupUsersPromote message type.</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static partial class Types {
      public sealed partial class GroupUserPromote : pb::IMessage<GroupUserPromote> {
        private static readonly pb::MessageParser<GroupUserPromote> _parser = new pb::MessageParser<GroupUserPromote>(() => new GroupUserPromote());
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<GroupUserPromote> Parser { get { return _parser; } }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor {
          get { return global::Nakama.TGroupUsersPromote.Descriptor.NestedTypes[0]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor {
          get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public GroupUserPromote() {
          OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public GroupUserPromote(GroupUserPromote other) : this() {
          groupId_ = other.groupId_;
          userId_ = other.userId_;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public GroupUserPromote Clone() {
          return new GroupUserPromote(this);
        }

        /// <summary>Field number for the "group_id" field.</summary>
        public const int GroupIdFieldNumber = 1;
        private string groupId_ = "";
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public string GroupId {
          get { return groupId_; }
          set {
            groupId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
          }
        }

        /// <summary>Field number for the "user_id" field.</summary>
        public const int UserIdFieldNumber = 2;
        private string userId_ = "";
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public string UserId {
          get { return userId_; }
          set {
            userId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other) {
          return Equals(other as GroupUserPromote);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(GroupUserPromote other) {
          if (ReferenceEquals(other, null)) {
            return false;
          }
          if (ReferenceEquals(other, this)) {
            return true;
          }
          if (GroupId != other.GroupId) return false;
          if (UserId != other.UserId) return false;
          return true;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode() {
          int hash = 1;
          if (GroupId.Length != 0) hash ^= GroupId.GetHashCode();
          if (UserId.Length != 0) hash ^= UserId.GetHashCode();
          return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString() {
          return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output) {
          if (GroupId.Length != 0) {
            output.WriteRawTag(10);
            output.WriteString(GroupId);
          }
          if (UserId.Length != 0) {
            output.WriteRawTag(18);
            output.WriteString(UserId);
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize() {
          int size = 0;
          if (GroupId.Length != 0) {
            size += 1 + pb::CodedOutputStream.ComputeStringSize(GroupId);
          }
          if (UserId.Length != 0) {
            size += 1 + pb::CodedOutputStream.ComputeStringSize(UserId);
          }
          return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(GroupUserPromote other) {
          if (other == null) {
            return;
          }
          if (other.GroupId.Length != 0) {
            GroupId = other.GroupId;
          }
          if (other.UserId.Length != 0) {
            UserId = other.UserId;
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input) {
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                input.SkipLastField();
                break;
              case 10: {
                GroupId = input.ReadString();
                break;
              }
              case 18: {
                UserId = input.ReadString();
                break;
              }
            }
          }
        }

      }

    }
    #endregion

  }

  /// <summary>
  ///*
  /// TopicId is the core domain type representing a chat topic identifier.
  /// </summary>
  public sealed partial class TopicId : pb::IMessage<TopicId> {
    private static readonly pb::MessageParser<TopicId> _parser = new pb::MessageParser<TopicId>(() => new TopicId());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<TopicId> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Nakama.ApiReflection.Descriptor.MessageTypes[38]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TopicId() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TopicId(TopicId other) : this() {
      switch (other.IdCase) {
        case IdOneofCase.Dm:
          Dm = other.Dm;
          break;
        case IdOneofCase.Room:
          Room = other.Room;
          break;
        case IdOneofCase.GroupId:
          GroupId = other.GroupId;
          break;
      }

    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TopicId Clone() {
      return new TopicId(this);
    }

    /// <summary>Field number for the "dm" field.</summary>
    public const int DmFieldNumber = 1;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Dm {
      get { return idCase_ == IdOneofCase.Dm ? (string) id_ : ""; }
      set {
        id_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
        idCase_ = IdOneofCase.Dm;
      }
    }

    /// <summary>Field number for the "room" field.</summary>
    public const int RoomFieldNumber = 2;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Room {
      get { return idCase_ == IdOneofCase.Room ? (string) id_ : ""; }
      set {
        id_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
        idCase_ = IdOneofCase.Room;
      }
    }

    /// <summary>Field number for the "group_id" field.</summary>
    public const int GroupIdFieldNumber = 3;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string GroupId {
      get { return idCase_ == IdOneofCase.GroupId ? (string) id_ : ""; }
      set {
        id_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
        idCase_ = IdOneofCase.GroupId;
      }
    }

    private object id_;
    /// <summary>Enum of possible cases for the "id" oneof.</summary>
    public enum IdOneofCase {
      None = 0,
      Dm = 1,
      Room = 2,
      GroupId = 3,
    }
    private IdOneofCase idCase_ = IdOneofCase.None;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public IdOneofCase IdCase {
      get { return idCase_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearId() {
      idCase_ = IdOneofCase.None;
      id_ = null;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as TopicId);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(TopicId other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Dm != other.Dm) return false;
      if (Room != other.Room) return false;
      if (GroupId != other.GroupId) return false;
      if (IdCase != other.IdCase) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (idCase_ == IdOneofCase.Dm) hash ^= Dm.GetHashCode();
      if (idCase_ == IdOneofCase.Room) hash ^= Room.GetHashCode();
      if (idCase_ == IdOneofCase.GroupId) hash ^= GroupId.GetHashCode();
      hash ^= (int) idCase_;
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (idCase_ == IdOneofCase.Dm) {
        output.WriteRawTag(10);
        output.WriteString(Dm);
      }
      if (idCase_ == IdOneofCase.Room) {
        output.WriteRawTag(18);
        output.WriteString(Room);
      }
      if (idCase_ == IdOneofCase.GroupId) {
        output.WriteRawTag(26);
        output.WriteString(GroupId);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (idCase_ == IdOneofCase.Dm) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Dm);
      }
      if (idCase_ == IdOneofCase.Room) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Room);
      }
      if (idCase_ == IdOneofCase.GroupId) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(GroupId);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(TopicId other) {
      if (other == null) {
        return;
      }
      switch (other.IdCase) {
        case IdOneofCase.Dm:
          Dm = other.Dm;
          break;
        case IdOneofCase.Room:
          Room = other.Room;
          break;
        case IdOneofCase.GroupId:
          GroupId = other.GroupId;
          break;
      }

    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            Dm = input.ReadString();
            break;
          }
          case 18: {
            Room = input.ReadString();
            break;
          }
          case 26: {
            GroupId = input.ReadString();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///*
  /// UserPresence is the core domain type representing a presense in chat topic.
  /// A user can have multiple presences
  /// </summary>
  public sealed partial class UserPresence : pb::IMessage<UserPresence> {
    private static readonly pb::MessageParser<UserPresence> _parser = new pb::MessageParser<UserPresence>(() => new UserPresence());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<UserPresence> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Nakama.ApiReflection.Descriptor.MessageTypes[39]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public UserPresence() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public UserPresence(UserPresence other) : this() {
      userId_ = other.userId_;
      sessionId_ = other.sessionId_;
      handle_ = other.handle_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public UserPresence Clone() {
      return new UserPresence(this);
    }

    /// <summary>Field number for the "user_id" field.</summary>
    public const int UserIdFieldNumber = 1;
    private string userId_ = "";
    /// <summary>
    //// User ID
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string UserId {
      get { return userId_; }
      set {
        userId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "session_id" field.</summary>
    public const int SessionIdFieldNumber = 2;
    private string sessionId_ = "";
    /// <summary>
    //// Session ID
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string SessionId {
      get { return sessionId_; }
      set {
        sessionId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "handle" field.</summary>
    public const int HandleFieldNumber = 3;
    private string handle_ = "";
    /// <summary>
    //// User handle
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Handle {
      get { return handle_; }
      set {
        handle_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as UserPresence);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(UserPresence other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (UserId != other.UserId) return false;
      if (SessionId != other.SessionId) return false;
      if (Handle != other.Handle) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (UserId.Length != 0) hash ^= UserId.GetHashCode();
      if (SessionId.Length != 0) hash ^= SessionId.GetHashCode();
      if (Handle.Length != 0) hash ^= Handle.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (UserId.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(UserId);
      }
      if (SessionId.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(SessionId);
      }
      if (Handle.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(Handle);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (UserId.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(UserId);
      }
      if (SessionId.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(SessionId);
      }
      if (Handle.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Handle);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(UserPresence other) {
      if (other == null) {
        return;
      }
      if (other.UserId.Length != 0) {
        UserId = other.UserId;
      }
      if (other.SessionId.Length != 0) {
        SessionId = other.SessionId;
      }
      if (other.Handle.Length != 0) {
        Handle = other.Handle;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            UserId = input.ReadString();
            break;
          }
          case 18: {
            SessionId = input.ReadString();
            break;
          }
          case 26: {
            Handle = input.ReadString();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///*
  /// TTopicsJoin adds the current user's session to a chat topic.
  ///
  /// @returns TTopics
  ///
  /// NOTE: The server only processes the first item of the list, and will ignore and logs a warning message for other items.
  /// </summary>
  public sealed partial class TTopicsJoin : pb::IMessage<TTopicsJoin> {
    private static readonly pb::MessageParser<TTopicsJoin> _parser = new pb::MessageParser<TTopicsJoin>(() => new TTopicsJoin());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<TTopicsJoin> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Nakama.ApiReflection.Descriptor.MessageTypes[40]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TTopicsJoin() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TTopicsJoin(TTopicsJoin other) : this() {
      joins_ = other.joins_.Clone();
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TTopicsJoin Clone() {
      return new TTopicsJoin(this);
    }

    /// <summary>Field number for the "joins" field.</summary>
    public const int JoinsFieldNumber = 1;
    private static readonly pb::FieldCodec<global::Nakama.TTopicsJoin.Types.TopicJoin> _repeated_joins_codec
        = pb::FieldCodec.ForMessage(10, global::Nakama.TTopicsJoin.Types.TopicJoin.Parser);
    private readonly pbc::RepeatedField<global::Nakama.TTopicsJoin.Types.TopicJoin> joins_ = new pbc::RepeatedField<global::Nakama.TTopicsJoin.Types.TopicJoin>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Nakama.TTopicsJoin.Types.TopicJoin> Joins {
      get { return joins_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as TTopicsJoin);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(TTopicsJoin other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!joins_.Equals(other.joins_)) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= joins_.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      joins_.WriteTo(output, _repeated_joins_codec);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += joins_.CalculateSize(_repeated_joins_codec);
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(TTopicsJoin other) {
      if (other == null) {
        return;
      }
      joins_.Add(other.joins_);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            joins_.AddEntriesFrom(input, _repeated_joins_codec);
            break;
          }
        }
      }
    }

    #region Nested types
    /// <summary>Container for nested types declared in the TTopicsJoin message type.</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static partial class Types {
      public sealed partial class TopicJoin : pb::IMessage<TopicJoin> {
        private static readonly pb::MessageParser<TopicJoin> _parser = new pb::MessageParser<TopicJoin>(() => new TopicJoin());
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<TopicJoin> Parser { get { return _parser; } }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor {
          get { return global::Nakama.TTopicsJoin.Descriptor.NestedTypes[0]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor {
          get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public TopicJoin() {
          OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public TopicJoin(TopicJoin other) : this() {
          switch (other.IdCase) {
            case IdOneofCase.UserId:
              UserId = other.UserId;
              break;
            case IdOneofCase.Room:
              Room = other.Room;
              break;
            case IdOneofCase.GroupId:
              GroupId = other.GroupId;
              break;
          }

        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public TopicJoin Clone() {
          return new TopicJoin(this);
        }

        /// <summary>Field number for the "user_id" field.</summary>
        public const int UserIdFieldNumber = 1;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public string UserId {
          get { return idCase_ == IdOneofCase.UserId ? (string) id_ : ""; }
          set {
            id_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
            idCase_ = IdOneofCase.UserId;
          }
        }

        /// <summary>Field number for the "room" field.</summary>
        public const int RoomFieldNumber = 2;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public string Room {
          get { return idCase_ == IdOneofCase.Room ? (string) id_ : ""; }
          set {
            id_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
            idCase_ = IdOneofCase.Room;
          }
        }

        /// <summary>Field number for the "group_id" field.</summary>
        public const int GroupIdFieldNumber = 3;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public string GroupId {
          get { return idCase_ == IdOneofCase.GroupId ? (string) id_ : ""; }
          set {
            id_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
            idCase_ = IdOneofCase.GroupId;
          }
        }

        private object id_;
        /// <summary>Enum of possible cases for the "id" oneof.</summary>
        public enum IdOneofCase {
          None = 0,
          UserId = 1,
          Room = 2,
          GroupId = 3,
        }
        private IdOneofCase idCase_ = IdOneofCase.None;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public IdOneofCase IdCase {
          get { return idCase_; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void ClearId() {
          idCase_ = IdOneofCase.None;
          id_ = null;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other) {
          return Equals(other as TopicJoin);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(TopicJoin other) {
          if (ReferenceEquals(other, null)) {
            return false;
          }
          if (ReferenceEquals(other, this)) {
            return true;
          }
          if (UserId != other.UserId) return false;
          if (Room != other.Room) return false;
          if (GroupId != other.GroupId) return false;
          if (IdCase != other.IdCase) return false;
          return true;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode() {
          int hash = 1;
          if (idCase_ == IdOneofCase.UserId) hash ^= UserId.GetHashCode();
          if (idCase_ == IdOneofCase.Room) hash ^= Room.GetHashCode();
          if (idCase_ == IdOneofCase.GroupId) hash ^= GroupId.GetHashCode();
          hash ^= (int) idCase_;
          return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString() {
          return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output) {
          if (idCase_ == IdOneofCase.UserId) {
            output.WriteRawTag(10);
            output.WriteString(UserId);
          }
          if (idCase_ == IdOneofCase.Room) {
            output.WriteRawTag(18);
            output.WriteString(Room);
          }
          if (idCase_ == IdOneofCase.GroupId) {
            output.WriteRawTag(26);
            output.WriteString(GroupId);
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize() {
          int size = 0;
          if (idCase_ == IdOneofCase.UserId) {
            size += 1 + pb::CodedOutputStream.ComputeStringSize(UserId);
          }
          if (idCase_ == IdOneofCase.Room) {
            size += 1 + pb::CodedOutputStream.ComputeStringSize(Room);
          }
          if (idCase_ == IdOneofCase.GroupId) {
            size += 1 + pb::CodedOutputStream.ComputeStringSize(GroupId);
          }
          return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(TopicJoin other) {
          if (other == null) {
            return;
          }
          switch (other.IdCase) {
            case IdOneofCase.UserId:
              UserId = other.UserId;
              break;
            case IdOneofCase.Room:
              Room = other.Room;
              break;
            case IdOneofCase.GroupId:
              GroupId = other.GroupId;
              break;
          }

        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input) {
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                input.SkipLastField();
                break;
              case 10: {
                UserId = input.ReadString();
                break;
              }
              case 18: {
                Room = input.ReadString();
                break;
              }
              case 26: {
                GroupId = input.ReadString();
                break;
              }
            }
          }
        }

      }

    }
    #endregion

  }

  /// <summary>
  ///*
  /// List of new topics that the session has joined.
  /// </summary>
  public sealed partial class TTopics : pb::IMessage<TTopics> {
    private static readonly pb::MessageParser<TTopics> _parser = new pb::MessageParser<TTopics>(() => new TTopics());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<TTopics> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Nakama.ApiReflection.Descriptor.MessageTypes[41]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TTopics() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TTopics(TTopics other) : this() {
      topics_ = other.topics_.Clone();
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TTopics Clone() {
      return new TTopics(this);
    }

    /// <summary>Field number for the "topics" field.</summary>
    public const int TopicsFieldNumber = 1;
    private static readonly pb::FieldCodec<global::Nakama.TTopics.Types.Topic> _repeated_topics_codec
        = pb::FieldCodec.ForMessage(10, global::Nakama.TTopics.Types.Topic.Parser);
    private readonly pbc::RepeatedField<global::Nakama.TTopics.Types.Topic> topics_ = new pbc::RepeatedField<global::Nakama.TTopics.Types.Topic>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Nakama.TTopics.Types.Topic> Topics {
      get { return topics_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as TTopics);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(TTopics other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!topics_.Equals(other.topics_)) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= topics_.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      topics_.WriteTo(output, _repeated_topics_codec);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += topics_.CalculateSize(_repeated_topics_codec);
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(TTopics other) {
      if (other == null) {
        return;
      }
      topics_.Add(other.topics_);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            topics_.AddEntriesFrom(input, _repeated_topics_codec);
            break;
          }
        }
      }
    }

    #region Nested types
    /// <summary>Container for nested types declared in the TTopics message type.</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static partial class Types {
      public sealed partial class Topic : pb::IMessage<Topic> {
        private static readonly pb::MessageParser<Topic> _parser = new pb::MessageParser<Topic>(() => new Topic());
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<Topic> Parser { get { return _parser; } }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor {
          get { return global::Nakama.TTopics.Descriptor.NestedTypes[0]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor {
          get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public Topic() {
          OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public Topic(Topic other) : this() {
          Topic_ = other.topic_ != null ? other.Topic_.Clone() : null;
          presences_ = other.presences_.Clone();
          Self = other.self_ != null ? other.Self.Clone() : null;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public Topic Clone() {
          return new Topic(this);
        }

        /// <summary>Field number for the "topic" field.</summary>
        public const int Topic_FieldNumber = 1;
        private global::Nakama.TopicId topic_;
        /// <summary>
        //// Chat topics
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public global::Nakama.TopicId Topic_ {
          get { return topic_; }
          set {
            topic_ = value;
          }
        }

        /// <summary>Field number for the "presences" field.</summary>
        public const int PresencesFieldNumber = 2;
        private static readonly pb::FieldCodec<global::Nakama.UserPresence> _repeated_presences_codec
            = pb::FieldCodec.ForMessage(18, global::Nakama.UserPresence.Parser);
        private readonly pbc::RepeatedField<global::Nakama.UserPresence> presences_ = new pbc::RepeatedField<global::Nakama.UserPresence>();
        /// <summary>
        //// List of chat presences in the topic
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public pbc::RepeatedField<global::Nakama.UserPresence> Presences {
          get { return presences_; }
        }

        /// <summary>Field number for the "self" field.</summary>
        public const int SelfFieldNumber = 3;
        private global::Nakama.UserPresence self_;
        /// <summary>
        //// Current user's chat presence
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public global::Nakama.UserPresence Self {
          get { return self_; }
          set {
            self_ = value;
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other) {
          return Equals(other as Topic);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(Topic other) {
          if (ReferenceEquals(other, null)) {
            return false;
          }
          if (ReferenceEquals(other, this)) {
            return true;
          }
          if (!object.Equals(Topic_, other.Topic_)) return false;
          if(!presences_.Equals(other.presences_)) return false;
          if (!object.Equals(Self, other.Self)) return false;
          return true;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode() {
          int hash = 1;
          if (topic_ != null) hash ^= Topic_.GetHashCode();
          hash ^= presences_.GetHashCode();
          if (self_ != null) hash ^= Self.GetHashCode();
          return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString() {
          return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output) {
          if (topic_ != null) {
            output.WriteRawTag(10);
            output.WriteMessage(Topic_);
          }
          presences_.WriteTo(output, _repeated_presences_codec);
          if (self_ != null) {
            output.WriteRawTag(26);
            output.WriteMessage(Self);
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize() {
          int size = 0;
          if (topic_ != null) {
            size += 1 + pb::CodedOutputStream.ComputeMessageSize(Topic_);
          }
          size += presences_.CalculateSize(_repeated_presences_codec);
          if (self_ != null) {
            size += 1 + pb::CodedOutputStream.ComputeMessageSize(Self);
          }
          return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(Topic other) {
          if (other == null) {
            return;
          }
          if (other.topic_ != null) {
            if (topic_ == null) {
              topic_ = new global::Nakama.TopicId();
            }
            Topic_.MergeFrom(other.Topic_);
          }
          presences_.Add(other.presences_);
          if (other.self_ != null) {
            if (self_ == null) {
              self_ = new global::Nakama.UserPresence();
            }
            Self.MergeFrom(other.Self);
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input) {
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                input.SkipLastField();
                break;
              case 10: {
                if (topic_ == null) {
                  topic_ = new global::Nakama.TopicId();
                }
                input.ReadMessage(topic_);
                break;
              }
              case 18: {
                presences_.AddEntriesFrom(input, _repeated_presences_codec);
                break;
              }
              case 26: {
                if (self_ == null) {
                  self_ = new global::Nakama.UserPresence();
                }
                input.ReadMessage(self_);
                break;
              }
            }
          }
        }

      }

    }
    #endregion

  }

  /// <summary>
  ///*
  /// TTopicsLeave removes the current user's session from the chat topic.
  ///
  /// NOTE: The server only processes the first item of the list, and will ignore and logs a warning message for other items.
  /// </summary>
  public sealed partial class TTopicsLeave : pb::IMessage<TTopicsLeave> {
    private static readonly pb::MessageParser<TTopicsLeave> _parser = new pb::MessageParser<TTopicsLeave>(() => new TTopicsLeave());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<TTopicsLeave> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Nakama.ApiReflection.Descriptor.MessageTypes[42]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TTopicsLeave() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TTopicsLeave(TTopicsLeave other) : this() {
      topics_ = other.topics_.Clone();
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TTopicsLeave Clone() {
      return new TTopicsLeave(this);
    }

    /// <summary>Field number for the "topics" field.</summary>
    public const int TopicsFieldNumber = 1;
    private static readonly pb::FieldCodec<global::Nakama.TopicId> _repeated_topics_codec
        = pb::FieldCodec.ForMessage(10, global::Nakama.TopicId.Parser);
    private readonly pbc::RepeatedField<global::Nakama.TopicId> topics_ = new pbc::RepeatedField<global::Nakama.TopicId>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Nakama.TopicId> Topics {
      get { return topics_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as TTopicsLeave);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(TTopicsLeave other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!topics_.Equals(other.topics_)) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= topics_.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      topics_.WriteTo(output, _repeated_topics_codec);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += topics_.CalculateSize(_repeated_topics_codec);
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(TTopicsLeave other) {
      if (other == null) {
        return;
      }
      topics_.Add(other.topics_);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            topics_.AddEntriesFrom(input, _repeated_topics_codec);
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///*
  /// TTopicMessageSend sends a message to the topic
  /// </summary>
  public sealed partial class TTopicMessageSend : pb::IMessage<TTopicMessageSend> {
    private static readonly pb::MessageParser<TTopicMessageSend> _parser = new pb::MessageParser<TTopicMessageSend>(() => new TTopicMessageSend());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<TTopicMessageSend> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Nakama.ApiReflection.Descriptor.MessageTypes[43]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TTopicMessageSend() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TTopicMessageSend(TTopicMessageSend other) : this() {
      Topic = other.topic_ != null ? other.Topic.Clone() : null;
      data_ = other.data_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TTopicMessageSend Clone() {
      return new TTopicMessageSend(this);
    }

    /// <summary>Field number for the "topic" field.</summary>
    public const int TopicFieldNumber = 1;
    private global::Nakama.TopicId topic_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Nakama.TopicId Topic {
      get { return topic_; }
      set {
        topic_ = value;
      }
    }

    /// <summary>Field number for the "data" field.</summary>
    public const int DataFieldNumber = 2;
    private string data_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Data {
      get { return data_; }
      set {
        data_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as TTopicMessageSend);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(TTopicMessageSend other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(Topic, other.Topic)) return false;
      if (Data != other.Data) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (topic_ != null) hash ^= Topic.GetHashCode();
      if (Data.Length != 0) hash ^= Data.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (topic_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(Topic);
      }
      if (Data.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(Data);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (topic_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Topic);
      }
      if (Data.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Data);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(TTopicMessageSend other) {
      if (other == null) {
        return;
      }
      if (other.topic_ != null) {
        if (topic_ == null) {
          topic_ = new global::Nakama.TopicId();
        }
        Topic.MergeFrom(other.Topic);
      }
      if (other.Data.Length != 0) {
        Data = other.Data;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            if (topic_ == null) {
              topic_ = new global::Nakama.TopicId();
            }
            input.ReadMessage(topic_);
            break;
          }
          case 18: {
            Data = input.ReadString();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///*
  /// TTopicMessageAck sends an ack message to the topic
  /// </summary>
  public sealed partial class TTopicMessageAck : pb::IMessage<TTopicMessageAck> {
    private static readonly pb::MessageParser<TTopicMessageAck> _parser = new pb::MessageParser<TTopicMessageAck>(() => new TTopicMessageAck());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<TTopicMessageAck> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Nakama.ApiReflection.Descriptor.MessageTypes[44]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TTopicMessageAck() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TTopicMessageAck(TTopicMessageAck other) : this() {
      messageId_ = other.messageId_;
      createdAt_ = other.createdAt_;
      expiresAt_ = other.expiresAt_;
      handle_ = other.handle_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TTopicMessageAck Clone() {
      return new TTopicMessageAck(this);
    }

    /// <summary>Field number for the "message_id" field.</summary>
    public const int MessageIdFieldNumber = 1;
    private string messageId_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string MessageId {
      get { return messageId_; }
      set {
        messageId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "created_at" field.</summary>
    public const int CreatedAtFieldNumber = 2;
    private long createdAt_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long CreatedAt {
      get { return createdAt_; }
      set {
        createdAt_ = value;
      }
    }

    /// <summary>Field number for the "expires_at" field.</summary>
    public const int ExpiresAtFieldNumber = 3;
    private long expiresAt_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long ExpiresAt {
      get { return expiresAt_; }
      set {
        expiresAt_ = value;
      }
    }

    /// <summary>Field number for the "handle" field.</summary>
    public const int HandleFieldNumber = 4;
    private string handle_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Handle {
      get { return handle_; }
      set {
        handle_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as TTopicMessageAck);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(TTopicMessageAck other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (MessageId != other.MessageId) return false;
      if (CreatedAt != other.CreatedAt) return false;
      if (ExpiresAt != other.ExpiresAt) return false;
      if (Handle != other.Handle) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (MessageId.Length != 0) hash ^= MessageId.GetHashCode();
      if (CreatedAt != 0L) hash ^= CreatedAt.GetHashCode();
      if (ExpiresAt != 0L) hash ^= ExpiresAt.GetHashCode();
      if (Handle.Length != 0) hash ^= Handle.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (MessageId.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(MessageId);
      }
      if (CreatedAt != 0L) {
        output.WriteRawTag(16);
        output.WriteInt64(CreatedAt);
      }
      if (ExpiresAt != 0L) {
        output.WriteRawTag(24);
        output.WriteInt64(ExpiresAt);
      }
      if (Handle.Length != 0) {
        output.WriteRawTag(34);
        output.WriteString(Handle);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (MessageId.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(MessageId);
      }
      if (CreatedAt != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(CreatedAt);
      }
      if (ExpiresAt != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(ExpiresAt);
      }
      if (Handle.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Handle);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(TTopicMessageAck other) {
      if (other == null) {
        return;
      }
      if (other.MessageId.Length != 0) {
        MessageId = other.MessageId;
      }
      if (other.CreatedAt != 0L) {
        CreatedAt = other.CreatedAt;
      }
      if (other.ExpiresAt != 0L) {
        ExpiresAt = other.ExpiresAt;
      }
      if (other.Handle.Length != 0) {
        Handle = other.Handle;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            MessageId = input.ReadString();
            break;
          }
          case 16: {
            CreatedAt = input.ReadInt64();
            break;
          }
          case 24: {
            ExpiresAt = input.ReadInt64();
            break;
          }
          case 34: {
            Handle = input.ReadString();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///*
  /// TopicMessage is the core domain type representing a chat message that is sent by another user.
  /// </summary>
  public sealed partial class TopicMessage : pb::IMessage<TopicMessage> {
    private static readonly pb::MessageParser<TopicMessage> _parser = new pb::MessageParser<TopicMessage>(() => new TopicMessage());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<TopicMessage> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Nakama.ApiReflection.Descriptor.MessageTypes[45]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TopicMessage() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TopicMessage(TopicMessage other) : this() {
      Topic = other.topic_ != null ? other.Topic.Clone() : null;
      userId_ = other.userId_;
      messageId_ = other.messageId_;
      createdAt_ = other.createdAt_;
      expiresAt_ = other.expiresAt_;
      handle_ = other.handle_;
      type_ = other.type_;
      data_ = other.data_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TopicMessage Clone() {
      return new TopicMessage(this);
    }

    /// <summary>Field number for the "topic" field.</summary>
    public const int TopicFieldNumber = 1;
    private global::Nakama.TopicId topic_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Nakama.TopicId Topic {
      get { return topic_; }
      set {
        topic_ = value;
      }
    }

    /// <summary>Field number for the "user_id" field.</summary>
    public const int UserIdFieldNumber = 2;
    private string userId_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string UserId {
      get { return userId_; }
      set {
        userId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "message_id" field.</summary>
    public const int MessageIdFieldNumber = 3;
    private string messageId_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string MessageId {
      get { return messageId_; }
      set {
        messageId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "created_at" field.</summary>
    public const int CreatedAtFieldNumber = 4;
    private long createdAt_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long CreatedAt {
      get { return createdAt_; }
      set {
        createdAt_ = value;
      }
    }

    /// <summary>Field number for the "expires_at" field.</summary>
    public const int ExpiresAtFieldNumber = 5;
    private long expiresAt_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long ExpiresAt {
      get { return expiresAt_; }
      set {
        expiresAt_ = value;
      }
    }

    /// <summary>Field number for the "handle" field.</summary>
    public const int HandleFieldNumber = 6;
    private string handle_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Handle {
      get { return handle_; }
      set {
        handle_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "type" field.</summary>
    public const int TypeFieldNumber = 7;
    private long type_;
    /// <summary>
    //// The chat message types are:
    //// Chat message (0) - Chat messages sent by users
    //// Group Join (1) - Notification - a user joined the group - send by the system
    //// Group Add (2) - Notification - a user was added/accepted to the group - send by the system
    //// Group Leave (3) - Notification - a user left the group - send by the system
    //// Group Kick (4) - Notification - a user was kicked from the group - send by the system
    //// Group Promoted (5) - Notification - a user was promoted to group admin - send by the system
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long Type {
      get { return type_; }
      set {
        type_ = value;
      }
    }

    /// <summary>Field number for the "data" field.</summary>
    public const int DataFieldNumber = 8;
    private string data_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Data {
      get { return data_; }
      set {
        data_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as TopicMessage);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(TopicMessage other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(Topic, other.Topic)) return false;
      if (UserId != other.UserId) return false;
      if (MessageId != other.MessageId) return false;
      if (CreatedAt != other.CreatedAt) return false;
      if (ExpiresAt != other.ExpiresAt) return false;
      if (Handle != other.Handle) return false;
      if (Type != other.Type) return false;
      if (Data != other.Data) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (topic_ != null) hash ^= Topic.GetHashCode();
      if (UserId.Length != 0) hash ^= UserId.GetHashCode();
      if (MessageId.Length != 0) hash ^= MessageId.GetHashCode();
      if (CreatedAt != 0L) hash ^= CreatedAt.GetHashCode();
      if (ExpiresAt != 0L) hash ^= ExpiresAt.GetHashCode();
      if (Handle.Length != 0) hash ^= Handle.GetHashCode();
      if (Type != 0L) hash ^= Type.GetHashCode();
      if (Data.Length != 0) hash ^= Data.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (topic_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(Topic);
      }
      if (UserId.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(UserId);
      }
      if (MessageId.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(MessageId);
      }
      if (CreatedAt != 0L) {
        output.WriteRawTag(32);
        output.WriteInt64(CreatedAt);
      }
      if (ExpiresAt != 0L) {
        output.WriteRawTag(40);
        output.WriteInt64(ExpiresAt);
      }
      if (Handle.Length != 0) {
        output.WriteRawTag(50);
        output.WriteString(Handle);
      }
      if (Type != 0L) {
        output.WriteRawTag(56);
        output.WriteInt64(Type);
      }
      if (Data.Length != 0) {
        output.WriteRawTag(66);
        output.WriteString(Data);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (topic_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Topic);
      }
      if (UserId.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(UserId);
      }
      if (MessageId.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(MessageId);
      }
      if (CreatedAt != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(CreatedAt);
      }
      if (ExpiresAt != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(ExpiresAt);
      }
      if (Handle.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Handle);
      }
      if (Type != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(Type);
      }
      if (Data.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Data);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(TopicMessage other) {
      if (other == null) {
        return;
      }
      if (other.topic_ != null) {
        if (topic_ == null) {
          topic_ = new global::Nakama.TopicId();
        }
        Topic.MergeFrom(other.Topic);
      }
      if (other.UserId.Length != 0) {
        UserId = other.UserId;
      }
      if (other.MessageId.Length != 0) {
        MessageId = other.MessageId;
      }
      if (other.CreatedAt != 0L) {
        CreatedAt = other.CreatedAt;
      }
      if (other.ExpiresAt != 0L) {
        ExpiresAt = other.ExpiresAt;
      }
      if (other.Handle.Length != 0) {
        Handle = other.Handle;
      }
      if (other.Type != 0L) {
        Type = other.Type;
      }
      if (other.Data.Length != 0) {
        Data = other.Data;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            if (topic_ == null) {
              topic_ = new global::Nakama.TopicId();
            }
            input.ReadMessage(topic_);
            break;
          }
          case 18: {
            UserId = input.ReadString();
            break;
          }
          case 26: {
            MessageId = input.ReadString();
            break;
          }
          case 32: {
            CreatedAt = input.ReadInt64();
            break;
          }
          case 40: {
            ExpiresAt = input.ReadInt64();
            break;
          }
          case 50: {
            Handle = input.ReadString();
            break;
          }
          case 56: {
            Type = input.ReadInt64();
            break;
          }
          case 66: {
            Data = input.ReadString();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///*
  /// TTopicMessagesList retrieves a list of historic messages for a topic.
  ///
  /// @returns TTopicMessages
  /// </summary>
  public sealed partial class TTopicMessagesList : pb::IMessage<TTopicMessagesList> {
    private static readonly pb::MessageParser<TTopicMessagesList> _parser = new pb::MessageParser<TTopicMessagesList>(() => new TTopicMessagesList());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<TTopicMessagesList> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Nakama.ApiReflection.Descriptor.MessageTypes[46]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TTopicMessagesList() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TTopicMessagesList(TTopicMessagesList other) : this() {
      cursor_ = other.cursor_;
      forward_ = other.forward_;
      limit_ = other.limit_;
      switch (other.IdCase) {
        case IdOneofCase.UserId:
          UserId = other.UserId;
          break;
        case IdOneofCase.Room:
          Room = other.Room;
          break;
        case IdOneofCase.GroupId:
          GroupId = other.GroupId;
          break;
      }

    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TTopicMessagesList Clone() {
      return new TTopicMessagesList(this);
    }

    /// <summary>Field number for the "user_id" field.</summary>
    public const int UserIdFieldNumber = 1;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string UserId {
      get { return idCase_ == IdOneofCase.UserId ? (string) id_ : ""; }
      set {
        id_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
        idCase_ = IdOneofCase.UserId;
      }
    }

    /// <summary>Field number for the "room" field.</summary>
    public const int RoomFieldNumber = 2;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Room {
      get { return idCase_ == IdOneofCase.Room ? (string) id_ : ""; }
      set {
        id_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
        idCase_ = IdOneofCase.Room;
      }
    }

    /// <summary>Field number for the "group_id" field.</summary>
    public const int GroupIdFieldNumber = 3;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string GroupId {
      get { return idCase_ == IdOneofCase.GroupId ? (string) id_ : ""; }
      set {
        id_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
        idCase_ = IdOneofCase.GroupId;
      }
    }

    /// <summary>Field number for the "cursor" field.</summary>
    public const int CursorFieldNumber = 4;
    private string cursor_ = "";
    /// <summary>
    //// Use the cursor to paginate through more message.
    //// The value of this comes from TTopicMessages.cursor.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Cursor {
      get { return cursor_; }
      set {
        cursor_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "forward" field.</summary>
    public const int ForwardFieldNumber = 5;
    private bool forward_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Forward {
      get { return forward_; }
      set {
        forward_ = value;
      }
    }

    /// <summary>Field number for the "limit" field.</summary>
    public const int LimitFieldNumber = 6;
    private long limit_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long Limit {
      get { return limit_; }
      set {
        limit_ = value;
      }
    }

    private object id_;
    /// <summary>Enum of possible cases for the "id" oneof.</summary>
    public enum IdOneofCase {
      None = 0,
      UserId = 1,
      Room = 2,
      GroupId = 3,
    }
    private IdOneofCase idCase_ = IdOneofCase.None;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public IdOneofCase IdCase {
      get { return idCase_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearId() {
      idCase_ = IdOneofCase.None;
      id_ = null;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as TTopicMessagesList);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(TTopicMessagesList other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (UserId != other.UserId) return false;
      if (Room != other.Room) return false;
      if (GroupId != other.GroupId) return false;
      if (Cursor != other.Cursor) return false;
      if (Forward != other.Forward) return false;
      if (Limit != other.Limit) return false;
      if (IdCase != other.IdCase) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (idCase_ == IdOneofCase.UserId) hash ^= UserId.GetHashCode();
      if (idCase_ == IdOneofCase.Room) hash ^= Room.GetHashCode();
      if (idCase_ == IdOneofCase.GroupId) hash ^= GroupId.GetHashCode();
      if (Cursor.Length != 0) hash ^= Cursor.GetHashCode();
      if (Forward != false) hash ^= Forward.GetHashCode();
      if (Limit != 0L) hash ^= Limit.GetHashCode();
      hash ^= (int) idCase_;
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (idCase_ == IdOneofCase.UserId) {
        output.WriteRawTag(10);
        output.WriteString(UserId);
      }
      if (idCase_ == IdOneofCase.Room) {
        output.WriteRawTag(18);
        output.WriteString(Room);
      }
      if (idCase_ == IdOneofCase.GroupId) {
        output.WriteRawTag(26);
        output.WriteString(GroupId);
      }
      if (Cursor.Length != 0) {
        output.WriteRawTag(34);
        output.WriteString(Cursor);
      }
      if (Forward != false) {
        output.WriteRawTag(40);
        output.WriteBool(Forward);
      }
      if (Limit != 0L) {
        output.WriteRawTag(48);
        output.WriteInt64(Limit);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (idCase_ == IdOneofCase.UserId) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(UserId);
      }
      if (idCase_ == IdOneofCase.Room) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Room);
      }
      if (idCase_ == IdOneofCase.GroupId) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(GroupId);
      }
      if (Cursor.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Cursor);
      }
      if (Forward != false) {
        size += 1 + 1;
      }
      if (Limit != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(Limit);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(TTopicMessagesList other) {
      if (other == null) {
        return;
      }
      if (other.Cursor.Length != 0) {
        Cursor = other.Cursor;
      }
      if (other.Forward != false) {
        Forward = other.Forward;
      }
      if (other.Limit != 0L) {
        Limit = other.Limit;
      }
      switch (other.IdCase) {
        case IdOneofCase.UserId:
          UserId = other.UserId;
          break;
        case IdOneofCase.Room:
          Room = other.Room;
          break;
        case IdOneofCase.GroupId:
          GroupId = other.GroupId;
          break;
      }

    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            UserId = input.ReadString();
            break;
          }
          case 18: {
            Room = input.ReadString();
            break;
          }
          case 26: {
            GroupId = input.ReadString();
            break;
          }
          case 34: {
            Cursor = input.ReadString();
            break;
          }
          case 40: {
            Forward = input.ReadBool();
            break;
          }
          case 48: {
            Limit = input.ReadInt64();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///*
  /// TTopicMessages is a list of historic messages for a topic.
  /// </summary>
  public sealed partial class TTopicMessages : pb::IMessage<TTopicMessages> {
    private static readonly pb::MessageParser<TTopicMessages> _parser = new pb::MessageParser<TTopicMessages>(() => new TTopicMessages());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<TTopicMessages> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Nakama.ApiReflection.Descriptor.MessageTypes[47]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TTopicMessages() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TTopicMessages(TTopicMessages other) : this() {
      messages_ = other.messages_.Clone();
      cursor_ = other.cursor_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TTopicMessages Clone() {
      return new TTopicMessages(this);
    }

    /// <summary>Field number for the "messages" field.</summary>
    public const int MessagesFieldNumber = 1;
    private static readonly pb::FieldCodec<global::Nakama.TopicMessage> _repeated_messages_codec
        = pb::FieldCodec.ForMessage(10, global::Nakama.TopicMessage.Parser);
    private readonly pbc::RepeatedField<global::Nakama.TopicMessage> messages_ = new pbc::RepeatedField<global::Nakama.TopicMessage>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Nakama.TopicMessage> Messages {
      get { return messages_; }
    }

    /// <summary>Field number for the "cursor" field.</summary>
    public const int CursorFieldNumber = 2;
    private string cursor_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Cursor {
      get { return cursor_; }
      set {
        cursor_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as TTopicMessages);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(TTopicMessages other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!messages_.Equals(other.messages_)) return false;
      if (Cursor != other.Cursor) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= messages_.GetHashCode();
      if (Cursor.Length != 0) hash ^= Cursor.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      messages_.WriteTo(output, _repeated_messages_codec);
      if (Cursor.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(Cursor);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += messages_.CalculateSize(_repeated_messages_codec);
      if (Cursor.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Cursor);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(TTopicMessages other) {
      if (other == null) {
        return;
      }
      messages_.Add(other.messages_);
      if (other.Cursor.Length != 0) {
        Cursor = other.Cursor;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            messages_.AddEntriesFrom(input, _repeated_messages_codec);
            break;
          }
          case 18: {
            Cursor = input.ReadString();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///*
  /// TopicPresence is the core domain type representing a change presences for a topic.
  /// </summary>
  public sealed partial class TopicPresence : pb::IMessage<TopicPresence> {
    private static readonly pb::MessageParser<TopicPresence> _parser = new pb::MessageParser<TopicPresence>(() => new TopicPresence());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<TopicPresence> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Nakama.ApiReflection.Descriptor.MessageTypes[48]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TopicPresence() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TopicPresence(TopicPresence other) : this() {
      Topic = other.topic_ != null ? other.Topic.Clone() : null;
      joins_ = other.joins_.Clone();
      leaves_ = other.leaves_.Clone();
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TopicPresence Clone() {
      return new TopicPresence(this);
    }

    /// <summary>Field number for the "topic" field.</summary>
    public const int TopicFieldNumber = 1;
    private global::Nakama.TopicId topic_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Nakama.TopicId Topic {
      get { return topic_; }
      set {
        topic_ = value;
      }
    }

    /// <summary>Field number for the "joins" field.</summary>
    public const int JoinsFieldNumber = 2;
    private static readonly pb::FieldCodec<global::Nakama.UserPresence> _repeated_joins_codec
        = pb::FieldCodec.ForMessage(18, global::Nakama.UserPresence.Parser);
    private readonly pbc::RepeatedField<global::Nakama.UserPresence> joins_ = new pbc::RepeatedField<global::Nakama.UserPresence>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Nakama.UserPresence> Joins {
      get { return joins_; }
    }

    /// <summary>Field number for the "leaves" field.</summary>
    public const int LeavesFieldNumber = 3;
    private static readonly pb::FieldCodec<global::Nakama.UserPresence> _repeated_leaves_codec
        = pb::FieldCodec.ForMessage(26, global::Nakama.UserPresence.Parser);
    private readonly pbc::RepeatedField<global::Nakama.UserPresence> leaves_ = new pbc::RepeatedField<global::Nakama.UserPresence>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Nakama.UserPresence> Leaves {
      get { return leaves_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as TopicPresence);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(TopicPresence other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(Topic, other.Topic)) return false;
      if(!joins_.Equals(other.joins_)) return false;
      if(!leaves_.Equals(other.leaves_)) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (topic_ != null) hash ^= Topic.GetHashCode();
      hash ^= joins_.GetHashCode();
      hash ^= leaves_.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (topic_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(Topic);
      }
      joins_.WriteTo(output, _repeated_joins_codec);
      leaves_.WriteTo(output, _repeated_leaves_codec);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (topic_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Topic);
      }
      size += joins_.CalculateSize(_repeated_joins_codec);
      size += leaves_.CalculateSize(_repeated_leaves_codec);
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(TopicPresence other) {
      if (other == null) {
        return;
      }
      if (other.topic_ != null) {
        if (topic_ == null) {
          topic_ = new global::Nakama.TopicId();
        }
        Topic.MergeFrom(other.Topic);
      }
      joins_.Add(other.joins_);
      leaves_.Add(other.leaves_);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            if (topic_ == null) {
              topic_ = new global::Nakama.TopicId();
            }
            input.ReadMessage(topic_);
            break;
          }
          case 18: {
            joins_.AddEntriesFrom(input, _repeated_joins_codec);
            break;
          }
          case 26: {
            leaves_.AddEntriesFrom(input, _repeated_leaves_codec);
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///*
  /// PropertyPair is a core domain type respresenting a single user property
  /// </summary>
  public sealed partial class PropertyPair : pb::IMessage<PropertyPair> {
    private static readonly pb::MessageParser<PropertyPair> _parser = new pb::MessageParser<PropertyPair>(() => new PropertyPair());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<PropertyPair> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Nakama.ApiReflection.Descriptor.MessageTypes[49]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PropertyPair() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PropertyPair(PropertyPair other) : this() {
      key_ = other.key_;
      switch (other.ValueCase) {
        case ValueOneofCase.StringSet:
          StringSet = other.StringSet.Clone();
          break;
        case ValueOneofCase.BoolValue:
          BoolValue = other.BoolValue;
          break;
        case ValueOneofCase.IntValue:
          IntValue = other.IntValue;
          break;
      }

    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PropertyPair Clone() {
      return new PropertyPair(this);
    }

    /// <summary>Field number for the "key" field.</summary>
    public const int KeyFieldNumber = 1;
    private string key_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Key {
      get { return key_; }
      set {
        key_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "stringSet" field.</summary>
    public const int StringSetFieldNumber = 2;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Nakama.PropertyPair.Types.StringSet StringSet {
      get { return valueCase_ == ValueOneofCase.StringSet ? (global::Nakama.PropertyPair.Types.StringSet) value_ : null; }
      set {
        value_ = value;
        valueCase_ = value == null ? ValueOneofCase.None : ValueOneofCase.StringSet;
      }
    }

    /// <summary>Field number for the "boolValue" field.</summary>
    public const int BoolValueFieldNumber = 3;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool BoolValue {
      get { return valueCase_ == ValueOneofCase.BoolValue ? (bool) value_ : false; }
      set {
        value_ = value;
        valueCase_ = ValueOneofCase.BoolValue;
      }
    }

    /// <summary>Field number for the "intValue" field.</summary>
    public const int IntValueFieldNumber = 4;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long IntValue {
      get { return valueCase_ == ValueOneofCase.IntValue ? (long) value_ : 0L; }
      set {
        value_ = value;
        valueCase_ = ValueOneofCase.IntValue;
      }
    }

    private object value_;
    /// <summary>Enum of possible cases for the "value" oneof.</summary>
    public enum ValueOneofCase {
      None = 0,
      StringSet = 2,
      BoolValue = 3,
      IntValue = 4,
    }
    private ValueOneofCase valueCase_ = ValueOneofCase.None;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ValueOneofCase ValueCase {
      get { return valueCase_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearValue() {
      valueCase_ = ValueOneofCase.None;
      value_ = null;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as PropertyPair);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(PropertyPair other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Key != other.Key) return false;
      if (!object.Equals(StringSet, other.StringSet)) return false;
      if (BoolValue != other.BoolValue) return false;
      if (IntValue != other.IntValue) return false;
      if (ValueCase != other.ValueCase) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Key.Length != 0) hash ^= Key.GetHashCode();
      if (valueCase_ == ValueOneofCase.StringSet) hash ^= StringSet.GetHashCode();
      if (valueCase_ == ValueOneofCase.BoolValue) hash ^= BoolValue.GetHashCode();
      if (valueCase_ == ValueOneofCase.IntValue) hash ^= IntValue.GetHashCode();
      hash ^= (int) valueCase_;
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Key.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Key);
      }
      if (valueCase_ == ValueOneofCase.StringSet) {
        output.WriteRawTag(18);
        output.WriteMessage(StringSet);
      }
      if (valueCase_ == ValueOneofCase.BoolValue) {
        output.WriteRawTag(24);
        output.WriteBool(BoolValue);
      }
      if (valueCase_ == ValueOneofCase.IntValue) {
        output.WriteRawTag(32);
        output.WriteInt64(IntValue);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Key.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Key);
      }
      if (valueCase_ == ValueOneofCase.StringSet) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(StringSet);
      }
      if (valueCase_ == ValueOneofCase.BoolValue) {
        size += 1 + 1;
      }
      if (valueCase_ == ValueOneofCase.IntValue) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(IntValue);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(PropertyPair other) {
      if (other == null) {
        return;
      }
      if (other.Key.Length != 0) {
        Key = other.Key;
      }
      switch (other.ValueCase) {
        case ValueOneofCase.StringSet:
          if (StringSet == null) {
            StringSet = new global::Nakama.PropertyPair.Types.StringSet();
          }
          StringSet.MergeFrom(other.StringSet);
          break;
        case ValueOneofCase.BoolValue:
          BoolValue = other.BoolValue;
          break;
        case ValueOneofCase.IntValue:
          IntValue = other.IntValue;
          break;
      }

    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            Key = input.ReadString();
            break;
          }
          case 18: {
            global::Nakama.PropertyPair.Types.StringSet subBuilder = new global::Nakama.PropertyPair.Types.StringSet();
            if (valueCase_ == ValueOneofCase.StringSet) {
              subBuilder.MergeFrom(StringSet);
            }
            input.ReadMessage(subBuilder);
            StringSet = subBuilder;
            break;
          }
          case 24: {
            BoolValue = input.ReadBool();
            break;
          }
          case 32: {
            IntValue = input.ReadInt64();
            break;
          }
        }
      }
    }

    #region Nested types
    /// <summary>Container for nested types declared in the PropertyPair message type.</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static partial class Types {
      /// <summary>
      //// Set of string user property
      /// </summary>
      public sealed partial class StringSet : pb::IMessage<StringSet> {
        private static readonly pb::MessageParser<StringSet> _parser = new pb::MessageParser<StringSet>(() => new StringSet());
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<StringSet> Parser { get { return _parser; } }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor {
          get { return global::Nakama.PropertyPair.Descriptor.NestedTypes[0]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor {
          get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public StringSet() {
          OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public StringSet(StringSet other) : this() {
          values_ = other.values_.Clone();
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public StringSet Clone() {
          return new StringSet(this);
        }

        /// <summary>Field number for the "values" field.</summary>
        public const int ValuesFieldNumber = 1;
        private static readonly pb::FieldCodec<string> _repeated_values_codec
            = pb::FieldCodec.ForString(10);
        private readonly pbc::RepeatedField<string> values_ = new pbc::RepeatedField<string>();
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public pbc::RepeatedField<string> Values {
          get { return values_; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other) {
          return Equals(other as StringSet);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(StringSet other) {
          if (ReferenceEquals(other, null)) {
            return false;
          }
          if (ReferenceEquals(other, this)) {
            return true;
          }
          if(!values_.Equals(other.values_)) return false;
          return true;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode() {
          int hash = 1;
          hash ^= values_.GetHashCode();
          return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString() {
          return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output) {
          values_.WriteTo(output, _repeated_values_codec);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize() {
          int size = 0;
          size += values_.CalculateSize(_repeated_values_codec);
          return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(StringSet other) {
          if (other == null) {
            return;
          }
          values_.Add(other.values_);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input) {
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                input.SkipLastField();
                break;
              case 10: {
                values_.AddEntriesFrom(input, _repeated_values_codec);
                break;
              }
            }
          }
        }

      }

    }
    #endregion

  }

  /// <summary>
  ///*
  /// MatchmakeFilter is a core domain type respresenting a filter to use for matchmaking.
  /// </summary>
  public sealed partial class MatchmakeFilter : pb::IMessage<MatchmakeFilter> {
    private static readonly pb::MessageParser<MatchmakeFilter> _parser = new pb::MessageParser<MatchmakeFilter>(() => new MatchmakeFilter());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<MatchmakeFilter> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Nakama.ApiReflection.Descriptor.MessageTypes[50]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MatchmakeFilter() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MatchmakeFilter(MatchmakeFilter other) : this() {
      name_ = other.name_;
      switch (other.ValueCase) {
        case ValueOneofCase.Term:
          Term = other.Term.Clone();
          break;
        case ValueOneofCase.Range:
          Range = other.Range.Clone();
          break;
        case ValueOneofCase.Check:
          Check = other.Check;
          break;
      }

    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MatchmakeFilter Clone() {
      return new MatchmakeFilter(this);
    }

    /// <summary>Field number for the "name" field.</summary>
    public const int NameFieldNumber = 1;
    private string name_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Name {
      get { return name_; }
      set {
        name_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "term" field.</summary>
    public const int TermFieldNumber = 2;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Nakama.MatchmakeFilter.Types.TermFilter Term {
      get { return valueCase_ == ValueOneofCase.Term ? (global::Nakama.MatchmakeFilter.Types.TermFilter) value_ : null; }
      set {
        value_ = value;
        valueCase_ = value == null ? ValueOneofCase.None : ValueOneofCase.Term;
      }
    }

    /// <summary>Field number for the "range" field.</summary>
    public const int RangeFieldNumber = 3;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Nakama.MatchmakeFilter.Types.RangeFilter Range {
      get { return valueCase_ == ValueOneofCase.Range ? (global::Nakama.MatchmakeFilter.Types.RangeFilter) value_ : null; }
      set {
        value_ = value;
        valueCase_ = value == null ? ValueOneofCase.None : ValueOneofCase.Range;
      }
    }

    /// <summary>Field number for the "check" field.</summary>
    public const int CheckFieldNumber = 4;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Check {
      get { return valueCase_ == ValueOneofCase.Check ? (bool) value_ : false; }
      set {
        value_ = value;
        valueCase_ = ValueOneofCase.Check;
      }
    }

    private object value_;
    /// <summary>Enum of possible cases for the "value" oneof.</summary>
    public enum ValueOneofCase {
      None = 0,
      Term = 2,
      Range = 3,
      Check = 4,
    }
    private ValueOneofCase valueCase_ = ValueOneofCase.None;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ValueOneofCase ValueCase {
      get { return valueCase_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearValue() {
      valueCase_ = ValueOneofCase.None;
      value_ = null;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as MatchmakeFilter);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(MatchmakeFilter other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Name != other.Name) return false;
      if (!object.Equals(Term, other.Term)) return false;
      if (!object.Equals(Range, other.Range)) return false;
      if (Check != other.Check) return false;
      if (ValueCase != other.ValueCase) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Name.Length != 0) hash ^= Name.GetHashCode();
      if (valueCase_ == ValueOneofCase.Term) hash ^= Term.GetHashCode();
      if (valueCase_ == ValueOneofCase.Range) hash ^= Range.GetHashCode();
      if (valueCase_ == ValueOneofCase.Check) hash ^= Check.GetHashCode();
      hash ^= (int) valueCase_;
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Name.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Name);
      }
      if (valueCase_ == ValueOneofCase.Term) {
        output.WriteRawTag(18);
        output.WriteMessage(Term);
      }
      if (valueCase_ == ValueOneofCase.Range) {
        output.WriteRawTag(26);
        output.WriteMessage(Range);
      }
      if (valueCase_ == ValueOneofCase.Check) {
        output.WriteRawTag(32);
        output.WriteBool(Check);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Name.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Name);
      }
      if (valueCase_ == ValueOneofCase.Term) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Term);
      }
      if (valueCase_ == ValueOneofCase.Range) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Range);
      }
      if (valueCase_ == ValueOneofCase.Check) {
        size += 1 + 1;
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(MatchmakeFilter other) {
      if (other == null) {
        return;
      }
      if (other.Name.Length != 0) {
        Name = other.Name;
      }
      switch (other.ValueCase) {
        case ValueOneofCase.Term:
          if (Term == null) {
            Term = new global::Nakama.MatchmakeFilter.Types.TermFilter();
          }
          Term.MergeFrom(other.Term);
          break;
        case ValueOneofCase.Range:
          if (Range == null) {
            Range = new global::Nakama.MatchmakeFilter.Types.RangeFilter();
          }
          Range.MergeFrom(other.Range);
          break;
        case ValueOneofCase.Check:
          Check = other.Check;
          break;
      }

    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            Name = input.ReadString();
            break;
          }
          case 18: {
            global::Nakama.MatchmakeFilter.Types.TermFilter subBuilder = new global::Nakama.MatchmakeFilter.Types.TermFilter();
            if (valueCase_ == ValueOneofCase.Term) {
              subBuilder.MergeFrom(Term);
            }
            input.ReadMessage(subBuilder);
            Term = subBuilder;
            break;
          }
          case 26: {
            global::Nakama.MatchmakeFilter.Types.RangeFilter subBuilder = new global::Nakama.MatchmakeFilter.Types.RangeFilter();
            if (valueCase_ == ValueOneofCase.Range) {
              subBuilder.MergeFrom(Range);
            }
            input.ReadMessage(subBuilder);
            Range = subBuilder;
            break;
          }
          case 32: {
            Check = input.ReadBool();
            break;
          }
        }
      }
    }

    #region Nested types
    /// <summary>Container for nested types declared in the MatchmakeFilter message type.</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static partial class Types {
      /// <summary>
      //// String term filters
      /// </summary>
      public sealed partial class TermFilter : pb::IMessage<TermFilter> {
        private static readonly pb::MessageParser<TermFilter> _parser = new pb::MessageParser<TermFilter>(() => new TermFilter());
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<TermFilter> Parser { get { return _parser; } }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor {
          get { return global::Nakama.MatchmakeFilter.Descriptor.NestedTypes[0]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor {
          get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public TermFilter() {
          OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public TermFilter(TermFilter other) : this() {
          terms_ = other.terms_.Clone();
          matchAllTerms_ = other.matchAllTerms_;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public TermFilter Clone() {
          return new TermFilter(this);
        }

        /// <summary>Field number for the "terms" field.</summary>
        public const int TermsFieldNumber = 1;
        private static readonly pb::FieldCodec<string> _repeated_terms_codec
            = pb::FieldCodec.ForString(10);
        private readonly pbc::RepeatedField<string> terms_ = new pbc::RepeatedField<string>();
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public pbc::RepeatedField<string> Terms {
          get { return terms_; }
        }

        /// <summary>Field number for the "matchAllTerms" field.</summary>
        public const int MatchAllTermsFieldNumber = 2;
        private bool matchAllTerms_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool MatchAllTerms {
          get { return matchAllTerms_; }
          set {
            matchAllTerms_ = value;
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other) {
          return Equals(other as TermFilter);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(TermFilter other) {
          if (ReferenceEquals(other, null)) {
            return false;
          }
          if (ReferenceEquals(other, this)) {
            return true;
          }
          if(!terms_.Equals(other.terms_)) return false;
          if (MatchAllTerms != other.MatchAllTerms) return false;
          return true;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode() {
          int hash = 1;
          hash ^= terms_.GetHashCode();
          if (MatchAllTerms != false) hash ^= MatchAllTerms.GetHashCode();
          return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString() {
          return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output) {
          terms_.WriteTo(output, _repeated_terms_codec);
          if (MatchAllTerms != false) {
            output.WriteRawTag(16);
            output.WriteBool(MatchAllTerms);
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize() {
          int size = 0;
          size += terms_.CalculateSize(_repeated_terms_codec);
          if (MatchAllTerms != false) {
            size += 1 + 1;
          }
          return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(TermFilter other) {
          if (other == null) {
            return;
          }
          terms_.Add(other.terms_);
          if (other.MatchAllTerms != false) {
            MatchAllTerms = other.MatchAllTerms;
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input) {
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                input.SkipLastField();
                break;
              case 10: {
                terms_.AddEntriesFrom(input, _repeated_terms_codec);
                break;
              }
              case 16: {
                MatchAllTerms = input.ReadBool();
                break;
              }
            }
          }
        }

      }

      /// <summary>
      //// Numeric range filter
      /// </summary>
      public sealed partial class RangeFilter : pb::IMessage<RangeFilter> {
        private static readonly pb::MessageParser<RangeFilter> _parser = new pb::MessageParser<RangeFilter>(() => new RangeFilter());
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<RangeFilter> Parser { get { return _parser; } }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor {
          get { return global::Nakama.MatchmakeFilter.Descriptor.NestedTypes[1]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor {
          get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public RangeFilter() {
          OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public RangeFilter(RangeFilter other) : this() {
          lowerBound_ = other.lowerBound_;
          upperBound_ = other.upperBound_;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public RangeFilter Clone() {
          return new RangeFilter(this);
        }

        /// <summary>Field number for the "lower_bound" field.</summary>
        public const int LowerBoundFieldNumber = 1;
        private long lowerBound_;
        /// <summary>
        /// inclusive lower_bound
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public long LowerBound {
          get { return lowerBound_; }
          set {
            lowerBound_ = value;
          }
        }

        /// <summary>Field number for the "upper_bound" field.</summary>
        public const int UpperBoundFieldNumber = 2;
        private long upperBound_;
        /// <summary>
        /// inclusive upper_bound
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public long UpperBound {
          get { return upperBound_; }
          set {
            upperBound_ = value;
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other) {
          return Equals(other as RangeFilter);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(RangeFilter other) {
          if (ReferenceEquals(other, null)) {
            return false;
          }
          if (ReferenceEquals(other, this)) {
            return true;
          }
          if (LowerBound != other.LowerBound) return false;
          if (UpperBound != other.UpperBound) return false;
          return true;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode() {
          int hash = 1;
          if (LowerBound != 0L) hash ^= LowerBound.GetHashCode();
          if (UpperBound != 0L) hash ^= UpperBound.GetHashCode();
          return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString() {
          return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output) {
          if (LowerBound != 0L) {
            output.WriteRawTag(8);
            output.WriteInt64(LowerBound);
          }
          if (UpperBound != 0L) {
            output.WriteRawTag(16);
            output.WriteInt64(UpperBound);
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize() {
          int size = 0;
          if (LowerBound != 0L) {
            size += 1 + pb::CodedOutputStream.ComputeInt64Size(LowerBound);
          }
          if (UpperBound != 0L) {
            size += 1 + pb::CodedOutputStream.ComputeInt64Size(UpperBound);
          }
          return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(RangeFilter other) {
          if (other == null) {
            return;
          }
          if (other.LowerBound != 0L) {
            LowerBound = other.LowerBound;
          }
          if (other.UpperBound != 0L) {
            UpperBound = other.UpperBound;
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input) {
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                input.SkipLastField();
                break;
              case 8: {
                LowerBound = input.ReadInt64();
                break;
              }
              case 16: {
                UpperBound = input.ReadInt64();
                break;
              }
            }
          }
        }

      }

    }
    #endregion

  }

  /// <summary>
  ///*
  /// TMatchmakeAdd is used to add the current user to the matchmaking pool.
  ///
  /// @returns TMatchmakeTicket
  /// </summary>
  public sealed partial class TMatchmakeAdd : pb::IMessage<TMatchmakeAdd> {
    private static readonly pb::MessageParser<TMatchmakeAdd> _parser = new pb::MessageParser<TMatchmakeAdd>(() => new TMatchmakeAdd());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<TMatchmakeAdd> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Nakama.ApiReflection.Descriptor.MessageTypes[51]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TMatchmakeAdd() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TMatchmakeAdd(TMatchmakeAdd other) : this() {
      requiredCount_ = other.requiredCount_;
      filters_ = other.filters_.Clone();
      properties_ = other.properties_.Clone();
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TMatchmakeAdd Clone() {
      return new TMatchmakeAdd(this);
    }

    /// <summary>Field number for the "required_count" field.</summary>
    public const int RequiredCountFieldNumber = 1;
    private long requiredCount_;
    /// <summary>
    //// Match user with other users looking for a match with the the following number of users.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long RequiredCount {
      get { return requiredCount_; }
      set {
        requiredCount_ = value;
      }
    }

    /// <summary>Field number for the "filters" field.</summary>
    public const int FiltersFieldNumber = 2;
    private static readonly pb::FieldCodec<global::Nakama.MatchmakeFilter> _repeated_filters_codec
        = pb::FieldCodec.ForMessage(18, global::Nakama.MatchmakeFilter.Parser);
    private readonly pbc::RepeatedField<global::Nakama.MatchmakeFilter> filters_ = new pbc::RepeatedField<global::Nakama.MatchmakeFilter>();
    /// <summary>
    //// List of filters that need to match.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Nakama.MatchmakeFilter> Filters {
      get { return filters_; }
    }

    /// <summary>Field number for the "properties" field.</summary>
    public const int PropertiesFieldNumber = 3;
    private static readonly pb::FieldCodec<global::Nakama.PropertyPair> _repeated_properties_codec
        = pb::FieldCodec.ForMessage(26, global::Nakama.PropertyPair.Parser);
    private readonly pbc::RepeatedField<global::Nakama.PropertyPair> properties_ = new pbc::RepeatedField<global::Nakama.PropertyPair>();
    /// <summary>
    //// List of properties for the current user.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Nakama.PropertyPair> Properties {
      get { return properties_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as TMatchmakeAdd);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(TMatchmakeAdd other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (RequiredCount != other.RequiredCount) return false;
      if(!filters_.Equals(other.filters_)) return false;
      if(!properties_.Equals(other.properties_)) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (RequiredCount != 0L) hash ^= RequiredCount.GetHashCode();
      hash ^= filters_.GetHashCode();
      hash ^= properties_.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (RequiredCount != 0L) {
        output.WriteRawTag(8);
        output.WriteInt64(RequiredCount);
      }
      filters_.WriteTo(output, _repeated_filters_codec);
      properties_.WriteTo(output, _repeated_properties_codec);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (RequiredCount != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(RequiredCount);
      }
      size += filters_.CalculateSize(_repeated_filters_codec);
      size += properties_.CalculateSize(_repeated_properties_codec);
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(TMatchmakeAdd other) {
      if (other == null) {
        return;
      }
      if (other.RequiredCount != 0L) {
        RequiredCount = other.RequiredCount;
      }
      filters_.Add(other.filters_);
      properties_.Add(other.properties_);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            RequiredCount = input.ReadInt64();
            break;
          }
          case 18: {
            filters_.AddEntriesFrom(input, _repeated_filters_codec);
            break;
          }
          case 26: {
            properties_.AddEntriesFrom(input, _repeated_properties_codec);
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///*
  /// TMatchmakeTicket represents a matchmake ticket. Use the ticket to cancel matchmaking search.
  /// </summary>
  public sealed partial class TMatchmakeTicket : pb::IMessage<TMatchmakeTicket> {
    private static readonly pb::MessageParser<TMatchmakeTicket> _parser = new pb::MessageParser<TMatchmakeTicket>(() => new TMatchmakeTicket());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<TMatchmakeTicket> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Nakama.ApiReflection.Descriptor.MessageTypes[52]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TMatchmakeTicket() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TMatchmakeTicket(TMatchmakeTicket other) : this() {
      ticket_ = other.ticket_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TMatchmakeTicket Clone() {
      return new TMatchmakeTicket(this);
    }

    /// <summary>Field number for the "ticket" field.</summary>
    public const int TicketFieldNumber = 1;
    private string ticket_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Ticket {
      get { return ticket_; }
      set {
        ticket_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as TMatchmakeTicket);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(TMatchmakeTicket other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Ticket != other.Ticket) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Ticket.Length != 0) hash ^= Ticket.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Ticket.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Ticket);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Ticket.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Ticket);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(TMatchmakeTicket other) {
      if (other == null) {
        return;
      }
      if (other.Ticket.Length != 0) {
        Ticket = other.Ticket;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            Ticket = input.ReadString();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///*
  /// TMatchmakeRemove is used to cancel a matchmake search.
  /// </summary>
  public sealed partial class TMatchmakeRemove : pb::IMessage<TMatchmakeRemove> {
    private static readonly pb::MessageParser<TMatchmakeRemove> _parser = new pb::MessageParser<TMatchmakeRemove>(() => new TMatchmakeRemove());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<TMatchmakeRemove> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Nakama.ApiReflection.Descriptor.MessageTypes[53]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TMatchmakeRemove() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TMatchmakeRemove(TMatchmakeRemove other) : this() {
      ticket_ = other.ticket_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TMatchmakeRemove Clone() {
      return new TMatchmakeRemove(this);
    }

    /// <summary>Field number for the "ticket" field.</summary>
    public const int TicketFieldNumber = 1;
    private string ticket_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Ticket {
      get { return ticket_; }
      set {
        ticket_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as TMatchmakeRemove);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(TMatchmakeRemove other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Ticket != other.Ticket) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Ticket.Length != 0) hash ^= Ticket.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Ticket.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Ticket);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Ticket.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Ticket);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(TMatchmakeRemove other) {
      if (other == null) {
        return;
      }
      if (other.Ticket.Length != 0) {
        Ticket = other.Ticket;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            Ticket = input.ReadString();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///*
  /// MatchmakeMatched is the core domain type representing a found match via matchmaking.
  /// </summary>
  public sealed partial class MatchmakeMatched : pb::IMessage<MatchmakeMatched> {
    private static readonly pb::MessageParser<MatchmakeMatched> _parser = new pb::MessageParser<MatchmakeMatched>(() => new MatchmakeMatched());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<MatchmakeMatched> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Nakama.ApiReflection.Descriptor.MessageTypes[54]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MatchmakeMatched() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MatchmakeMatched(MatchmakeMatched other) : this() {
      ticket_ = other.ticket_;
      token_ = other.token_;
      presences_ = other.presences_.Clone();
      Self = other.self_ != null ? other.Self.Clone() : null;
      properties_ = other.properties_.Clone();
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MatchmakeMatched Clone() {
      return new MatchmakeMatched(this);
    }

    /// <summary>Field number for the "ticket" field.</summary>
    public const int TicketFieldNumber = 1;
    private string ticket_ = "";
    /// <summary>
    //// Matchmaking ticket. Use this to invalidate ticket cache on the client.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Ticket {
      get { return ticket_; }
      set {
        ticket_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "token" field.</summary>
    public const int TokenFieldNumber = 2;
    private string token_ = "";
    /// <summary>
    //// Matchmaking token. Use this to accept the match. This is a onetime token which is only valid for a limited time.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Token {
      get { return token_; }
      set {
        token_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "presences" field.</summary>
    public const int PresencesFieldNumber = 3;
    private static readonly pb::FieldCodec<global::Nakama.UserPresence> _repeated_presences_codec
        = pb::FieldCodec.ForMessage(26, global::Nakama.UserPresence.Parser);
    private readonly pbc::RepeatedField<global::Nakama.UserPresence> presences_ = new pbc::RepeatedField<global::Nakama.UserPresence>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Nakama.UserPresence> Presences {
      get { return presences_; }
    }

    /// <summary>Field number for the "self" field.</summary>
    public const int SelfFieldNumber = 4;
    private global::Nakama.UserPresence self_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Nakama.UserPresence Self {
      get { return self_; }
      set {
        self_ = value;
      }
    }

    /// <summary>Field number for the "properties" field.</summary>
    public const int PropertiesFieldNumber = 5;
    private static readonly pb::FieldCodec<global::Nakama.MatchmakeMatched.Types.UserProperty> _repeated_properties_codec
        = pb::FieldCodec.ForMessage(42, global::Nakama.MatchmakeMatched.Types.UserProperty.Parser);
    private readonly pbc::RepeatedField<global::Nakama.MatchmakeMatched.Types.UserProperty> properties_ = new pbc::RepeatedField<global::Nakama.MatchmakeMatched.Types.UserProperty>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Nakama.MatchmakeMatched.Types.UserProperty> Properties {
      get { return properties_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as MatchmakeMatched);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(MatchmakeMatched other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Ticket != other.Ticket) return false;
      if (Token != other.Token) return false;
      if(!presences_.Equals(other.presences_)) return false;
      if (!object.Equals(Self, other.Self)) return false;
      if(!properties_.Equals(other.properties_)) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Ticket.Length != 0) hash ^= Ticket.GetHashCode();
      if (Token.Length != 0) hash ^= Token.GetHashCode();
      hash ^= presences_.GetHashCode();
      if (self_ != null) hash ^= Self.GetHashCode();
      hash ^= properties_.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Ticket.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Ticket);
      }
      if (Token.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(Token);
      }
      presences_.WriteTo(output, _repeated_presences_codec);
      if (self_ != null) {
        output.WriteRawTag(34);
        output.WriteMessage(Self);
      }
      properties_.WriteTo(output, _repeated_properties_codec);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Ticket.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Ticket);
      }
      if (Token.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Token);
      }
      size += presences_.CalculateSize(_repeated_presences_codec);
      if (self_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Self);
      }
      size += properties_.CalculateSize(_repeated_properties_codec);
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(MatchmakeMatched other) {
      if (other == null) {
        return;
      }
      if (other.Ticket.Length != 0) {
        Ticket = other.Ticket;
      }
      if (other.Token.Length != 0) {
        Token = other.Token;
      }
      presences_.Add(other.presences_);
      if (other.self_ != null) {
        if (self_ == null) {
          self_ = new global::Nakama.UserPresence();
        }
        Self.MergeFrom(other.Self);
      }
      properties_.Add(other.properties_);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            Ticket = input.ReadString();
            break;
          }
          case 18: {
            Token = input.ReadString();
            break;
          }
          case 26: {
            presences_.AddEntriesFrom(input, _repeated_presences_codec);
            break;
          }
          case 34: {
            if (self_ == null) {
              self_ = new global::Nakama.UserPresence();
            }
            input.ReadMessage(self_);
            break;
          }
          case 42: {
            properties_.AddEntriesFrom(input, _repeated_properties_codec);
            break;
          }
        }
      }
    }

    #region Nested types
    /// <summary>Container for nested types declared in the MatchmakeMatched message type.</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static partial class Types {
      /// <summary>
      //// Matched user presence and properties
      /// </summary>
      public sealed partial class UserProperty : pb::IMessage<UserProperty> {
        private static readonly pb::MessageParser<UserProperty> _parser = new pb::MessageParser<UserProperty>(() => new UserProperty());
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<UserProperty> Parser { get { return _parser; } }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor {
          get { return global::Nakama.MatchmakeMatched.Descriptor.NestedTypes[0]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor {
          get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public UserProperty() {
          OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public UserProperty(UserProperty other) : this() {
          userId_ = other.userId_;
          properties_ = other.properties_.Clone();
          filters_ = other.filters_.Clone();
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public UserProperty Clone() {
          return new UserProperty(this);
        }

        /// <summary>Field number for the "user_id" field.</summary>
        public const int UserIdFieldNumber = 1;
        private string userId_ = "";
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public string UserId {
          get { return userId_; }
          set {
            userId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
          }
        }

        /// <summary>Field number for the "properties" field.</summary>
        public const int PropertiesFieldNumber = 2;
        private static readonly pb::FieldCodec<global::Nakama.PropertyPair> _repeated_properties_codec
            = pb::FieldCodec.ForMessage(18, global::Nakama.PropertyPair.Parser);
        private readonly pbc::RepeatedField<global::Nakama.PropertyPair> properties_ = new pbc::RepeatedField<global::Nakama.PropertyPair>();
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public pbc::RepeatedField<global::Nakama.PropertyPair> Properties {
          get { return properties_; }
        }

        /// <summary>Field number for the "filters" field.</summary>
        public const int FiltersFieldNumber = 3;
        private static readonly pb::FieldCodec<global::Nakama.MatchmakeFilter> _repeated_filters_codec
            = pb::FieldCodec.ForMessage(26, global::Nakama.MatchmakeFilter.Parser);
        private readonly pbc::RepeatedField<global::Nakama.MatchmakeFilter> filters_ = new pbc::RepeatedField<global::Nakama.MatchmakeFilter>();
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public pbc::RepeatedField<global::Nakama.MatchmakeFilter> Filters {
          get { return filters_; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other) {
          return Equals(other as UserProperty);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(UserProperty other) {
          if (ReferenceEquals(other, null)) {
            return false;
          }
          if (ReferenceEquals(other, this)) {
            return true;
          }
          if (UserId != other.UserId) return false;
          if(!properties_.Equals(other.properties_)) return false;
          if(!filters_.Equals(other.filters_)) return false;
          return true;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode() {
          int hash = 1;
          if (UserId.Length != 0) hash ^= UserId.GetHashCode();
          hash ^= properties_.GetHashCode();
          hash ^= filters_.GetHashCode();
          return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString() {
          return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output) {
          if (UserId.Length != 0) {
            output.WriteRawTag(10);
            output.WriteString(UserId);
          }
          properties_.WriteTo(output, _repeated_properties_codec);
          filters_.WriteTo(output, _repeated_filters_codec);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize() {
          int size = 0;
          if (UserId.Length != 0) {
            size += 1 + pb::CodedOutputStream.ComputeStringSize(UserId);
          }
          size += properties_.CalculateSize(_repeated_properties_codec);
          size += filters_.CalculateSize(_repeated_filters_codec);
          return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(UserProperty other) {
          if (other == null) {
            return;
          }
          if (other.UserId.Length != 0) {
            UserId = other.UserId;
          }
          properties_.Add(other.properties_);
          filters_.Add(other.filters_);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input) {
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                input.SkipLastField();
                break;
              case 10: {
                UserId = input.ReadString();
                break;
              }
              case 18: {
                properties_.AddEntriesFrom(input, _repeated_properties_codec);
                break;
              }
              case 26: {
                filters_.AddEntriesFrom(input, _repeated_filters_codec);
                break;
              }
            }
          }
        }

      }

    }
    #endregion

  }

  /// <summary>
  ///*
  /// Match is the core domain type representing an on-going match.
  /// </summary>
  public sealed partial class Match : pb::IMessage<Match> {
    private static readonly pb::MessageParser<Match> _parser = new pb::MessageParser<Match>(() => new Match());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Match> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Nakama.ApiReflection.Descriptor.MessageTypes[55]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Match() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Match(Match other) : this() {
      matchId_ = other.matchId_;
      presences_ = other.presences_.Clone();
      Self = other.self_ != null ? other.Self.Clone() : null;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Match Clone() {
      return new Match(this);
    }

    /// <summary>Field number for the "match_id" field.</summary>
    public const int MatchIdFieldNumber = 1;
    private string matchId_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string MatchId {
      get { return matchId_; }
      set {
        matchId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "presences" field.</summary>
    public const int PresencesFieldNumber = 2;
    private static readonly pb::FieldCodec<global::Nakama.UserPresence> _repeated_presences_codec
        = pb::FieldCodec.ForMessage(18, global::Nakama.UserPresence.Parser);
    private readonly pbc::RepeatedField<global::Nakama.UserPresence> presences_ = new pbc::RepeatedField<global::Nakama.UserPresence>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Nakama.UserPresence> Presences {
      get { return presences_; }
    }

    /// <summary>Field number for the "self" field.</summary>
    public const int SelfFieldNumber = 3;
    private global::Nakama.UserPresence self_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Nakama.UserPresence Self {
      get { return self_; }
      set {
        self_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Match);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Match other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (MatchId != other.MatchId) return false;
      if(!presences_.Equals(other.presences_)) return false;
      if (!object.Equals(Self, other.Self)) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (MatchId.Length != 0) hash ^= MatchId.GetHashCode();
      hash ^= presences_.GetHashCode();
      if (self_ != null) hash ^= Self.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (MatchId.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(MatchId);
      }
      presences_.WriteTo(output, _repeated_presences_codec);
      if (self_ != null) {
        output.WriteRawTag(26);
        output.WriteMessage(Self);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (MatchId.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(MatchId);
      }
      size += presences_.CalculateSize(_repeated_presences_codec);
      if (self_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Self);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Match other) {
      if (other == null) {
        return;
      }
      if (other.MatchId.Length != 0) {
        MatchId = other.MatchId;
      }
      presences_.Add(other.presences_);
      if (other.self_ != null) {
        if (self_ == null) {
          self_ = new global::Nakama.UserPresence();
        }
        Self.MergeFrom(other.Self);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            MatchId = input.ReadString();
            break;
          }
          case 18: {
            presences_.AddEntriesFrom(input, _repeated_presences_codec);
            break;
          }
          case 26: {
            if (self_ == null) {
              self_ = new global::Nakama.UserPresence();
            }
            input.ReadMessage(self_);
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///*
  /// MatchPresence is the core domain type representing the users participating and leaving a match.
  /// </summary>
  public sealed partial class MatchPresence : pb::IMessage<MatchPresence> {
    private static readonly pb::MessageParser<MatchPresence> _parser = new pb::MessageParser<MatchPresence>(() => new MatchPresence());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<MatchPresence> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Nakama.ApiReflection.Descriptor.MessageTypes[56]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MatchPresence() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MatchPresence(MatchPresence other) : this() {
      matchId_ = other.matchId_;
      joins_ = other.joins_.Clone();
      leaves_ = other.leaves_.Clone();
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MatchPresence Clone() {
      return new MatchPresence(this);
    }

    /// <summary>Field number for the "match_id" field.</summary>
    public const int MatchIdFieldNumber = 1;
    private string matchId_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string MatchId {
      get { return matchId_; }
      set {
        matchId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "joins" field.</summary>
    public const int JoinsFieldNumber = 2;
    private static readonly pb::FieldCodec<global::Nakama.UserPresence> _repeated_joins_codec
        = pb::FieldCodec.ForMessage(18, global::Nakama.UserPresence.Parser);
    private readonly pbc::RepeatedField<global::Nakama.UserPresence> joins_ = new pbc::RepeatedField<global::Nakama.UserPresence>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Nakama.UserPresence> Joins {
      get { return joins_; }
    }

    /// <summary>Field number for the "leaves" field.</summary>
    public const int LeavesFieldNumber = 3;
    private static readonly pb::FieldCodec<global::Nakama.UserPresence> _repeated_leaves_codec
        = pb::FieldCodec.ForMessage(26, global::Nakama.UserPresence.Parser);
    private readonly pbc::RepeatedField<global::Nakama.UserPresence> leaves_ = new pbc::RepeatedField<global::Nakama.UserPresence>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Nakama.UserPresence> Leaves {
      get { return leaves_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as MatchPresence);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(MatchPresence other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (MatchId != other.MatchId) return false;
      if(!joins_.Equals(other.joins_)) return false;
      if(!leaves_.Equals(other.leaves_)) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (MatchId.Length != 0) hash ^= MatchId.GetHashCode();
      hash ^= joins_.GetHashCode();
      hash ^= leaves_.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (MatchId.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(MatchId);
      }
      joins_.WriteTo(output, _repeated_joins_codec);
      leaves_.WriteTo(output, _repeated_leaves_codec);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (MatchId.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(MatchId);
      }
      size += joins_.CalculateSize(_repeated_joins_codec);
      size += leaves_.CalculateSize(_repeated_leaves_codec);
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(MatchPresence other) {
      if (other == null) {
        return;
      }
      if (other.MatchId.Length != 0) {
        MatchId = other.MatchId;
      }
      joins_.Add(other.joins_);
      leaves_.Add(other.leaves_);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            MatchId = input.ReadString();
            break;
          }
          case 18: {
            joins_.AddEntriesFrom(input, _repeated_joins_codec);
            break;
          }
          case 26: {
            leaves_.AddEntriesFrom(input, _repeated_leaves_codec);
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///*
  /// TMatchCreate is used to create a new match from scratch. Use TMatchesJoin to make other users join the match.
  ///
  /// @returns TMatch
  /// </summary>
  public sealed partial class TMatchCreate : pb::IMessage<TMatchCreate> {
    private static readonly pb::MessageParser<TMatchCreate> _parser = new pb::MessageParser<TMatchCreate>(() => new TMatchCreate());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<TMatchCreate> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Nakama.ApiReflection.Descriptor.MessageTypes[57]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TMatchCreate() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TMatchCreate(TMatchCreate other) : this() {
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TMatchCreate Clone() {
      return new TMatchCreate(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as TMatchCreate);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(TMatchCreate other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(TMatchCreate other) {
      if (other == null) {
        return;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
        }
      }
    }

  }

  /// <summary>
  ///*
  /// TMatch contains a match object.
  /// </summary>
  public sealed partial class TMatch : pb::IMessage<TMatch> {
    private static readonly pb::MessageParser<TMatch> _parser = new pb::MessageParser<TMatch>(() => new TMatch());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<TMatch> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Nakama.ApiReflection.Descriptor.MessageTypes[58]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TMatch() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TMatch(TMatch other) : this() {
      Match = other.match_ != null ? other.Match.Clone() : null;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TMatch Clone() {
      return new TMatch(this);
    }

    /// <summary>Field number for the "match" field.</summary>
    public const int MatchFieldNumber = 1;
    private global::Nakama.Match match_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Nakama.Match Match {
      get { return match_; }
      set {
        match_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as TMatch);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(TMatch other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(Match, other.Match)) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (match_ != null) hash ^= Match.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (match_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(Match);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (match_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Match);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(TMatch other) {
      if (other == null) {
        return;
      }
      if (other.match_ != null) {
        if (match_ == null) {
          match_ = new global::Nakama.Match();
        }
        Match.MergeFrom(other.Match);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            if (match_ == null) {
              match_ = new global::Nakama.Match();
            }
            input.ReadMessage(match_);
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///*
  /// TMatchesJoin is used to join existing matches.
  ///
  /// @returns TMatches
  ///
  /// NOTE: The server only processes the first item of the list, and will ignore and logs a warning message for other items.
  /// </summary>
  public sealed partial class TMatchesJoin : pb::IMessage<TMatchesJoin> {
    private static readonly pb::MessageParser<TMatchesJoin> _parser = new pb::MessageParser<TMatchesJoin>(() => new TMatchesJoin());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<TMatchesJoin> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Nakama.ApiReflection.Descriptor.MessageTypes[59]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TMatchesJoin() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TMatchesJoin(TMatchesJoin other) : this() {
      matches_ = other.matches_.Clone();
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TMatchesJoin Clone() {
      return new TMatchesJoin(this);
    }

    /// <summary>Field number for the "matches" field.</summary>
    public const int MatchesFieldNumber = 1;
    private static readonly pb::FieldCodec<global::Nakama.TMatchesJoin.Types.MatchJoin> _repeated_matches_codec
        = pb::FieldCodec.ForMessage(10, global::Nakama.TMatchesJoin.Types.MatchJoin.Parser);
    private readonly pbc::RepeatedField<global::Nakama.TMatchesJoin.Types.MatchJoin> matches_ = new pbc::RepeatedField<global::Nakama.TMatchesJoin.Types.MatchJoin>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Nakama.TMatchesJoin.Types.MatchJoin> Matches {
      get { return matches_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as TMatchesJoin);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(TMatchesJoin other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!matches_.Equals(other.matches_)) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= matches_.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      matches_.WriteTo(output, _repeated_matches_codec);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += matches_.CalculateSize(_repeated_matches_codec);
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(TMatchesJoin other) {
      if (other == null) {
        return;
      }
      matches_.Add(other.matches_);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            matches_.AddEntriesFrom(input, _repeated_matches_codec);
            break;
          }
        }
      }
    }

    #region Nested types
    /// <summary>Container for nested types declared in the TMatchesJoin message type.</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static partial class Types {
      public sealed partial class MatchJoin : pb::IMessage<MatchJoin> {
        private static readonly pb::MessageParser<MatchJoin> _parser = new pb::MessageParser<MatchJoin>(() => new MatchJoin());
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<MatchJoin> Parser { get { return _parser; } }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor {
          get { return global::Nakama.TMatchesJoin.Descriptor.NestedTypes[0]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor {
          get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public MatchJoin() {
          OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public MatchJoin(MatchJoin other) : this() {
          switch (other.IdCase) {
            case IdOneofCase.MatchId:
              MatchId = other.MatchId;
              break;
            case IdOneofCase.Token:
              Token = other.Token;
              break;
          }

        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public MatchJoin Clone() {
          return new MatchJoin(this);
        }

        /// <summary>Field number for the "match_id" field.</summary>
        public const int MatchIdFieldNumber = 1;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public string MatchId {
          get { return idCase_ == IdOneofCase.MatchId ? (string) id_ : ""; }
          set {
            id_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
            idCase_ = IdOneofCase.MatchId;
          }
        }

        /// <summary>Field number for the "token" field.</summary>
        public const int TokenFieldNumber = 2;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public string Token {
          get { return idCase_ == IdOneofCase.Token ? (string) id_ : ""; }
          set {
            id_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
            idCase_ = IdOneofCase.Token;
          }
        }

        private object id_;
        /// <summary>Enum of possible cases for the "id" oneof.</summary>
        public enum IdOneofCase {
          None = 0,
          MatchId = 1,
          Token = 2,
        }
        private IdOneofCase idCase_ = IdOneofCase.None;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public IdOneofCase IdCase {
          get { return idCase_; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void ClearId() {
          idCase_ = IdOneofCase.None;
          id_ = null;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other) {
          return Equals(other as MatchJoin);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(MatchJoin other) {
          if (ReferenceEquals(other, null)) {
            return false;
          }
          if (ReferenceEquals(other, this)) {
            return true;
          }
          if (MatchId != other.MatchId) return false;
          if (Token != other.Token) return false;
          if (IdCase != other.IdCase) return false;
          return true;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode() {
          int hash = 1;
          if (idCase_ == IdOneofCase.MatchId) hash ^= MatchId.GetHashCode();
          if (idCase_ == IdOneofCase.Token) hash ^= Token.GetHashCode();
          hash ^= (int) idCase_;
          return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString() {
          return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output) {
          if (idCase_ == IdOneofCase.MatchId) {
            output.WriteRawTag(10);
            output.WriteString(MatchId);
          }
          if (idCase_ == IdOneofCase.Token) {
            output.WriteRawTag(18);
            output.WriteString(Token);
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize() {
          int size = 0;
          if (idCase_ == IdOneofCase.MatchId) {
            size += 1 + pb::CodedOutputStream.ComputeStringSize(MatchId);
          }
          if (idCase_ == IdOneofCase.Token) {
            size += 1 + pb::CodedOutputStream.ComputeStringSize(Token);
          }
          return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(MatchJoin other) {
          if (other == null) {
            return;
          }
          switch (other.IdCase) {
            case IdOneofCase.MatchId:
              MatchId = other.MatchId;
              break;
            case IdOneofCase.Token:
              Token = other.Token;
              break;
          }

        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input) {
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                input.SkipLastField();
                break;
              case 10: {
                MatchId = input.ReadString();
                break;
              }
              case 18: {
                Token = input.ReadString();
                break;
              }
            }
          }
        }

      }

    }
    #endregion

  }

  /// <summary>
  ///*
  /// TMatch contains a list of matches.
  /// </summary>
  public sealed partial class TMatches : pb::IMessage<TMatches> {
    private static readonly pb::MessageParser<TMatches> _parser = new pb::MessageParser<TMatches>(() => new TMatches());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<TMatches> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Nakama.ApiReflection.Descriptor.MessageTypes[60]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TMatches() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TMatches(TMatches other) : this() {
      matches_ = other.matches_.Clone();
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TMatches Clone() {
      return new TMatches(this);
    }

    /// <summary>Field number for the "matches" field.</summary>
    public const int MatchesFieldNumber = 1;
    private static readonly pb::FieldCodec<global::Nakama.Match> _repeated_matches_codec
        = pb::FieldCodec.ForMessage(10, global::Nakama.Match.Parser);
    private readonly pbc::RepeatedField<global::Nakama.Match> matches_ = new pbc::RepeatedField<global::Nakama.Match>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Nakama.Match> Matches {
      get { return matches_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as TMatches);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(TMatches other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!matches_.Equals(other.matches_)) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= matches_.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      matches_.WriteTo(output, _repeated_matches_codec);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += matches_.CalculateSize(_repeated_matches_codec);
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(TMatches other) {
      if (other == null) {
        return;
      }
      matches_.Add(other.matches_);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            matches_.AddEntriesFrom(input, _repeated_matches_codec);
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///*
  /// MatchDataSend is used to send match data to the server.
  /// </summary>
  public sealed partial class MatchDataSend : pb::IMessage<MatchDataSend> {
    private static readonly pb::MessageParser<MatchDataSend> _parser = new pb::MessageParser<MatchDataSend>(() => new MatchDataSend());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<MatchDataSend> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Nakama.ApiReflection.Descriptor.MessageTypes[61]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MatchDataSend() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MatchDataSend(MatchDataSend other) : this() {
      matchId_ = other.matchId_;
      opCode_ = other.opCode_;
      data_ = other.data_;
      presences_ = other.presences_.Clone();
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MatchDataSend Clone() {
      return new MatchDataSend(this);
    }

    /// <summary>Field number for the "match_id" field.</summary>
    public const int MatchIdFieldNumber = 1;
    private string matchId_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string MatchId {
      get { return matchId_; }
      set {
        matchId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "op_code" field.</summary>
    public const int OpCodeFieldNumber = 2;
    private long opCode_;
    /// <summary>
    //// Custom Op code to make disguishing different message types easier.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long OpCode {
      get { return opCode_; }
      set {
        opCode_ = value;
      }
    }

    /// <summary>Field number for the "data" field.</summary>
    public const int DataFieldNumber = 3;
    private pb::ByteString data_ = pb::ByteString.Empty;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString Data {
      get { return data_; }
      set {
        data_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "presences" field.</summary>
    public const int PresencesFieldNumber = 4;
    private static readonly pb::FieldCodec<global::Nakama.UserPresence> _repeated_presences_codec
        = pb::FieldCodec.ForMessage(34, global::Nakama.UserPresence.Parser);
    private readonly pbc::RepeatedField<global::Nakama.UserPresence> presences_ = new pbc::RepeatedField<global::Nakama.UserPresence>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Nakama.UserPresence> Presences {
      get { return presences_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as MatchDataSend);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(MatchDataSend other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (MatchId != other.MatchId) return false;
      if (OpCode != other.OpCode) return false;
      if (Data != other.Data) return false;
      if(!presences_.Equals(other.presences_)) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (MatchId.Length != 0) hash ^= MatchId.GetHashCode();
      if (OpCode != 0L) hash ^= OpCode.GetHashCode();
      if (Data.Length != 0) hash ^= Data.GetHashCode();
      hash ^= presences_.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (MatchId.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(MatchId);
      }
      if (OpCode != 0L) {
        output.WriteRawTag(16);
        output.WriteInt64(OpCode);
      }
      if (Data.Length != 0) {
        output.WriteRawTag(26);
        output.WriteBytes(Data);
      }
      presences_.WriteTo(output, _repeated_presences_codec);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (MatchId.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(MatchId);
      }
      if (OpCode != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(OpCode);
      }
      if (Data.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeBytesSize(Data);
      }
      size += presences_.CalculateSize(_repeated_presences_codec);
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(MatchDataSend other) {
      if (other == null) {
        return;
      }
      if (other.MatchId.Length != 0) {
        MatchId = other.MatchId;
      }
      if (other.OpCode != 0L) {
        OpCode = other.OpCode;
      }
      if (other.Data.Length != 0) {
        Data = other.Data;
      }
      presences_.Add(other.presences_);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            MatchId = input.ReadString();
            break;
          }
          case 16: {
            OpCode = input.ReadInt64();
            break;
          }
          case 26: {
            Data = input.ReadBytes();
            break;
          }
          case 34: {
            presences_.AddEntriesFrom(input, _repeated_presences_codec);
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///*
  /// MatchData is the core domain type representing a match data.
  /// </summary>
  public sealed partial class MatchData : pb::IMessage<MatchData> {
    private static readonly pb::MessageParser<MatchData> _parser = new pb::MessageParser<MatchData>(() => new MatchData());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<MatchData> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Nakama.ApiReflection.Descriptor.MessageTypes[62]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MatchData() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MatchData(MatchData other) : this() {
      matchId_ = other.matchId_;
      Presence = other.presence_ != null ? other.Presence.Clone() : null;
      opCode_ = other.opCode_;
      data_ = other.data_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MatchData Clone() {
      return new MatchData(this);
    }

    /// <summary>Field number for the "match_id" field.</summary>
    public const int MatchIdFieldNumber = 1;
    private string matchId_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string MatchId {
      get { return matchId_; }
      set {
        matchId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "presence" field.</summary>
    public const int PresenceFieldNumber = 2;
    private global::Nakama.UserPresence presence_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Nakama.UserPresence Presence {
      get { return presence_; }
      set {
        presence_ = value;
      }
    }

    /// <summary>Field number for the "op_code" field.</summary>
    public const int OpCodeFieldNumber = 3;
    private long opCode_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long OpCode {
      get { return opCode_; }
      set {
        opCode_ = value;
      }
    }

    /// <summary>Field number for the "data" field.</summary>
    public const int DataFieldNumber = 4;
    private pb::ByteString data_ = pb::ByteString.Empty;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString Data {
      get { return data_; }
      set {
        data_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as MatchData);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(MatchData other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (MatchId != other.MatchId) return false;
      if (!object.Equals(Presence, other.Presence)) return false;
      if (OpCode != other.OpCode) return false;
      if (Data != other.Data) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (MatchId.Length != 0) hash ^= MatchId.GetHashCode();
      if (presence_ != null) hash ^= Presence.GetHashCode();
      if (OpCode != 0L) hash ^= OpCode.GetHashCode();
      if (Data.Length != 0) hash ^= Data.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (MatchId.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(MatchId);
      }
      if (presence_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(Presence);
      }
      if (OpCode != 0L) {
        output.WriteRawTag(24);
        output.WriteInt64(OpCode);
      }
      if (Data.Length != 0) {
        output.WriteRawTag(34);
        output.WriteBytes(Data);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (MatchId.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(MatchId);
      }
      if (presence_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Presence);
      }
      if (OpCode != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(OpCode);
      }
      if (Data.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeBytesSize(Data);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(MatchData other) {
      if (other == null) {
        return;
      }
      if (other.MatchId.Length != 0) {
        MatchId = other.MatchId;
      }
      if (other.presence_ != null) {
        if (presence_ == null) {
          presence_ = new global::Nakama.UserPresence();
        }
        Presence.MergeFrom(other.Presence);
      }
      if (other.OpCode != 0L) {
        OpCode = other.OpCode;
      }
      if (other.Data.Length != 0) {
        Data = other.Data;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            MatchId = input.ReadString();
            break;
          }
          case 18: {
            if (presence_ == null) {
              presence_ = new global::Nakama.UserPresence();
            }
            input.ReadMessage(presence_);
            break;
          }
          case 24: {
            OpCode = input.ReadInt64();
            break;
          }
          case 34: {
            Data = input.ReadBytes();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///*
  /// TMatchesLeave is used to leave an existing matches.
  ///
  /// NOTE: The server only processes the first item of the list, and will ignore and logs a warning message for other items.
  /// </summary>
  public sealed partial class TMatchesLeave : pb::IMessage<TMatchesLeave> {
    private static readonly pb::MessageParser<TMatchesLeave> _parser = new pb::MessageParser<TMatchesLeave>(() => new TMatchesLeave());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<TMatchesLeave> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Nakama.ApiReflection.Descriptor.MessageTypes[63]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TMatchesLeave() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TMatchesLeave(TMatchesLeave other) : this() {
      matchIds_ = other.matchIds_.Clone();
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TMatchesLeave Clone() {
      return new TMatchesLeave(this);
    }

    /// <summary>Field number for the "match_ids" field.</summary>
    public const int MatchIdsFieldNumber = 1;
    private static readonly pb::FieldCodec<string> _repeated_matchIds_codec
        = pb::FieldCodec.ForString(10);
    private readonly pbc::RepeatedField<string> matchIds_ = new pbc::RepeatedField<string>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<string> MatchIds {
      get { return matchIds_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as TMatchesLeave);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(TMatchesLeave other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!matchIds_.Equals(other.matchIds_)) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= matchIds_.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      matchIds_.WriteTo(output, _repeated_matchIds_codec);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += matchIds_.CalculateSize(_repeated_matchIds_codec);
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(TMatchesLeave other) {
      if (other == null) {
        return;
      }
      matchIds_.Add(other.matchIds_);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            matchIds_.AddEntriesFrom(input, _repeated_matchIds_codec);
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///*
  /// TStorageList is used to list records from Storage
  ///
  /// @returns TStorageData
  /// </summary>
  public sealed partial class TStorageList : pb::IMessage<TStorageList> {
    private static readonly pb::MessageParser<TStorageList> _parser = new pb::MessageParser<TStorageList>(() => new TStorageList());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<TStorageList> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Nakama.ApiReflection.Descriptor.MessageTypes[64]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TStorageList() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TStorageList(TStorageList other) : this() {
      userId_ = other.userId_;
      bucket_ = other.bucket_;
      collection_ = other.collection_;
      limit_ = other.limit_;
      cursor_ = other.cursor_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TStorageList Clone() {
      return new TStorageList(this);
    }

    /// <summary>Field number for the "user_id" field.</summary>
    public const int UserIdFieldNumber = 1;
    private string userId_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string UserId {
      get { return userId_; }
      set {
        userId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "bucket" field.</summary>
    public const int BucketFieldNumber = 2;
    private string bucket_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Bucket {
      get { return bucket_; }
      set {
        bucket_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "collection" field.</summary>
    public const int CollectionFieldNumber = 3;
    private string collection_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Collection {
      get { return collection_; }
      set {
        collection_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "limit" field.</summary>
    public const int LimitFieldNumber = 4;
    private long limit_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long Limit {
      get { return limit_; }
      set {
        limit_ = value;
      }
    }

    /// <summary>Field number for the "cursor" field.</summary>
    public const int CursorFieldNumber = 5;
    private string cursor_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Cursor {
      get { return cursor_; }
      set {
        cursor_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as TStorageList);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(TStorageList other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (UserId != other.UserId) return false;
      if (Bucket != other.Bucket) return false;
      if (Collection != other.Collection) return false;
      if (Limit != other.Limit) return false;
      if (Cursor != other.Cursor) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (UserId.Length != 0) hash ^= UserId.GetHashCode();
      if (Bucket.Length != 0) hash ^= Bucket.GetHashCode();
      if (Collection.Length != 0) hash ^= Collection.GetHashCode();
      if (Limit != 0L) hash ^= Limit.GetHashCode();
      if (Cursor.Length != 0) hash ^= Cursor.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (UserId.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(UserId);
      }
      if (Bucket.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(Bucket);
      }
      if (Collection.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(Collection);
      }
      if (Limit != 0L) {
        output.WriteRawTag(32);
        output.WriteInt64(Limit);
      }
      if (Cursor.Length != 0) {
        output.WriteRawTag(42);
        output.WriteString(Cursor);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (UserId.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(UserId);
      }
      if (Bucket.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Bucket);
      }
      if (Collection.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Collection);
      }
      if (Limit != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(Limit);
      }
      if (Cursor.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Cursor);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(TStorageList other) {
      if (other == null) {
        return;
      }
      if (other.UserId.Length != 0) {
        UserId = other.UserId;
      }
      if (other.Bucket.Length != 0) {
        Bucket = other.Bucket;
      }
      if (other.Collection.Length != 0) {
        Collection = other.Collection;
      }
      if (other.Limit != 0L) {
        Limit = other.Limit;
      }
      if (other.Cursor.Length != 0) {
        Cursor = other.Cursor;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            UserId = input.ReadString();
            break;
          }
          case 18: {
            Bucket = input.ReadString();
            break;
          }
          case 26: {
            Collection = input.ReadString();
            break;
          }
          case 32: {
            Limit = input.ReadInt64();
            break;
          }
          case 42: {
            Cursor = input.ReadString();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///*
  /// TStorageFetch is used to retrieve a list of records from Storage
  ///
  /// @returns TStorageData
  /// </summary>
  public sealed partial class TStorageFetch : pb::IMessage<TStorageFetch> {
    private static readonly pb::MessageParser<TStorageFetch> _parser = new pb::MessageParser<TStorageFetch>(() => new TStorageFetch());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<TStorageFetch> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Nakama.ApiReflection.Descriptor.MessageTypes[65]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TStorageFetch() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TStorageFetch(TStorageFetch other) : this() {
      keys_ = other.keys_.Clone();
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TStorageFetch Clone() {
      return new TStorageFetch(this);
    }

    /// <summary>Field number for the "keys" field.</summary>
    public const int KeysFieldNumber = 1;
    private static readonly pb::FieldCodec<global::Nakama.TStorageFetch.Types.StorageKey> _repeated_keys_codec
        = pb::FieldCodec.ForMessage(10, global::Nakama.TStorageFetch.Types.StorageKey.Parser);
    private readonly pbc::RepeatedField<global::Nakama.TStorageFetch.Types.StorageKey> keys_ = new pbc::RepeatedField<global::Nakama.TStorageFetch.Types.StorageKey>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Nakama.TStorageFetch.Types.StorageKey> Keys {
      get { return keys_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as TStorageFetch);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(TStorageFetch other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!keys_.Equals(other.keys_)) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= keys_.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      keys_.WriteTo(output, _repeated_keys_codec);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += keys_.CalculateSize(_repeated_keys_codec);
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(TStorageFetch other) {
      if (other == null) {
        return;
      }
      keys_.Add(other.keys_);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            keys_.AddEntriesFrom(input, _repeated_keys_codec);
            break;
          }
        }
      }
    }

    #region Nested types
    /// <summary>Container for nested types declared in the TStorageFetch message type.</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static partial class Types {
      public sealed partial class StorageKey : pb::IMessage<StorageKey> {
        private static readonly pb::MessageParser<StorageKey> _parser = new pb::MessageParser<StorageKey>(() => new StorageKey());
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<StorageKey> Parser { get { return _parser; } }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor {
          get { return global::Nakama.TStorageFetch.Descriptor.NestedTypes[0]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor {
          get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public StorageKey() {
          OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public StorageKey(StorageKey other) : this() {
          bucket_ = other.bucket_;
          collection_ = other.collection_;
          record_ = other.record_;
          userId_ = other.userId_;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public StorageKey Clone() {
          return new StorageKey(this);
        }

        /// <summary>Field number for the "bucket" field.</summary>
        public const int BucketFieldNumber = 1;
        private string bucket_ = "";
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public string Bucket {
          get { return bucket_; }
          set {
            bucket_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
          }
        }

        /// <summary>Field number for the "collection" field.</summary>
        public const int CollectionFieldNumber = 2;
        private string collection_ = "";
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public string Collection {
          get { return collection_; }
          set {
            collection_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
          }
        }

        /// <summary>Field number for the "record" field.</summary>
        public const int RecordFieldNumber = 3;
        private string record_ = "";
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public string Record {
          get { return record_; }
          set {
            record_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
          }
        }

        /// <summary>Field number for the "user_id" field.</summary>
        public const int UserIdFieldNumber = 4;
        private string userId_ = "";
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public string UserId {
          get { return userId_; }
          set {
            userId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other) {
          return Equals(other as StorageKey);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(StorageKey other) {
          if (ReferenceEquals(other, null)) {
            return false;
          }
          if (ReferenceEquals(other, this)) {
            return true;
          }
          if (Bucket != other.Bucket) return false;
          if (Collection != other.Collection) return false;
          if (Record != other.Record) return false;
          if (UserId != other.UserId) return false;
          return true;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode() {
          int hash = 1;
          if (Bucket.Length != 0) hash ^= Bucket.GetHashCode();
          if (Collection.Length != 0) hash ^= Collection.GetHashCode();
          if (Record.Length != 0) hash ^= Record.GetHashCode();
          if (UserId.Length != 0) hash ^= UserId.GetHashCode();
          return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString() {
          return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output) {
          if (Bucket.Length != 0) {
            output.WriteRawTag(10);
            output.WriteString(Bucket);
          }
          if (Collection.Length != 0) {
            output.WriteRawTag(18);
            output.WriteString(Collection);
          }
          if (Record.Length != 0) {
            output.WriteRawTag(26);
            output.WriteString(Record);
          }
          if (UserId.Length != 0) {
            output.WriteRawTag(34);
            output.WriteString(UserId);
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize() {
          int size = 0;
          if (Bucket.Length != 0) {
            size += 1 + pb::CodedOutputStream.ComputeStringSize(Bucket);
          }
          if (Collection.Length != 0) {
            size += 1 + pb::CodedOutputStream.ComputeStringSize(Collection);
          }
          if (Record.Length != 0) {
            size += 1 + pb::CodedOutputStream.ComputeStringSize(Record);
          }
          if (UserId.Length != 0) {
            size += 1 + pb::CodedOutputStream.ComputeStringSize(UserId);
          }
          return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(StorageKey other) {
          if (other == null) {
            return;
          }
          if (other.Bucket.Length != 0) {
            Bucket = other.Bucket;
          }
          if (other.Collection.Length != 0) {
            Collection = other.Collection;
          }
          if (other.Record.Length != 0) {
            Record = other.Record;
          }
          if (other.UserId.Length != 0) {
            UserId = other.UserId;
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input) {
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                input.SkipLastField();
                break;
              case 10: {
                Bucket = input.ReadString();
                break;
              }
              case 18: {
                Collection = input.ReadString();
                break;
              }
              case 26: {
                Record = input.ReadString();
                break;
              }
              case 34: {
                UserId = input.ReadString();
                break;
              }
            }
          }
        }

      }

    }
    #endregion

  }

  /// <summary>
  ///*
  /// TStorageData contains a list of Storage data records.
  /// </summary>
  public sealed partial class TStorageData : pb::IMessage<TStorageData> {
    private static readonly pb::MessageParser<TStorageData> _parser = new pb::MessageParser<TStorageData>(() => new TStorageData());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<TStorageData> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Nakama.ApiReflection.Descriptor.MessageTypes[66]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TStorageData() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TStorageData(TStorageData other) : this() {
      data_ = other.data_.Clone();
      cursor_ = other.cursor_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TStorageData Clone() {
      return new TStorageData(this);
    }

    /// <summary>Field number for the "data" field.</summary>
    public const int DataFieldNumber = 1;
    private static readonly pb::FieldCodec<global::Nakama.TStorageData.Types.StorageData> _repeated_data_codec
        = pb::FieldCodec.ForMessage(10, global::Nakama.TStorageData.Types.StorageData.Parser);
    private readonly pbc::RepeatedField<global::Nakama.TStorageData.Types.StorageData> data_ = new pbc::RepeatedField<global::Nakama.TStorageData.Types.StorageData>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Nakama.TStorageData.Types.StorageData> Data {
      get { return data_; }
    }

    /// <summary>Field number for the "cursor" field.</summary>
    public const int CursorFieldNumber = 2;
    private string cursor_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Cursor {
      get { return cursor_; }
      set {
        cursor_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as TStorageData);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(TStorageData other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!data_.Equals(other.data_)) return false;
      if (Cursor != other.Cursor) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= data_.GetHashCode();
      if (Cursor.Length != 0) hash ^= Cursor.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      data_.WriteTo(output, _repeated_data_codec);
      if (Cursor.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(Cursor);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += data_.CalculateSize(_repeated_data_codec);
      if (Cursor.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Cursor);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(TStorageData other) {
      if (other == null) {
        return;
      }
      data_.Add(other.data_);
      if (other.Cursor.Length != 0) {
        Cursor = other.Cursor;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            data_.AddEntriesFrom(input, _repeated_data_codec);
            break;
          }
          case 18: {
            Cursor = input.ReadString();
            break;
          }
        }
      }
    }

    #region Nested types
    /// <summary>Container for nested types declared in the TStorageData message type.</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static partial class Types {
      public sealed partial class StorageData : pb::IMessage<StorageData> {
        private static readonly pb::MessageParser<StorageData> _parser = new pb::MessageParser<StorageData>(() => new StorageData());
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<StorageData> Parser { get { return _parser; } }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor {
          get { return global::Nakama.TStorageData.Descriptor.NestedTypes[0]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor {
          get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public StorageData() {
          OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public StorageData(StorageData other) : this() {
          bucket_ = other.bucket_;
          collection_ = other.collection_;
          record_ = other.record_;
          userId_ = other.userId_;
          value_ = other.value_;
          version_ = other.version_;
          permissionRead_ = other.permissionRead_;
          permissionWrite_ = other.permissionWrite_;
          createdAt_ = other.createdAt_;
          updatedAt_ = other.updatedAt_;
          expiresAt_ = other.expiresAt_;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public StorageData Clone() {
          return new StorageData(this);
        }

        /// <summary>Field number for the "bucket" field.</summary>
        public const int BucketFieldNumber = 1;
        private string bucket_ = "";
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public string Bucket {
          get { return bucket_; }
          set {
            bucket_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
          }
        }

        /// <summary>Field number for the "collection" field.</summary>
        public const int CollectionFieldNumber = 2;
        private string collection_ = "";
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public string Collection {
          get { return collection_; }
          set {
            collection_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
          }
        }

        /// <summary>Field number for the "record" field.</summary>
        public const int RecordFieldNumber = 3;
        private string record_ = "";
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public string Record {
          get { return record_; }
          set {
            record_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
          }
        }

        /// <summary>Field number for the "user_id" field.</summary>
        public const int UserIdFieldNumber = 4;
        private string userId_ = "";
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public string UserId {
          get { return userId_; }
          set {
            userId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
          }
        }

        /// <summary>Field number for the "value" field.</summary>
        public const int ValueFieldNumber = 5;
        private string value_ = "";
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public string Value {
          get { return value_; }
          set {
            value_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
          }
        }

        /// <summary>Field number for the "version" field.</summary>
        public const int VersionFieldNumber = 6;
        private string version_ = "";
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public string Version {
          get { return version_; }
          set {
            version_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
          }
        }

        /// <summary>Field number for the "permission_read" field.</summary>
        public const int PermissionReadFieldNumber = 7;
        private int permissionRead_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int PermissionRead {
          get { return permissionRead_; }
          set {
            permissionRead_ = value;
          }
        }

        /// <summary>Field number for the "permission_write" field.</summary>
        public const int PermissionWriteFieldNumber = 8;
        private int permissionWrite_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int PermissionWrite {
          get { return permissionWrite_; }
          set {
            permissionWrite_ = value;
          }
        }

        /// <summary>Field number for the "created_at" field.</summary>
        public const int CreatedAtFieldNumber = 9;
        private long createdAt_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public long CreatedAt {
          get { return createdAt_; }
          set {
            createdAt_ = value;
          }
        }

        /// <summary>Field number for the "updated_at" field.</summary>
        public const int UpdatedAtFieldNumber = 10;
        private long updatedAt_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public long UpdatedAt {
          get { return updatedAt_; }
          set {
            updatedAt_ = value;
          }
        }

        /// <summary>Field number for the "expires_at" field.</summary>
        public const int ExpiresAtFieldNumber = 11;
        private long expiresAt_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public long ExpiresAt {
          get { return expiresAt_; }
          set {
            expiresAt_ = value;
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other) {
          return Equals(other as StorageData);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(StorageData other) {
          if (ReferenceEquals(other, null)) {
            return false;
          }
          if (ReferenceEquals(other, this)) {
            return true;
          }
          if (Bucket != other.Bucket) return false;
          if (Collection != other.Collection) return false;
          if (Record != other.Record) return false;
          if (UserId != other.UserId) return false;
          if (Value != other.Value) return false;
          if (Version != other.Version) return false;
          if (PermissionRead != other.PermissionRead) return false;
          if (PermissionWrite != other.PermissionWrite) return false;
          if (CreatedAt != other.CreatedAt) return false;
          if (UpdatedAt != other.UpdatedAt) return false;
          if (ExpiresAt != other.ExpiresAt) return false;
          return true;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode() {
          int hash = 1;
          if (Bucket.Length != 0) hash ^= Bucket.GetHashCode();
          if (Collection.Length != 0) hash ^= Collection.GetHashCode();
          if (Record.Length != 0) hash ^= Record.GetHashCode();
          if (UserId.Length != 0) hash ^= UserId.GetHashCode();
          if (Value.Length != 0) hash ^= Value.GetHashCode();
          if (Version.Length != 0) hash ^= Version.GetHashCode();
          if (PermissionRead != 0) hash ^= PermissionRead.GetHashCode();
          if (PermissionWrite != 0) hash ^= PermissionWrite.GetHashCode();
          if (CreatedAt != 0L) hash ^= CreatedAt.GetHashCode();
          if (UpdatedAt != 0L) hash ^= UpdatedAt.GetHashCode();
          if (ExpiresAt != 0L) hash ^= ExpiresAt.GetHashCode();
          return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString() {
          return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output) {
          if (Bucket.Length != 0) {
            output.WriteRawTag(10);
            output.WriteString(Bucket);
          }
          if (Collection.Length != 0) {
            output.WriteRawTag(18);
            output.WriteString(Collection);
          }
          if (Record.Length != 0) {
            output.WriteRawTag(26);
            output.WriteString(Record);
          }
          if (UserId.Length != 0) {
            output.WriteRawTag(34);
            output.WriteString(UserId);
          }
          if (Value.Length != 0) {
            output.WriteRawTag(42);
            output.WriteString(Value);
          }
          if (Version.Length != 0) {
            output.WriteRawTag(50);
            output.WriteString(Version);
          }
          if (PermissionRead != 0) {
            output.WriteRawTag(56);
            output.WriteInt32(PermissionRead);
          }
          if (PermissionWrite != 0) {
            output.WriteRawTag(64);
            output.WriteInt32(PermissionWrite);
          }
          if (CreatedAt != 0L) {
            output.WriteRawTag(72);
            output.WriteInt64(CreatedAt);
          }
          if (UpdatedAt != 0L) {
            output.WriteRawTag(80);
            output.WriteInt64(UpdatedAt);
          }
          if (ExpiresAt != 0L) {
            output.WriteRawTag(88);
            output.WriteInt64(ExpiresAt);
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize() {
          int size = 0;
          if (Bucket.Length != 0) {
            size += 1 + pb::CodedOutputStream.ComputeStringSize(Bucket);
          }
          if (Collection.Length != 0) {
            size += 1 + pb::CodedOutputStream.ComputeStringSize(Collection);
          }
          if (Record.Length != 0) {
            size += 1 + pb::CodedOutputStream.ComputeStringSize(Record);
          }
          if (UserId.Length != 0) {
            size += 1 + pb::CodedOutputStream.ComputeStringSize(UserId);
          }
          if (Value.Length != 0) {
            size += 1 + pb::CodedOutputStream.ComputeStringSize(Value);
          }
          if (Version.Length != 0) {
            size += 1 + pb::CodedOutputStream.ComputeStringSize(Version);
          }
          if (PermissionRead != 0) {
            size += 1 + pb::CodedOutputStream.ComputeInt32Size(PermissionRead);
          }
          if (PermissionWrite != 0) {
            size += 1 + pb::CodedOutputStream.ComputeInt32Size(PermissionWrite);
          }
          if (CreatedAt != 0L) {
            size += 1 + pb::CodedOutputStream.ComputeInt64Size(CreatedAt);
          }
          if (UpdatedAt != 0L) {
            size += 1 + pb::CodedOutputStream.ComputeInt64Size(UpdatedAt);
          }
          if (ExpiresAt != 0L) {
            size += 1 + pb::CodedOutputStream.ComputeInt64Size(ExpiresAt);
          }
          return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(StorageData other) {
          if (other == null) {
            return;
          }
          if (other.Bucket.Length != 0) {
            Bucket = other.Bucket;
          }
          if (other.Collection.Length != 0) {
            Collection = other.Collection;
          }
          if (other.Record.Length != 0) {
            Record = other.Record;
          }
          if (other.UserId.Length != 0) {
            UserId = other.UserId;
          }
          if (other.Value.Length != 0) {
            Value = other.Value;
          }
          if (other.Version.Length != 0) {
            Version = other.Version;
          }
          if (other.PermissionRead != 0) {
            PermissionRead = other.PermissionRead;
          }
          if (other.PermissionWrite != 0) {
            PermissionWrite = other.PermissionWrite;
          }
          if (other.CreatedAt != 0L) {
            CreatedAt = other.CreatedAt;
          }
          if (other.UpdatedAt != 0L) {
            UpdatedAt = other.UpdatedAt;
          }
          if (other.ExpiresAt != 0L) {
            ExpiresAt = other.ExpiresAt;
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input) {
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                input.SkipLastField();
                break;
              case 10: {
                Bucket = input.ReadString();
                break;
              }
              case 18: {
                Collection = input.ReadString();
                break;
              }
              case 26: {
                Record = input.ReadString();
                break;
              }
              case 34: {
                UserId = input.ReadString();
                break;
              }
              case 42: {
                Value = input.ReadString();
                break;
              }
              case 50: {
                Version = input.ReadString();
                break;
              }
              case 56: {
                PermissionRead = input.ReadInt32();
                break;
              }
              case 64: {
                PermissionWrite = input.ReadInt32();
                break;
              }
              case 72: {
                CreatedAt = input.ReadInt64();
                break;
              }
              case 80: {
                UpdatedAt = input.ReadInt64();
                break;
              }
              case 88: {
                ExpiresAt = input.ReadInt64();
                break;
              }
            }
          }
        }

      }

    }
    #endregion

  }

  /// <summary>
  ///*
  /// TStorageWrite is used to store a list of records to Storage.
  ///
  /// The server provides transactional gurantuees. If one record fails to be inserted,
  /// the entire operation is rolled backed and marked as an error.
  ///
  /// @returns TStorageKey
  /// </summary>
  public sealed partial class TStorageWrite : pb::IMessage<TStorageWrite> {
    private static readonly pb::MessageParser<TStorageWrite> _parser = new pb::MessageParser<TStorageWrite>(() => new TStorageWrite());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<TStorageWrite> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Nakama.ApiReflection.Descriptor.MessageTypes[67]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TStorageWrite() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TStorageWrite(TStorageWrite other) : this() {
      data_ = other.data_.Clone();
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TStorageWrite Clone() {
      return new TStorageWrite(this);
    }

    /// <summary>Field number for the "data" field.</summary>
    public const int DataFieldNumber = 3;
    private static readonly pb::FieldCodec<global::Nakama.TStorageWrite.Types.StorageData> _repeated_data_codec
        = pb::FieldCodec.ForMessage(26, global::Nakama.TStorageWrite.Types.StorageData.Parser);
    private readonly pbc::RepeatedField<global::Nakama.TStorageWrite.Types.StorageData> data_ = new pbc::RepeatedField<global::Nakama.TStorageWrite.Types.StorageData>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Nakama.TStorageWrite.Types.StorageData> Data {
      get { return data_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as TStorageWrite);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(TStorageWrite other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!data_.Equals(other.data_)) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= data_.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      data_.WriteTo(output, _repeated_data_codec);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += data_.CalculateSize(_repeated_data_codec);
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(TStorageWrite other) {
      if (other == null) {
        return;
      }
      data_.Add(other.data_);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 26: {
            data_.AddEntriesFrom(input, _repeated_data_codec);
            break;
          }
        }
      }
    }

    #region Nested types
    /// <summary>Container for nested types declared in the TStorageWrite message type.</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static partial class Types {
      public sealed partial class StorageData : pb::IMessage<StorageData> {
        private static readonly pb::MessageParser<StorageData> _parser = new pb::MessageParser<StorageData>(() => new StorageData());
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<StorageData> Parser { get { return _parser; } }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor {
          get { return global::Nakama.TStorageWrite.Descriptor.NestedTypes[0]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor {
          get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public StorageData() {
          OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public StorageData(StorageData other) : this() {
          bucket_ = other.bucket_;
          collection_ = other.collection_;
          record_ = other.record_;
          value_ = other.value_;
          version_ = other.version_;
          permissionRead_ = other.permissionRead_;
          permissionWrite_ = other.permissionWrite_;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public StorageData Clone() {
          return new StorageData(this);
        }

        /// <summary>Field number for the "bucket" field.</summary>
        public const int BucketFieldNumber = 1;
        private string bucket_ = "";
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public string Bucket {
          get { return bucket_; }
          set {
            bucket_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
          }
        }

        /// <summary>Field number for the "collection" field.</summary>
        public const int CollectionFieldNumber = 2;
        private string collection_ = "";
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public string Collection {
          get { return collection_; }
          set {
            collection_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
          }
        }

        /// <summary>Field number for the "record" field.</summary>
        public const int RecordFieldNumber = 3;
        private string record_ = "";
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public string Record {
          get { return record_; }
          set {
            record_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
          }
        }

        /// <summary>Field number for the "value" field.</summary>
        public const int ValueFieldNumber = 4;
        private string value_ = "";
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public string Value {
          get { return value_; }
          set {
            value_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
          }
        }

        /// <summary>Field number for the "version" field.</summary>
        public const int VersionFieldNumber = 5;
        private string version_ = "";
        /// <summary>
        /// if-match and if-none-match
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public string Version {
          get { return version_; }
          set {
            version_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
          }
        }

        /// <summary>Field number for the "permission_read" field.</summary>
        public const int PermissionReadFieldNumber = 6;
        private int permissionRead_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int PermissionRead {
          get { return permissionRead_; }
          set {
            permissionRead_ = value;
          }
        }

        /// <summary>Field number for the "permission_write" field.</summary>
        public const int PermissionWriteFieldNumber = 7;
        private int permissionWrite_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int PermissionWrite {
          get { return permissionWrite_; }
          set {
            permissionWrite_ = value;
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other) {
          return Equals(other as StorageData);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(StorageData other) {
          if (ReferenceEquals(other, null)) {
            return false;
          }
          if (ReferenceEquals(other, this)) {
            return true;
          }
          if (Bucket != other.Bucket) return false;
          if (Collection != other.Collection) return false;
          if (Record != other.Record) return false;
          if (Value != other.Value) return false;
          if (Version != other.Version) return false;
          if (PermissionRead != other.PermissionRead) return false;
          if (PermissionWrite != other.PermissionWrite) return false;
          return true;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode() {
          int hash = 1;
          if (Bucket.Length != 0) hash ^= Bucket.GetHashCode();
          if (Collection.Length != 0) hash ^= Collection.GetHashCode();
          if (Record.Length != 0) hash ^= Record.GetHashCode();
          if (Value.Length != 0) hash ^= Value.GetHashCode();
          if (Version.Length != 0) hash ^= Version.GetHashCode();
          if (PermissionRead != 0) hash ^= PermissionRead.GetHashCode();
          if (PermissionWrite != 0) hash ^= PermissionWrite.GetHashCode();
          return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString() {
          return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output) {
          if (Bucket.Length != 0) {
            output.WriteRawTag(10);
            output.WriteString(Bucket);
          }
          if (Collection.Length != 0) {
            output.WriteRawTag(18);
            output.WriteString(Collection);
          }
          if (Record.Length != 0) {
            output.WriteRawTag(26);
            output.WriteString(Record);
          }
          if (Value.Length != 0) {
            output.WriteRawTag(34);
            output.WriteString(Value);
          }
          if (Version.Length != 0) {
            output.WriteRawTag(42);
            output.WriteString(Version);
          }
          if (PermissionRead != 0) {
            output.WriteRawTag(48);
            output.WriteInt32(PermissionRead);
          }
          if (PermissionWrite != 0) {
            output.WriteRawTag(56);
            output.WriteInt32(PermissionWrite);
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize() {
          int size = 0;
          if (Bucket.Length != 0) {
            size += 1 + pb::CodedOutputStream.ComputeStringSize(Bucket);
          }
          if (Collection.Length != 0) {
            size += 1 + pb::CodedOutputStream.ComputeStringSize(Collection);
          }
          if (Record.Length != 0) {
            size += 1 + pb::CodedOutputStream.ComputeStringSize(Record);
          }
          if (Value.Length != 0) {
            size += 1 + pb::CodedOutputStream.ComputeStringSize(Value);
          }
          if (Version.Length != 0) {
            size += 1 + pb::CodedOutputStream.ComputeStringSize(Version);
          }
          if (PermissionRead != 0) {
            size += 1 + pb::CodedOutputStream.ComputeInt32Size(PermissionRead);
          }
          if (PermissionWrite != 0) {
            size += 1 + pb::CodedOutputStream.ComputeInt32Size(PermissionWrite);
          }
          return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(StorageData other) {
          if (other == null) {
            return;
          }
          if (other.Bucket.Length != 0) {
            Bucket = other.Bucket;
          }
          if (other.Collection.Length != 0) {
            Collection = other.Collection;
          }
          if (other.Record.Length != 0) {
            Record = other.Record;
          }
          if (other.Value.Length != 0) {
            Value = other.Value;
          }
          if (other.Version.Length != 0) {
            Version = other.Version;
          }
          if (other.PermissionRead != 0) {
            PermissionRead = other.PermissionRead;
          }
          if (other.PermissionWrite != 0) {
            PermissionWrite = other.PermissionWrite;
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input) {
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                input.SkipLastField();
                break;
              case 10: {
                Bucket = input.ReadString();
                break;
              }
              case 18: {
                Collection = input.ReadString();
                break;
              }
              case 26: {
                Record = input.ReadString();
                break;
              }
              case 34: {
                Value = input.ReadString();
                break;
              }
              case 42: {
                Version = input.ReadString();
                break;
              }
              case 48: {
                PermissionRead = input.ReadInt32();
                break;
              }
              case 56: {
                PermissionWrite = input.ReadInt32();
                break;
              }
            }
          }
        }

      }

    }
    #endregion

  }

  /// <summary>
  ///*
  /// TStorageUpdate is used to update a list of records in Storage.
  ///
  /// The server provides transactional gurantuees. If one record fails to be updated,
  /// the entire operation is rolled backed and marked as an error.
  ///
  /// @returns TStorageKey
  /// </summary>
  public sealed partial class TStorageUpdate : pb::IMessage<TStorageUpdate> {
    private static readonly pb::MessageParser<TStorageUpdate> _parser = new pb::MessageParser<TStorageUpdate>(() => new TStorageUpdate());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<TStorageUpdate> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Nakama.ApiReflection.Descriptor.MessageTypes[68]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TStorageUpdate() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TStorageUpdate(TStorageUpdate other) : this() {
      updates_ = other.updates_.Clone();
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TStorageUpdate Clone() {
      return new TStorageUpdate(this);
    }

    /// <summary>Field number for the "updates" field.</summary>
    public const int UpdatesFieldNumber = 1;
    private static readonly pb::FieldCodec<global::Nakama.TStorageUpdate.Types.StorageUpdate> _repeated_updates_codec
        = pb::FieldCodec.ForMessage(10, global::Nakama.TStorageUpdate.Types.StorageUpdate.Parser);
    private readonly pbc::RepeatedField<global::Nakama.TStorageUpdate.Types.StorageUpdate> updates_ = new pbc::RepeatedField<global::Nakama.TStorageUpdate.Types.StorageUpdate>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Nakama.TStorageUpdate.Types.StorageUpdate> Updates {
      get { return updates_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as TStorageUpdate);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(TStorageUpdate other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!updates_.Equals(other.updates_)) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= updates_.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      updates_.WriteTo(output, _repeated_updates_codec);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += updates_.CalculateSize(_repeated_updates_codec);
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(TStorageUpdate other) {
      if (other == null) {
        return;
      }
      updates_.Add(other.updates_);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            updates_.AddEntriesFrom(input, _repeated_updates_codec);
            break;
          }
        }
      }
    }

    #region Nested types
    /// <summary>Container for nested types declared in the TStorageUpdate message type.</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static partial class Types {
      public sealed partial class StorageUpdate : pb::IMessage<StorageUpdate> {
        private static readonly pb::MessageParser<StorageUpdate> _parser = new pb::MessageParser<StorageUpdate>(() => new StorageUpdate());
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<StorageUpdate> Parser { get { return _parser; } }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor {
          get { return global::Nakama.TStorageUpdate.Descriptor.NestedTypes[0]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor {
          get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public StorageUpdate() {
          OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public StorageUpdate(StorageUpdate other) : this() {
          Key = other.key_ != null ? other.Key.Clone() : null;
          permissionRead_ = other.permissionRead_;
          permissionWrite_ = other.permissionWrite_;
          ops_ = other.ops_.Clone();
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public StorageUpdate Clone() {
          return new StorageUpdate(this);
        }

        /// <summary>Field number for the "key" field.</summary>
        public const int KeyFieldNumber = 1;
        private global::Nakama.TStorageUpdate.Types.StorageUpdate.Types.StorageKey key_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public global::Nakama.TStorageUpdate.Types.StorageUpdate.Types.StorageKey Key {
          get { return key_; }
          set {
            key_ = value;
          }
        }

        /// <summary>Field number for the "permission_read" field.</summary>
        public const int PermissionReadFieldNumber = 2;
        private int permissionRead_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int PermissionRead {
          get { return permissionRead_; }
          set {
            permissionRead_ = value;
          }
        }

        /// <summary>Field number for the "permission_write" field.</summary>
        public const int PermissionWriteFieldNumber = 3;
        private int permissionWrite_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int PermissionWrite {
          get { return permissionWrite_; }
          set {
            permissionWrite_ = value;
          }
        }

        /// <summary>Field number for the "ops" field.</summary>
        public const int OpsFieldNumber = 4;
        private static readonly pb::FieldCodec<global::Nakama.TStorageUpdate.Types.StorageUpdate.Types.UpdateOp> _repeated_ops_codec
            = pb::FieldCodec.ForMessage(34, global::Nakama.TStorageUpdate.Types.StorageUpdate.Types.UpdateOp.Parser);
        private readonly pbc::RepeatedField<global::Nakama.TStorageUpdate.Types.StorageUpdate.Types.UpdateOp> ops_ = new pbc::RepeatedField<global::Nakama.TStorageUpdate.Types.StorageUpdate.Types.UpdateOp>();
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public pbc::RepeatedField<global::Nakama.TStorageUpdate.Types.StorageUpdate.Types.UpdateOp> Ops {
          get { return ops_; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other) {
          return Equals(other as StorageUpdate);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(StorageUpdate other) {
          if (ReferenceEquals(other, null)) {
            return false;
          }
          if (ReferenceEquals(other, this)) {
            return true;
          }
          if (!object.Equals(Key, other.Key)) return false;
          if (PermissionRead != other.PermissionRead) return false;
          if (PermissionWrite != other.PermissionWrite) return false;
          if(!ops_.Equals(other.ops_)) return false;
          return true;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode() {
          int hash = 1;
          if (key_ != null) hash ^= Key.GetHashCode();
          if (PermissionRead != 0) hash ^= PermissionRead.GetHashCode();
          if (PermissionWrite != 0) hash ^= PermissionWrite.GetHashCode();
          hash ^= ops_.GetHashCode();
          return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString() {
          return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output) {
          if (key_ != null) {
            output.WriteRawTag(10);
            output.WriteMessage(Key);
          }
          if (PermissionRead != 0) {
            output.WriteRawTag(16);
            output.WriteInt32(PermissionRead);
          }
          if (PermissionWrite != 0) {
            output.WriteRawTag(24);
            output.WriteInt32(PermissionWrite);
          }
          ops_.WriteTo(output, _repeated_ops_codec);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize() {
          int size = 0;
          if (key_ != null) {
            size += 1 + pb::CodedOutputStream.ComputeMessageSize(Key);
          }
          if (PermissionRead != 0) {
            size += 1 + pb::CodedOutputStream.ComputeInt32Size(PermissionRead);
          }
          if (PermissionWrite != 0) {
            size += 1 + pb::CodedOutputStream.ComputeInt32Size(PermissionWrite);
          }
          size += ops_.CalculateSize(_repeated_ops_codec);
          return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(StorageUpdate other) {
          if (other == null) {
            return;
          }
          if (other.key_ != null) {
            if (key_ == null) {
              key_ = new global::Nakama.TStorageUpdate.Types.StorageUpdate.Types.StorageKey();
            }
            Key.MergeFrom(other.Key);
          }
          if (other.PermissionRead != 0) {
            PermissionRead = other.PermissionRead;
          }
          if (other.PermissionWrite != 0) {
            PermissionWrite = other.PermissionWrite;
          }
          ops_.Add(other.ops_);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input) {
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                input.SkipLastField();
                break;
              case 10: {
                if (key_ == null) {
                  key_ = new global::Nakama.TStorageUpdate.Types.StorageUpdate.Types.StorageKey();
                }
                input.ReadMessage(key_);
                break;
              }
              case 16: {
                PermissionRead = input.ReadInt32();
                break;
              }
              case 24: {
                PermissionWrite = input.ReadInt32();
                break;
              }
              case 34: {
                ops_.AddEntriesFrom(input, _repeated_ops_codec);
                break;
              }
            }
          }
        }

        #region Nested types
        /// <summary>Container for nested types declared in the StorageUpdate message type.</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static partial class Types {
          public sealed partial class UpdateOp : pb::IMessage<UpdateOp> {
            private static readonly pb::MessageParser<UpdateOp> _parser = new pb::MessageParser<UpdateOp>(() => new UpdateOp());
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public static pb::MessageParser<UpdateOp> Parser { get { return _parser; } }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public static pbr::MessageDescriptor Descriptor {
              get { return global::Nakama.TStorageUpdate.Types.StorageUpdate.Descriptor.NestedTypes[0]; }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            pbr::MessageDescriptor pb::IMessage.Descriptor {
              get { return Descriptor; }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public UpdateOp() {
              OnConstruction();
            }

            partial void OnConstruction();

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public UpdateOp(UpdateOp other) : this() {
              op_ = other.op_;
              path_ = other.path_;
              value_ = other.value_;
              from_ = other.from_;
              conditional_ = other.conditional_;
              assert_ = other.assert_;
              ops_ = other.ops_.Clone();
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public UpdateOp Clone() {
              return new UpdateOp(this);
            }

            /// <summary>Field number for the "op" field.</summary>
            public const int OpFieldNumber = 1;
            private int op_;
            /// <summary>
            //// Update op code - must be one of the UpdateOpCode enums above.
            /// </summary>
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public int Op {
              get { return op_; }
              set {
                op_ = value;
              }
            }

            /// <summary>Field number for the "path" field.</summary>
            public const int PathFieldNumber = 2;
            private string path_ = "";
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public string Path {
              get { return path_; }
              set {
                path_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
              }
            }

            /// <summary>Field number for the "value" field.</summary>
            public const int ValueFieldNumber = 3;
            private string value_ = "";
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public string Value {
              get { return value_; }
              set {
                value_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
              }
            }

            /// <summary>Field number for the "from" field.</summary>
            public const int FromFieldNumber = 4;
            private string from_ = "";
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public string From {
              get { return from_; }
              set {
                from_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
              }
            }

            /// <summary>Field number for the "conditional" field.</summary>
            public const int ConditionalFieldNumber = 5;
            private bool conditional_;
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public bool Conditional {
              get { return conditional_; }
              set {
                conditional_ = value;
              }
            }

            /// <summary>Field number for the "assert" field.</summary>
            public const int AssertFieldNumber = 6;
            private long assert_;
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public long Assert {
              get { return assert_; }
              set {
                assert_ = value;
              }
            }

            /// <summary>Field number for the "ops" field.</summary>
            public const int OpsFieldNumber = 7;
            private static readonly pb::FieldCodec<global::Nakama.TStorageUpdate.Types.StorageUpdate.Types.UpdateOp> _repeated_ops_codec
                = pb::FieldCodec.ForMessage(58, global::Nakama.TStorageUpdate.Types.StorageUpdate.Types.UpdateOp.Parser);
            private readonly pbc::RepeatedField<global::Nakama.TStorageUpdate.Types.StorageUpdate.Types.UpdateOp> ops_ = new pbc::RepeatedField<global::Nakama.TStorageUpdate.Types.StorageUpdate.Types.UpdateOp>();
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public pbc::RepeatedField<global::Nakama.TStorageUpdate.Types.StorageUpdate.Types.UpdateOp> Ops {
              get { return ops_; }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public override bool Equals(object other) {
              return Equals(other as UpdateOp);
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public bool Equals(UpdateOp other) {
              if (ReferenceEquals(other, null)) {
                return false;
              }
              if (ReferenceEquals(other, this)) {
                return true;
              }
              if (Op != other.Op) return false;
              if (Path != other.Path) return false;
              if (Value != other.Value) return false;
              if (From != other.From) return false;
              if (Conditional != other.Conditional) return false;
              if (Assert != other.Assert) return false;
              if(!ops_.Equals(other.ops_)) return false;
              return true;
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public override int GetHashCode() {
              int hash = 1;
              if (Op != 0) hash ^= Op.GetHashCode();
              if (Path.Length != 0) hash ^= Path.GetHashCode();
              if (Value.Length != 0) hash ^= Value.GetHashCode();
              if (From.Length != 0) hash ^= From.GetHashCode();
              if (Conditional != false) hash ^= Conditional.GetHashCode();
              if (Assert != 0L) hash ^= Assert.GetHashCode();
              hash ^= ops_.GetHashCode();
              return hash;
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public override string ToString() {
              return pb::JsonFormatter.ToDiagnosticString(this);
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public void WriteTo(pb::CodedOutputStream output) {
              if (Op != 0) {
                output.WriteRawTag(8);
                output.WriteInt32(Op);
              }
              if (Path.Length != 0) {
                output.WriteRawTag(18);
                output.WriteString(Path);
              }
              if (Value.Length != 0) {
                output.WriteRawTag(26);
                output.WriteString(Value);
              }
              if (From.Length != 0) {
                output.WriteRawTag(34);
                output.WriteString(From);
              }
              if (Conditional != false) {
                output.WriteRawTag(40);
                output.WriteBool(Conditional);
              }
              if (Assert != 0L) {
                output.WriteRawTag(48);
                output.WriteInt64(Assert);
              }
              ops_.WriteTo(output, _repeated_ops_codec);
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public int CalculateSize() {
              int size = 0;
              if (Op != 0) {
                size += 1 + pb::CodedOutputStream.ComputeInt32Size(Op);
              }
              if (Path.Length != 0) {
                size += 1 + pb::CodedOutputStream.ComputeStringSize(Path);
              }
              if (Value.Length != 0) {
                size += 1 + pb::CodedOutputStream.ComputeStringSize(Value);
              }
              if (From.Length != 0) {
                size += 1 + pb::CodedOutputStream.ComputeStringSize(From);
              }
              if (Conditional != false) {
                size += 1 + 1;
              }
              if (Assert != 0L) {
                size += 1 + pb::CodedOutputStream.ComputeInt64Size(Assert);
              }
              size += ops_.CalculateSize(_repeated_ops_codec);
              return size;
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public void MergeFrom(UpdateOp other) {
              if (other == null) {
                return;
              }
              if (other.Op != 0) {
                Op = other.Op;
              }
              if (other.Path.Length != 0) {
                Path = other.Path;
              }
              if (other.Value.Length != 0) {
                Value = other.Value;
              }
              if (other.From.Length != 0) {
                From = other.From;
              }
              if (other.Conditional != false) {
                Conditional = other.Conditional;
              }
              if (other.Assert != 0L) {
                Assert = other.Assert;
              }
              ops_.Add(other.ops_);
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public void MergeFrom(pb::CodedInputStream input) {
              uint tag;
              while ((tag = input.ReadTag()) != 0) {
                switch(tag) {
                  default:
                    input.SkipLastField();
                    break;
                  case 8: {
                    Op = input.ReadInt32();
                    break;
                  }
                  case 18: {
                    Path = input.ReadString();
                    break;
                  }
                  case 26: {
                    Value = input.ReadString();
                    break;
                  }
                  case 34: {
                    From = input.ReadString();
                    break;
                  }
                  case 40: {
                    Conditional = input.ReadBool();
                    break;
                  }
                  case 48: {
                    Assert = input.ReadInt64();
                    break;
                  }
                  case 58: {
                    ops_.AddEntriesFrom(input, _repeated_ops_codec);
                    break;
                  }
                }
              }
            }

            #region Nested types
            /// <summary>Container for nested types declared in the UpdateOp message type.</summary>
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public static partial class Types {
              public enum UpdateOpCode {
                /// <summary>
                //// Add field or value to array at the path.
                /// </summary>
                [pbr::OriginalName("ADD")] Add = 0,
                /// <summary>
                //// Append a value or array of values at the path.
                /// </summary>
                [pbr::OriginalName("APPEND")] Append = 1,
                /// <summary>
                //// Copy value at the path to another path.
                /// </summary>
                [pbr::OriginalName("COPY")] Copy = 2,
                /// <summary>
                //// Add a positive/negative value to the value at the path.
                /// </summary>
                [pbr::OriginalName("INCR")] Incr = 3,
                /// <summary>
                //// Initialize the value at the path ONLY if it’s not already present.
                /// </summary>
                [pbr::OriginalName("INIT")] Init = 4,
                /// <summary>
                //// Perform a merge of the object at the path.
                /// </summary>
                [pbr::OriginalName("MERGE")] Merge = 5,
                /// <summary>
                //// Move a value from one path to another and remove from the original path.
                /// </summary>
                [pbr::OriginalName("MOVE")] Move = 6,
                /// <summary>
                //// Perform a JSON patch with the sequence of operations on the subpath specified
                /// </summary>
                [pbr::OriginalName("PATCH")] Patch = 7,
                /// <summary>
                //// Remove the value or array at the path.
                /// </summary>
                [pbr::OriginalName("REMOVE")] Remove = 8,
                /// <summary>
                //// Replaces an existing value at the specified path.
                /// </summary>
                [pbr::OriginalName("REPLACE")] Replace = 9,
                /// <summary>
                //// Tests equality of the value at the path. The entire patch set fails if the test fails.
                /// </summary>
                [pbr::OriginalName("TEST")] Test = 10,
                /// <summary>
                //// Performs a comparator which returns -1, 0, or 1 depending on whether the value is less than, the same, or greater than the value in the path.
                /// </summary>
                [pbr::OriginalName("COMPARE")] Compare = 11,
              }

            }
            #endregion

          }

          public sealed partial class StorageKey : pb::IMessage<StorageKey> {
            private static readonly pb::MessageParser<StorageKey> _parser = new pb::MessageParser<StorageKey>(() => new StorageKey());
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public static pb::MessageParser<StorageKey> Parser { get { return _parser; } }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public static pbr::MessageDescriptor Descriptor {
              get { return global::Nakama.TStorageUpdate.Types.StorageUpdate.Descriptor.NestedTypes[1]; }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            pbr::MessageDescriptor pb::IMessage.Descriptor {
              get { return Descriptor; }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public StorageKey() {
              OnConstruction();
            }

            partial void OnConstruction();

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public StorageKey(StorageKey other) : this() {
              bucket_ = other.bucket_;
              collection_ = other.collection_;
              record_ = other.record_;
              version_ = other.version_;
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public StorageKey Clone() {
              return new StorageKey(this);
            }

            /// <summary>Field number for the "bucket" field.</summary>
            public const int BucketFieldNumber = 1;
            private string bucket_ = "";
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public string Bucket {
              get { return bucket_; }
              set {
                bucket_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
              }
            }

            /// <summary>Field number for the "collection" field.</summary>
            public const int CollectionFieldNumber = 2;
            private string collection_ = "";
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public string Collection {
              get { return collection_; }
              set {
                collection_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
              }
            }

            /// <summary>Field number for the "record" field.</summary>
            public const int RecordFieldNumber = 3;
            private string record_ = "";
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public string Record {
              get { return record_; }
              set {
                record_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
              }
            }

            /// <summary>Field number for the "version" field.</summary>
            public const int VersionFieldNumber = 4;
            private string version_ = "";
            /// <summary>
            /// if-match and if-none-match
            /// </summary>
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public string Version {
              get { return version_; }
              set {
                version_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
              }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public override bool Equals(object other) {
              return Equals(other as StorageKey);
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public bool Equals(StorageKey other) {
              if (ReferenceEquals(other, null)) {
                return false;
              }
              if (ReferenceEquals(other, this)) {
                return true;
              }
              if (Bucket != other.Bucket) return false;
              if (Collection != other.Collection) return false;
              if (Record != other.Record) return false;
              if (Version != other.Version) return false;
              return true;
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public override int GetHashCode() {
              int hash = 1;
              if (Bucket.Length != 0) hash ^= Bucket.GetHashCode();
              if (Collection.Length != 0) hash ^= Collection.GetHashCode();
              if (Record.Length != 0) hash ^= Record.GetHashCode();
              if (Version.Length != 0) hash ^= Version.GetHashCode();
              return hash;
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public override string ToString() {
              return pb::JsonFormatter.ToDiagnosticString(this);
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public void WriteTo(pb::CodedOutputStream output) {
              if (Bucket.Length != 0) {
                output.WriteRawTag(10);
                output.WriteString(Bucket);
              }
              if (Collection.Length != 0) {
                output.WriteRawTag(18);
                output.WriteString(Collection);
              }
              if (Record.Length != 0) {
                output.WriteRawTag(26);
                output.WriteString(Record);
              }
              if (Version.Length != 0) {
                output.WriteRawTag(34);
                output.WriteString(Version);
              }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public int CalculateSize() {
              int size = 0;
              if (Bucket.Length != 0) {
                size += 1 + pb::CodedOutputStream.ComputeStringSize(Bucket);
              }
              if (Collection.Length != 0) {
                size += 1 + pb::CodedOutputStream.ComputeStringSize(Collection);
              }
              if (Record.Length != 0) {
                size += 1 + pb::CodedOutputStream.ComputeStringSize(Record);
              }
              if (Version.Length != 0) {
                size += 1 + pb::CodedOutputStream.ComputeStringSize(Version);
              }
              return size;
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public void MergeFrom(StorageKey other) {
              if (other == null) {
                return;
              }
              if (other.Bucket.Length != 0) {
                Bucket = other.Bucket;
              }
              if (other.Collection.Length != 0) {
                Collection = other.Collection;
              }
              if (other.Record.Length != 0) {
                Record = other.Record;
              }
              if (other.Version.Length != 0) {
                Version = other.Version;
              }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public void MergeFrom(pb::CodedInputStream input) {
              uint tag;
              while ((tag = input.ReadTag()) != 0) {
                switch(tag) {
                  default:
                    input.SkipLastField();
                    break;
                  case 10: {
                    Bucket = input.ReadString();
                    break;
                  }
                  case 18: {
                    Collection = input.ReadString();
                    break;
                  }
                  case 26: {
                    Record = input.ReadString();
                    break;
                  }
                  case 34: {
                    Version = input.ReadString();
                    break;
                  }
                }
              }
            }

          }

        }
        #endregion

      }

    }
    #endregion

  }

  /// <summary>
  ///*
  /// TStorageKey contains a list of Storage keys for the newly stored data.
  /// </summary>
  public sealed partial class TStorageKeys : pb::IMessage<TStorageKeys> {
    private static readonly pb::MessageParser<TStorageKeys> _parser = new pb::MessageParser<TStorageKeys>(() => new TStorageKeys());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<TStorageKeys> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Nakama.ApiReflection.Descriptor.MessageTypes[69]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TStorageKeys() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TStorageKeys(TStorageKeys other) : this() {
      keys_ = other.keys_.Clone();
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TStorageKeys Clone() {
      return new TStorageKeys(this);
    }

    /// <summary>Field number for the "keys" field.</summary>
    public const int KeysFieldNumber = 1;
    private static readonly pb::FieldCodec<global::Nakama.TStorageKeys.Types.StorageKey> _repeated_keys_codec
        = pb::FieldCodec.ForMessage(10, global::Nakama.TStorageKeys.Types.StorageKey.Parser);
    private readonly pbc::RepeatedField<global::Nakama.TStorageKeys.Types.StorageKey> keys_ = new pbc::RepeatedField<global::Nakama.TStorageKeys.Types.StorageKey>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Nakama.TStorageKeys.Types.StorageKey> Keys {
      get { return keys_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as TStorageKeys);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(TStorageKeys other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!keys_.Equals(other.keys_)) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= keys_.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      keys_.WriteTo(output, _repeated_keys_codec);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += keys_.CalculateSize(_repeated_keys_codec);
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(TStorageKeys other) {
      if (other == null) {
        return;
      }
      keys_.Add(other.keys_);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            keys_.AddEntriesFrom(input, _repeated_keys_codec);
            break;
          }
        }
      }
    }

    #region Nested types
    /// <summary>Container for nested types declared in the TStorageKeys message type.</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static partial class Types {
      public sealed partial class StorageKey : pb::IMessage<StorageKey> {
        private static readonly pb::MessageParser<StorageKey> _parser = new pb::MessageParser<StorageKey>(() => new StorageKey());
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<StorageKey> Parser { get { return _parser; } }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor {
          get { return global::Nakama.TStorageKeys.Descriptor.NestedTypes[0]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor {
          get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public StorageKey() {
          OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public StorageKey(StorageKey other) : this() {
          bucket_ = other.bucket_;
          collection_ = other.collection_;
          record_ = other.record_;
          version_ = other.version_;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public StorageKey Clone() {
          return new StorageKey(this);
        }

        /// <summary>Field number for the "bucket" field.</summary>
        public const int BucketFieldNumber = 1;
        private string bucket_ = "";
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public string Bucket {
          get { return bucket_; }
          set {
            bucket_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
          }
        }

        /// <summary>Field number for the "collection" field.</summary>
        public const int CollectionFieldNumber = 2;
        private string collection_ = "";
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public string Collection {
          get { return collection_; }
          set {
            collection_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
          }
        }

        /// <summary>Field number for the "record" field.</summary>
        public const int RecordFieldNumber = 3;
        private string record_ = "";
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public string Record {
          get { return record_; }
          set {
            record_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
          }
        }

        /// <summary>Field number for the "version" field.</summary>
        public const int VersionFieldNumber = 4;
        private string version_ = "";
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public string Version {
          get { return version_; }
          set {
            version_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other) {
          return Equals(other as StorageKey);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(StorageKey other) {
          if (ReferenceEquals(other, null)) {
            return false;
          }
          if (ReferenceEquals(other, this)) {
            return true;
          }
          if (Bucket != other.Bucket) return false;
          if (Collection != other.Collection) return false;
          if (Record != other.Record) return false;
          if (Version != other.Version) return false;
          return true;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode() {
          int hash = 1;
          if (Bucket.Length != 0) hash ^= Bucket.GetHashCode();
          if (Collection.Length != 0) hash ^= Collection.GetHashCode();
          if (Record.Length != 0) hash ^= Record.GetHashCode();
          if (Version.Length != 0) hash ^= Version.GetHashCode();
          return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString() {
          return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output) {
          if (Bucket.Length != 0) {
            output.WriteRawTag(10);
            output.WriteString(Bucket);
          }
          if (Collection.Length != 0) {
            output.WriteRawTag(18);
            output.WriteString(Collection);
          }
          if (Record.Length != 0) {
            output.WriteRawTag(26);
            output.WriteString(Record);
          }
          if (Version.Length != 0) {
            output.WriteRawTag(34);
            output.WriteString(Version);
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize() {
          int size = 0;
          if (Bucket.Length != 0) {
            size += 1 + pb::CodedOutputStream.ComputeStringSize(Bucket);
          }
          if (Collection.Length != 0) {
            size += 1 + pb::CodedOutputStream.ComputeStringSize(Collection);
          }
          if (Record.Length != 0) {
            size += 1 + pb::CodedOutputStream.ComputeStringSize(Record);
          }
          if (Version.Length != 0) {
            size += 1 + pb::CodedOutputStream.ComputeStringSize(Version);
          }
          return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(StorageKey other) {
          if (other == null) {
            return;
          }
          if (other.Bucket.Length != 0) {
            Bucket = other.Bucket;
          }
          if (other.Collection.Length != 0) {
            Collection = other.Collection;
          }
          if (other.Record.Length != 0) {
            Record = other.Record;
          }
          if (other.Version.Length != 0) {
            Version = other.Version;
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input) {
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                input.SkipLastField();
                break;
              case 10: {
                Bucket = input.ReadString();
                break;
              }
              case 18: {
                Collection = input.ReadString();
                break;
              }
              case 26: {
                Record = input.ReadString();
                break;
              }
              case 34: {
                Version = input.ReadString();
                break;
              }
            }
          }
        }

      }

    }
    #endregion

  }

  /// <summary>
  ///*
  /// TStorageRemove is used to remove a list of records from Storage.
  ///
  /// The server provides transactional gurantuees. If one record fails to be deleted,
  /// the entire operation is rolled backed and marked as an error.
  /// </summary>
  public sealed partial class TStorageRemove : pb::IMessage<TStorageRemove> {
    private static readonly pb::MessageParser<TStorageRemove> _parser = new pb::MessageParser<TStorageRemove>(() => new TStorageRemove());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<TStorageRemove> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Nakama.ApiReflection.Descriptor.MessageTypes[70]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TStorageRemove() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TStorageRemove(TStorageRemove other) : this() {
      keys_ = other.keys_.Clone();
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TStorageRemove Clone() {
      return new TStorageRemove(this);
    }

    /// <summary>Field number for the "keys" field.</summary>
    public const int KeysFieldNumber = 1;
    private static readonly pb::FieldCodec<global::Nakama.TStorageRemove.Types.StorageKey> _repeated_keys_codec
        = pb::FieldCodec.ForMessage(10, global::Nakama.TStorageRemove.Types.StorageKey.Parser);
    private readonly pbc::RepeatedField<global::Nakama.TStorageRemove.Types.StorageKey> keys_ = new pbc::RepeatedField<global::Nakama.TStorageRemove.Types.StorageKey>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Nakama.TStorageRemove.Types.StorageKey> Keys {
      get { return keys_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as TStorageRemove);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(TStorageRemove other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!keys_.Equals(other.keys_)) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= keys_.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      keys_.WriteTo(output, _repeated_keys_codec);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += keys_.CalculateSize(_repeated_keys_codec);
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(TStorageRemove other) {
      if (other == null) {
        return;
      }
      keys_.Add(other.keys_);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            keys_.AddEntriesFrom(input, _repeated_keys_codec);
            break;
          }
        }
      }
    }

    #region Nested types
    /// <summary>Container for nested types declared in the TStorageRemove message type.</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static partial class Types {
      public sealed partial class StorageKey : pb::IMessage<StorageKey> {
        private static readonly pb::MessageParser<StorageKey> _parser = new pb::MessageParser<StorageKey>(() => new StorageKey());
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<StorageKey> Parser { get { return _parser; } }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor {
          get { return global::Nakama.TStorageRemove.Descriptor.NestedTypes[0]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor {
          get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public StorageKey() {
          OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public StorageKey(StorageKey other) : this() {
          bucket_ = other.bucket_;
          collection_ = other.collection_;
          record_ = other.record_;
          version_ = other.version_;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public StorageKey Clone() {
          return new StorageKey(this);
        }

        /// <summary>Field number for the "bucket" field.</summary>
        public const int BucketFieldNumber = 1;
        private string bucket_ = "";
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public string Bucket {
          get { return bucket_; }
          set {
            bucket_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
          }
        }

        /// <summary>Field number for the "collection" field.</summary>
        public const int CollectionFieldNumber = 2;
        private string collection_ = "";
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public string Collection {
          get { return collection_; }
          set {
            collection_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
          }
        }

        /// <summary>Field number for the "record" field.</summary>
        public const int RecordFieldNumber = 3;
        private string record_ = "";
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public string Record {
          get { return record_; }
          set {
            record_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
          }
        }

        /// <summary>Field number for the "version" field.</summary>
        public const int VersionFieldNumber = 4;
        private string version_ = "";
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public string Version {
          get { return version_; }
          set {
            version_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other) {
          return Equals(other as StorageKey);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(StorageKey other) {
          if (ReferenceEquals(other, null)) {
            return false;
          }
          if (ReferenceEquals(other, this)) {
            return true;
          }
          if (Bucket != other.Bucket) return false;
          if (Collection != other.Collection) return false;
          if (Record != other.Record) return false;
          if (Version != other.Version) return false;
          return true;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode() {
          int hash = 1;
          if (Bucket.Length != 0) hash ^= Bucket.GetHashCode();
          if (Collection.Length != 0) hash ^= Collection.GetHashCode();
          if (Record.Length != 0) hash ^= Record.GetHashCode();
          if (Version.Length != 0) hash ^= Version.GetHashCode();
          return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString() {
          return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output) {
          if (Bucket.Length != 0) {
            output.WriteRawTag(10);
            output.WriteString(Bucket);
          }
          if (Collection.Length != 0) {
            output.WriteRawTag(18);
            output.WriteString(Collection);
          }
          if (Record.Length != 0) {
            output.WriteRawTag(26);
            output.WriteString(Record);
          }
          if (Version.Length != 0) {
            output.WriteRawTag(34);
            output.WriteString(Version);
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize() {
          int size = 0;
          if (Bucket.Length != 0) {
            size += 1 + pb::CodedOutputStream.ComputeStringSize(Bucket);
          }
          if (Collection.Length != 0) {
            size += 1 + pb::CodedOutputStream.ComputeStringSize(Collection);
          }
          if (Record.Length != 0) {
            size += 1 + pb::CodedOutputStream.ComputeStringSize(Record);
          }
          if (Version.Length != 0) {
            size += 1 + pb::CodedOutputStream.ComputeStringSize(Version);
          }
          return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(StorageKey other) {
          if (other == null) {
            return;
          }
          if (other.Bucket.Length != 0) {
            Bucket = other.Bucket;
          }
          if (other.Collection.Length != 0) {
            Collection = other.Collection;
          }
          if (other.Record.Length != 0) {
            Record = other.Record;
          }
          if (other.Version.Length != 0) {
            Version = other.Version;
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input) {
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                input.SkipLastField();
                break;
              case 10: {
                Bucket = input.ReadString();
                break;
              }
              case 18: {
                Collection = input.ReadString();
                break;
              }
              case 26: {
                Record = input.ReadString();
                break;
              }
              case 34: {
                Version = input.ReadString();
                break;
              }
            }
          }
        }

      }

    }
    #endregion

  }

  /// <summary>
  ///*
  /// Leaderboard is the core domain type representing a Leaderboard setup in the server.
  /// </summary>
  public sealed partial class Leaderboard : pb::IMessage<Leaderboard> {
    private static readonly pb::MessageParser<Leaderboard> _parser = new pb::MessageParser<Leaderboard>(() => new Leaderboard());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Leaderboard> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Nakama.ApiReflection.Descriptor.MessageTypes[71]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Leaderboard() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Leaderboard(Leaderboard other) : this() {
      id_ = other.id_;
      authoritative_ = other.authoritative_;
      sort_ = other.sort_;
      count_ = other.count_;
      resetSchedule_ = other.resetSchedule_;
      metadata_ = other.metadata_;
      nextId_ = other.nextId_;
      prevId_ = other.prevId_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Leaderboard Clone() {
      return new Leaderboard(this);
    }

    /// <summary>Field number for the "id" field.</summary>
    public const int IdFieldNumber = 1;
    private string id_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Id {
      get { return id_; }
      set {
        id_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "authoritative" field.</summary>
    public const int AuthoritativeFieldNumber = 2;
    private bool authoritative_;
    /// <summary>
    //// Whether the user can submit records directly via the client or not
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Authoritative {
      get { return authoritative_; }
      set {
        authoritative_ = value;
      }
    }

    /// <summary>Field number for the "sort" field.</summary>
    public const int SortFieldNumber = 3;
    private long sort_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long Sort {
      get { return sort_; }
      set {
        sort_ = value;
      }
    }

    /// <summary>Field number for the "count" field.</summary>
    public const int CountFieldNumber = 4;
    private long count_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long Count {
      get { return count_; }
      set {
        count_ = value;
      }
    }

    /// <summary>Field number for the "reset_schedule" field.</summary>
    public const int ResetScheduleFieldNumber = 5;
    private string resetSchedule_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string ResetSchedule {
      get { return resetSchedule_; }
      set {
        resetSchedule_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "metadata" field.</summary>
    public const int MetadataFieldNumber = 6;
    private string metadata_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Metadata {
      get { return metadata_; }
      set {
        metadata_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "next_id" field.</summary>
    public const int NextIdFieldNumber = 7;
    private string nextId_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string NextId {
      get { return nextId_; }
      set {
        nextId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "prev_id" field.</summary>
    public const int PrevIdFieldNumber = 8;
    private string prevId_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string PrevId {
      get { return prevId_; }
      set {
        prevId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Leaderboard);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Leaderboard other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Id != other.Id) return false;
      if (Authoritative != other.Authoritative) return false;
      if (Sort != other.Sort) return false;
      if (Count != other.Count) return false;
      if (ResetSchedule != other.ResetSchedule) return false;
      if (Metadata != other.Metadata) return false;
      if (NextId != other.NextId) return false;
      if (PrevId != other.PrevId) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Id.Length != 0) hash ^= Id.GetHashCode();
      if (Authoritative != false) hash ^= Authoritative.GetHashCode();
      if (Sort != 0L) hash ^= Sort.GetHashCode();
      if (Count != 0L) hash ^= Count.GetHashCode();
      if (ResetSchedule.Length != 0) hash ^= ResetSchedule.GetHashCode();
      if (Metadata.Length != 0) hash ^= Metadata.GetHashCode();
      if (NextId.Length != 0) hash ^= NextId.GetHashCode();
      if (PrevId.Length != 0) hash ^= PrevId.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Id.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Id);
      }
      if (Authoritative != false) {
        output.WriteRawTag(16);
        output.WriteBool(Authoritative);
      }
      if (Sort != 0L) {
        output.WriteRawTag(24);
        output.WriteInt64(Sort);
      }
      if (Count != 0L) {
        output.WriteRawTag(32);
        output.WriteInt64(Count);
      }
      if (ResetSchedule.Length != 0) {
        output.WriteRawTag(42);
        output.WriteString(ResetSchedule);
      }
      if (Metadata.Length != 0) {
        output.WriteRawTag(50);
        output.WriteString(Metadata);
      }
      if (NextId.Length != 0) {
        output.WriteRawTag(58);
        output.WriteString(NextId);
      }
      if (PrevId.Length != 0) {
        output.WriteRawTag(66);
        output.WriteString(PrevId);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Id.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Id);
      }
      if (Authoritative != false) {
        size += 1 + 1;
      }
      if (Sort != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(Sort);
      }
      if (Count != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(Count);
      }
      if (ResetSchedule.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(ResetSchedule);
      }
      if (Metadata.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Metadata);
      }
      if (NextId.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(NextId);
      }
      if (PrevId.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(PrevId);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Leaderboard other) {
      if (other == null) {
        return;
      }
      if (other.Id.Length != 0) {
        Id = other.Id;
      }
      if (other.Authoritative != false) {
        Authoritative = other.Authoritative;
      }
      if (other.Sort != 0L) {
        Sort = other.Sort;
      }
      if (other.Count != 0L) {
        Count = other.Count;
      }
      if (other.ResetSchedule.Length != 0) {
        ResetSchedule = other.ResetSchedule;
      }
      if (other.Metadata.Length != 0) {
        Metadata = other.Metadata;
      }
      if (other.NextId.Length != 0) {
        NextId = other.NextId;
      }
      if (other.PrevId.Length != 0) {
        PrevId = other.PrevId;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            Id = input.ReadString();
            break;
          }
          case 16: {
            Authoritative = input.ReadBool();
            break;
          }
          case 24: {
            Sort = input.ReadInt64();
            break;
          }
          case 32: {
            Count = input.ReadInt64();
            break;
          }
          case 42: {
            ResetSchedule = input.ReadString();
            break;
          }
          case 50: {
            Metadata = input.ReadString();
            break;
          }
          case 58: {
            NextId = input.ReadString();
            break;
          }
          case 66: {
            PrevId = input.ReadString();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///*
  /// LeaderboardRecord is the core domain type representing a Leaderboard entry.
  /// </summary>
  public sealed partial class LeaderboardRecord : pb::IMessage<LeaderboardRecord> {
    private static readonly pb::MessageParser<LeaderboardRecord> _parser = new pb::MessageParser<LeaderboardRecord>(() => new LeaderboardRecord());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<LeaderboardRecord> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Nakama.ApiReflection.Descriptor.MessageTypes[72]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public LeaderboardRecord() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public LeaderboardRecord(LeaderboardRecord other) : this() {
      leaderboardId_ = other.leaderboardId_;
      ownerId_ = other.ownerId_;
      handle_ = other.handle_;
      lang_ = other.lang_;
      location_ = other.location_;
      timezone_ = other.timezone_;
      rank_ = other.rank_;
      score_ = other.score_;
      numScore_ = other.numScore_;
      metadata_ = other.metadata_;
      rankedAt_ = other.rankedAt_;
      updatedAt_ = other.updatedAt_;
      expiresAt_ = other.expiresAt_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public LeaderboardRecord Clone() {
      return new LeaderboardRecord(this);
    }

    /// <summary>Field number for the "leaderboard_id" field.</summary>
    public const int LeaderboardIdFieldNumber = 1;
    private string leaderboardId_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string LeaderboardId {
      get { return leaderboardId_; }
      set {
        leaderboardId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "owner_id" field.</summary>
    public const int OwnerIdFieldNumber = 2;
    private string ownerId_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string OwnerId {
      get { return ownerId_; }
      set {
        ownerId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "handle" field.</summary>
    public const int HandleFieldNumber = 3;
    private string handle_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Handle {
      get { return handle_; }
      set {
        handle_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "lang" field.</summary>
    public const int LangFieldNumber = 4;
    private string lang_ = "";
    /// <summary>
    //// Language tag corresponding to the BCP 47 spec.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Lang {
      get { return lang_; }
      set {
        lang_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "location" field.</summary>
    public const int LocationFieldNumber = 5;
    private string location_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Location {
      get { return location_; }
      set {
        location_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "timezone" field.</summary>
    public const int TimezoneFieldNumber = 6;
    private string timezone_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Timezone {
      get { return timezone_; }
      set {
        timezone_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "rank" field.</summary>
    public const int RankFieldNumber = 7;
    private long rank_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long Rank {
      get { return rank_; }
      set {
        rank_ = value;
      }
    }

    /// <summary>Field number for the "score" field.</summary>
    public const int ScoreFieldNumber = 8;
    private long score_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long Score {
      get { return score_; }
      set {
        score_ = value;
      }
    }

    /// <summary>Field number for the "num_score" field.</summary>
    public const int NumScoreFieldNumber = 9;
    private long numScore_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long NumScore {
      get { return numScore_; }
      set {
        numScore_ = value;
      }
    }

    /// <summary>Field number for the "metadata" field.</summary>
    public const int MetadataFieldNumber = 10;
    private string metadata_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Metadata {
      get { return metadata_; }
      set {
        metadata_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "ranked_at" field.</summary>
    public const int RankedAtFieldNumber = 11;
    private long rankedAt_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long RankedAt {
      get { return rankedAt_; }
      set {
        rankedAt_ = value;
      }
    }

    /// <summary>Field number for the "updated_at" field.</summary>
    public const int UpdatedAtFieldNumber = 12;
    private long updatedAt_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long UpdatedAt {
      get { return updatedAt_; }
      set {
        updatedAt_ = value;
      }
    }

    /// <summary>Field number for the "expires_at" field.</summary>
    public const int ExpiresAtFieldNumber = 13;
    private long expiresAt_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long ExpiresAt {
      get { return expiresAt_; }
      set {
        expiresAt_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as LeaderboardRecord);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(LeaderboardRecord other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (LeaderboardId != other.LeaderboardId) return false;
      if (OwnerId != other.OwnerId) return false;
      if (Handle != other.Handle) return false;
      if (Lang != other.Lang) return false;
      if (Location != other.Location) return false;
      if (Timezone != other.Timezone) return false;
      if (Rank != other.Rank) return false;
      if (Score != other.Score) return false;
      if (NumScore != other.NumScore) return false;
      if (Metadata != other.Metadata) return false;
      if (RankedAt != other.RankedAt) return false;
      if (UpdatedAt != other.UpdatedAt) return false;
      if (ExpiresAt != other.ExpiresAt) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (LeaderboardId.Length != 0) hash ^= LeaderboardId.GetHashCode();
      if (OwnerId.Length != 0) hash ^= OwnerId.GetHashCode();
      if (Handle.Length != 0) hash ^= Handle.GetHashCode();
      if (Lang.Length != 0) hash ^= Lang.GetHashCode();
      if (Location.Length != 0) hash ^= Location.GetHashCode();
      if (Timezone.Length != 0) hash ^= Timezone.GetHashCode();
      if (Rank != 0L) hash ^= Rank.GetHashCode();
      if (Score != 0L) hash ^= Score.GetHashCode();
      if (NumScore != 0L) hash ^= NumScore.GetHashCode();
      if (Metadata.Length != 0) hash ^= Metadata.GetHashCode();
      if (RankedAt != 0L) hash ^= RankedAt.GetHashCode();
      if (UpdatedAt != 0L) hash ^= UpdatedAt.GetHashCode();
      if (ExpiresAt != 0L) hash ^= ExpiresAt.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (LeaderboardId.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(LeaderboardId);
      }
      if (OwnerId.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(OwnerId);
      }
      if (Handle.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(Handle);
      }
      if (Lang.Length != 0) {
        output.WriteRawTag(34);
        output.WriteString(Lang);
      }
      if (Location.Length != 0) {
        output.WriteRawTag(42);
        output.WriteString(Location);
      }
      if (Timezone.Length != 0) {
        output.WriteRawTag(50);
        output.WriteString(Timezone);
      }
      if (Rank != 0L) {
        output.WriteRawTag(56);
        output.WriteInt64(Rank);
      }
      if (Score != 0L) {
        output.WriteRawTag(64);
        output.WriteInt64(Score);
      }
      if (NumScore != 0L) {
        output.WriteRawTag(72);
        output.WriteInt64(NumScore);
      }
      if (Metadata.Length != 0) {
        output.WriteRawTag(82);
        output.WriteString(Metadata);
      }
      if (RankedAt != 0L) {
        output.WriteRawTag(88);
        output.WriteInt64(RankedAt);
      }
      if (UpdatedAt != 0L) {
        output.WriteRawTag(96);
        output.WriteInt64(UpdatedAt);
      }
      if (ExpiresAt != 0L) {
        output.WriteRawTag(104);
        output.WriteInt64(ExpiresAt);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (LeaderboardId.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(LeaderboardId);
      }
      if (OwnerId.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(OwnerId);
      }
      if (Handle.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Handle);
      }
      if (Lang.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Lang);
      }
      if (Location.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Location);
      }
      if (Timezone.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Timezone);
      }
      if (Rank != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(Rank);
      }
      if (Score != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(Score);
      }
      if (NumScore != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(NumScore);
      }
      if (Metadata.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Metadata);
      }
      if (RankedAt != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(RankedAt);
      }
      if (UpdatedAt != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(UpdatedAt);
      }
      if (ExpiresAt != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(ExpiresAt);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(LeaderboardRecord other) {
      if (other == null) {
        return;
      }
      if (other.LeaderboardId.Length != 0) {
        LeaderboardId = other.LeaderboardId;
      }
      if (other.OwnerId.Length != 0) {
        OwnerId = other.OwnerId;
      }
      if (other.Handle.Length != 0) {
        Handle = other.Handle;
      }
      if (other.Lang.Length != 0) {
        Lang = other.Lang;
      }
      if (other.Location.Length != 0) {
        Location = other.Location;
      }
      if (other.Timezone.Length != 0) {
        Timezone = other.Timezone;
      }
      if (other.Rank != 0L) {
        Rank = other.Rank;
      }
      if (other.Score != 0L) {
        Score = other.Score;
      }
      if (other.NumScore != 0L) {
        NumScore = other.NumScore;
      }
      if (other.Metadata.Length != 0) {
        Metadata = other.Metadata;
      }
      if (other.RankedAt != 0L) {
        RankedAt = other.RankedAt;
      }
      if (other.UpdatedAt != 0L) {
        UpdatedAt = other.UpdatedAt;
      }
      if (other.ExpiresAt != 0L) {
        ExpiresAt = other.ExpiresAt;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            LeaderboardId = input.ReadString();
            break;
          }
          case 18: {
            OwnerId = input.ReadString();
            break;
          }
          case 26: {
            Handle = input.ReadString();
            break;
          }
          case 34: {
            Lang = input.ReadString();
            break;
          }
          case 42: {
            Location = input.ReadString();
            break;
          }
          case 50: {
            Timezone = input.ReadString();
            break;
          }
          case 56: {
            Rank = input.ReadInt64();
            break;
          }
          case 64: {
            Score = input.ReadInt64();
            break;
          }
          case 72: {
            NumScore = input.ReadInt64();
            break;
          }
          case 82: {
            Metadata = input.ReadString();
            break;
          }
          case 88: {
            RankedAt = input.ReadInt64();
            break;
          }
          case 96: {
            UpdatedAt = input.ReadInt64();
            break;
          }
          case 104: {
            ExpiresAt = input.ReadInt64();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///*
  /// TLeaderboardsList is used to retrieve a list of leaderboards.
  ///
  /// A list of IDs can be supplied optionally, otherwise all leaderboards are returned.
  ///
  /// @returns TLeaderboards
  /// </summary>
  public sealed partial class TLeaderboardsList : pb::IMessage<TLeaderboardsList> {
    private static readonly pb::MessageParser<TLeaderboardsList> _parser = new pb::MessageParser<TLeaderboardsList>(() => new TLeaderboardsList());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<TLeaderboardsList> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Nakama.ApiReflection.Descriptor.MessageTypes[73]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TLeaderboardsList() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TLeaderboardsList(TLeaderboardsList other) : this() {
      limit_ = other.limit_;
      cursor_ = other.cursor_;
      filterLeaderboardId_ = other.filterLeaderboardId_.Clone();
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TLeaderboardsList Clone() {
      return new TLeaderboardsList(this);
    }

    /// <summary>Field number for the "limit" field.</summary>
    public const int LimitFieldNumber = 1;
    private long limit_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long Limit {
      get { return limit_; }
      set {
        limit_ = value;
      }
    }

    /// <summary>Field number for the "cursor" field.</summary>
    public const int CursorFieldNumber = 2;
    private string cursor_ = "";
    /// <summary>
    //// Use TLeaderboards.cursor to paginate through results.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Cursor {
      get { return cursor_; }
      set {
        cursor_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "filter_leaderboard_id" field.</summary>
    public const int FilterLeaderboardIdFieldNumber = 3;
    private static readonly pb::FieldCodec<string> _repeated_filterLeaderboardId_codec
        = pb::FieldCodec.ForString(26);
    private readonly pbc::RepeatedField<string> filterLeaderboardId_ = new pbc::RepeatedField<string>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<string> FilterLeaderboardId {
      get { return filterLeaderboardId_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as TLeaderboardsList);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(TLeaderboardsList other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Limit != other.Limit) return false;
      if (Cursor != other.Cursor) return false;
      if(!filterLeaderboardId_.Equals(other.filterLeaderboardId_)) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Limit != 0L) hash ^= Limit.GetHashCode();
      if (Cursor.Length != 0) hash ^= Cursor.GetHashCode();
      hash ^= filterLeaderboardId_.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Limit != 0L) {
        output.WriteRawTag(8);
        output.WriteInt64(Limit);
      }
      if (Cursor.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(Cursor);
      }
      filterLeaderboardId_.WriteTo(output, _repeated_filterLeaderboardId_codec);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Limit != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(Limit);
      }
      if (Cursor.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Cursor);
      }
      size += filterLeaderboardId_.CalculateSize(_repeated_filterLeaderboardId_codec);
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(TLeaderboardsList other) {
      if (other == null) {
        return;
      }
      if (other.Limit != 0L) {
        Limit = other.Limit;
      }
      if (other.Cursor.Length != 0) {
        Cursor = other.Cursor;
      }
      filterLeaderboardId_.Add(other.filterLeaderboardId_);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            Limit = input.ReadInt64();
            break;
          }
          case 18: {
            Cursor = input.ReadString();
            break;
          }
          case 26: {
            filterLeaderboardId_.AddEntriesFrom(input, _repeated_filterLeaderboardId_codec);
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///*
  /// TLeaderboards contains a list of leaderboards.
  /// </summary>
  public sealed partial class TLeaderboards : pb::IMessage<TLeaderboards> {
    private static readonly pb::MessageParser<TLeaderboards> _parser = new pb::MessageParser<TLeaderboards>(() => new TLeaderboards());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<TLeaderboards> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Nakama.ApiReflection.Descriptor.MessageTypes[74]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TLeaderboards() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TLeaderboards(TLeaderboards other) : this() {
      leaderboards_ = other.leaderboards_.Clone();
      cursor_ = other.cursor_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TLeaderboards Clone() {
      return new TLeaderboards(this);
    }

    /// <summary>Field number for the "leaderboards" field.</summary>
    public const int LeaderboardsFieldNumber = 1;
    private static readonly pb::FieldCodec<global::Nakama.Leaderboard> _repeated_leaderboards_codec
        = pb::FieldCodec.ForMessage(10, global::Nakama.Leaderboard.Parser);
    private readonly pbc::RepeatedField<global::Nakama.Leaderboard> leaderboards_ = new pbc::RepeatedField<global::Nakama.Leaderboard>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Nakama.Leaderboard> Leaderboards {
      get { return leaderboards_; }
    }

    /// <summary>Field number for the "cursor" field.</summary>
    public const int CursorFieldNumber = 2;
    private string cursor_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Cursor {
      get { return cursor_; }
      set {
        cursor_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as TLeaderboards);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(TLeaderboards other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!leaderboards_.Equals(other.leaderboards_)) return false;
      if (Cursor != other.Cursor) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= leaderboards_.GetHashCode();
      if (Cursor.Length != 0) hash ^= Cursor.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      leaderboards_.WriteTo(output, _repeated_leaderboards_codec);
      if (Cursor.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(Cursor);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += leaderboards_.CalculateSize(_repeated_leaderboards_codec);
      if (Cursor.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Cursor);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(TLeaderboards other) {
      if (other == null) {
        return;
      }
      leaderboards_.Add(other.leaderboards_);
      if (other.Cursor.Length != 0) {
        Cursor = other.Cursor;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            leaderboards_.AddEntriesFrom(input, _repeated_leaderboards_codec);
            break;
          }
          case 18: {
            Cursor = input.ReadString();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///*
  /// TLeaderboardRecordsWrite is used to write new list of records to a given list of leaderboards.
  ///
  /// @returns TLeaderboardRecords
  ///
  /// NOTE: The server only processes the first item of the list, and will ignore and logs a warning message for other items.
  /// </summary>
  public sealed partial class TLeaderboardRecordsWrite : pb::IMessage<TLeaderboardRecordsWrite> {
    private static readonly pb::MessageParser<TLeaderboardRecordsWrite> _parser = new pb::MessageParser<TLeaderboardRecordsWrite>(() => new TLeaderboardRecordsWrite());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<TLeaderboardRecordsWrite> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Nakama.ApiReflection.Descriptor.MessageTypes[75]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TLeaderboardRecordsWrite() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TLeaderboardRecordsWrite(TLeaderboardRecordsWrite other) : this() {
      records_ = other.records_.Clone();
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TLeaderboardRecordsWrite Clone() {
      return new TLeaderboardRecordsWrite(this);
    }

    /// <summary>Field number for the "records" field.</summary>
    public const int RecordsFieldNumber = 1;
    private static readonly pb::FieldCodec<global::Nakama.TLeaderboardRecordsWrite.Types.LeaderboardRecordWrite> _repeated_records_codec
        = pb::FieldCodec.ForMessage(10, global::Nakama.TLeaderboardRecordsWrite.Types.LeaderboardRecordWrite.Parser);
    private readonly pbc::RepeatedField<global::Nakama.TLeaderboardRecordsWrite.Types.LeaderboardRecordWrite> records_ = new pbc::RepeatedField<global::Nakama.TLeaderboardRecordsWrite.Types.LeaderboardRecordWrite>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Nakama.TLeaderboardRecordsWrite.Types.LeaderboardRecordWrite> Records {
      get { return records_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as TLeaderboardRecordsWrite);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(TLeaderboardRecordsWrite other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!records_.Equals(other.records_)) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= records_.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      records_.WriteTo(output, _repeated_records_codec);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += records_.CalculateSize(_repeated_records_codec);
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(TLeaderboardRecordsWrite other) {
      if (other == null) {
        return;
      }
      records_.Add(other.records_);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            records_.AddEntriesFrom(input, _repeated_records_codec);
            break;
          }
        }
      }
    }

    #region Nested types
    /// <summary>Container for nested types declared in the TLeaderboardRecordsWrite message type.</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static partial class Types {
      public sealed partial class LeaderboardRecordWrite : pb::IMessage<LeaderboardRecordWrite> {
        private static readonly pb::MessageParser<LeaderboardRecordWrite> _parser = new pb::MessageParser<LeaderboardRecordWrite>(() => new LeaderboardRecordWrite());
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<LeaderboardRecordWrite> Parser { get { return _parser; } }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor {
          get { return global::Nakama.TLeaderboardRecordsWrite.Descriptor.NestedTypes[0]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor {
          get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public LeaderboardRecordWrite() {
          OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public LeaderboardRecordWrite(LeaderboardRecordWrite other) : this() {
          leaderboardId_ = other.leaderboardId_;
          location_ = other.location_;
          timezone_ = other.timezone_;
          metadata_ = other.metadata_;
          switch (other.OpCase) {
            case OpOneofCase.Incr:
              Incr = other.Incr;
              break;
            case OpOneofCase.Decr:
              Decr = other.Decr;
              break;
            case OpOneofCase.Set:
              Set = other.Set;
              break;
            case OpOneofCase.Best:
              Best = other.Best;
              break;
          }

        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public LeaderboardRecordWrite Clone() {
          return new LeaderboardRecordWrite(this);
        }

        /// <summary>Field number for the "leaderboard_id" field.</summary>
        public const int LeaderboardIdFieldNumber = 1;
        private string leaderboardId_ = "";
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public string LeaderboardId {
          get { return leaderboardId_; }
          set {
            leaderboardId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
          }
        }

        /// <summary>Field number for the "incr" field.</summary>
        public const int IncrFieldNumber = 2;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public long Incr {
          get { return opCase_ == OpOneofCase.Incr ? (long) op_ : 0L; }
          set {
            op_ = value;
            opCase_ = OpOneofCase.Incr;
          }
        }

        /// <summary>Field number for the "decr" field.</summary>
        public const int DecrFieldNumber = 3;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public long Decr {
          get { return opCase_ == OpOneofCase.Decr ? (long) op_ : 0L; }
          set {
            op_ = value;
            opCase_ = OpOneofCase.Decr;
          }
        }

        /// <summary>Field number for the "set" field.</summary>
        public const int SetFieldNumber = 4;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public long Set {
          get { return opCase_ == OpOneofCase.Set ? (long) op_ : 0L; }
          set {
            op_ = value;
            opCase_ = OpOneofCase.Set;
          }
        }

        /// <summary>Field number for the "best" field.</summary>
        public const int BestFieldNumber = 5;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public long Best {
          get { return opCase_ == OpOneofCase.Best ? (long) op_ : 0L; }
          set {
            op_ = value;
            opCase_ = OpOneofCase.Best;
          }
        }

        /// <summary>Field number for the "location" field.</summary>
        public const int LocationFieldNumber = 6;
        private string location_ = "";
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public string Location {
          get { return location_; }
          set {
            location_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
          }
        }

        /// <summary>Field number for the "timezone" field.</summary>
        public const int TimezoneFieldNumber = 7;
        private string timezone_ = "";
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public string Timezone {
          get { return timezone_; }
          set {
            timezone_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
          }
        }

        /// <summary>Field number for the "metadata" field.</summary>
        public const int MetadataFieldNumber = 8;
        private string metadata_ = "";
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public string Metadata {
          get { return metadata_; }
          set {
            metadata_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
          }
        }

        private object op_;
        /// <summary>Enum of possible cases for the "op" oneof.</summary>
        public enum OpOneofCase {
          None = 0,
          Incr = 2,
          Decr = 3,
          Set = 4,
          Best = 5,
        }
        private OpOneofCase opCase_ = OpOneofCase.None;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public OpOneofCase OpCase {
          get { return opCase_; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void ClearOp() {
          opCase_ = OpOneofCase.None;
          op_ = null;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other) {
          return Equals(other as LeaderboardRecordWrite);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(LeaderboardRecordWrite other) {
          if (ReferenceEquals(other, null)) {
            return false;
          }
          if (ReferenceEquals(other, this)) {
            return true;
          }
          if (LeaderboardId != other.LeaderboardId) return false;
          if (Incr != other.Incr) return false;
          if (Decr != other.Decr) return false;
          if (Set != other.Set) return false;
          if (Best != other.Best) return false;
          if (Location != other.Location) return false;
          if (Timezone != other.Timezone) return false;
          if (Metadata != other.Metadata) return false;
          if (OpCase != other.OpCase) return false;
          return true;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode() {
          int hash = 1;
          if (LeaderboardId.Length != 0) hash ^= LeaderboardId.GetHashCode();
          if (opCase_ == OpOneofCase.Incr) hash ^= Incr.GetHashCode();
          if (opCase_ == OpOneofCase.Decr) hash ^= Decr.GetHashCode();
          if (opCase_ == OpOneofCase.Set) hash ^= Set.GetHashCode();
          if (opCase_ == OpOneofCase.Best) hash ^= Best.GetHashCode();
          if (Location.Length != 0) hash ^= Location.GetHashCode();
          if (Timezone.Length != 0) hash ^= Timezone.GetHashCode();
          if (Metadata.Length != 0) hash ^= Metadata.GetHashCode();
          hash ^= (int) opCase_;
          return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString() {
          return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output) {
          if (LeaderboardId.Length != 0) {
            output.WriteRawTag(10);
            output.WriteString(LeaderboardId);
          }
          if (opCase_ == OpOneofCase.Incr) {
            output.WriteRawTag(16);
            output.WriteInt64(Incr);
          }
          if (opCase_ == OpOneofCase.Decr) {
            output.WriteRawTag(24);
            output.WriteInt64(Decr);
          }
          if (opCase_ == OpOneofCase.Set) {
            output.WriteRawTag(32);
            output.WriteInt64(Set);
          }
          if (opCase_ == OpOneofCase.Best) {
            output.WriteRawTag(40);
            output.WriteInt64(Best);
          }
          if (Location.Length != 0) {
            output.WriteRawTag(50);
            output.WriteString(Location);
          }
          if (Timezone.Length != 0) {
            output.WriteRawTag(58);
            output.WriteString(Timezone);
          }
          if (Metadata.Length != 0) {
            output.WriteRawTag(66);
            output.WriteString(Metadata);
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize() {
          int size = 0;
          if (LeaderboardId.Length != 0) {
            size += 1 + pb::CodedOutputStream.ComputeStringSize(LeaderboardId);
          }
          if (opCase_ == OpOneofCase.Incr) {
            size += 1 + pb::CodedOutputStream.ComputeInt64Size(Incr);
          }
          if (opCase_ == OpOneofCase.Decr) {
            size += 1 + pb::CodedOutputStream.ComputeInt64Size(Decr);
          }
          if (opCase_ == OpOneofCase.Set) {
            size += 1 + pb::CodedOutputStream.ComputeInt64Size(Set);
          }
          if (opCase_ == OpOneofCase.Best) {
            size += 1 + pb::CodedOutputStream.ComputeInt64Size(Best);
          }
          if (Location.Length != 0) {
            size += 1 + pb::CodedOutputStream.ComputeStringSize(Location);
          }
          if (Timezone.Length != 0) {
            size += 1 + pb::CodedOutputStream.ComputeStringSize(Timezone);
          }
          if (Metadata.Length != 0) {
            size += 1 + pb::CodedOutputStream.ComputeStringSize(Metadata);
          }
          return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(LeaderboardRecordWrite other) {
          if (other == null) {
            return;
          }
          if (other.LeaderboardId.Length != 0) {
            LeaderboardId = other.LeaderboardId;
          }
          if (other.Location.Length != 0) {
            Location = other.Location;
          }
          if (other.Timezone.Length != 0) {
            Timezone = other.Timezone;
          }
          if (other.Metadata.Length != 0) {
            Metadata = other.Metadata;
          }
          switch (other.OpCase) {
            case OpOneofCase.Incr:
              Incr = other.Incr;
              break;
            case OpOneofCase.Decr:
              Decr = other.Decr;
              break;
            case OpOneofCase.Set:
              Set = other.Set;
              break;
            case OpOneofCase.Best:
              Best = other.Best;
              break;
          }

        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input) {
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                input.SkipLastField();
                break;
              case 10: {
                LeaderboardId = input.ReadString();
                break;
              }
              case 16: {
                Incr = input.ReadInt64();
                break;
              }
              case 24: {
                Decr = input.ReadInt64();
                break;
              }
              case 32: {
                Set = input.ReadInt64();
                break;
              }
              case 40: {
                Best = input.ReadInt64();
                break;
              }
              case 50: {
                Location = input.ReadString();
                break;
              }
              case 58: {
                Timezone = input.ReadString();
                break;
              }
              case 66: {
                Metadata = input.ReadString();
                break;
              }
            }
          }
        }

      }

    }
    #endregion

  }

  /// <summary>
  ///*
  /// TLeaderboardRecordsFetch is used to retrieve a list of records from a given list of leaderboards.
  ///
  /// @returns TLeaderboardRecords
  ///
  /// NOTE: The server only processes the first item of the list, and will ignore and logs a warning message for other items.
  /// </summary>
  public sealed partial class TLeaderboardRecordsFetch : pb::IMessage<TLeaderboardRecordsFetch> {
    private static readonly pb::MessageParser<TLeaderboardRecordsFetch> _parser = new pb::MessageParser<TLeaderboardRecordsFetch>(() => new TLeaderboardRecordsFetch());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<TLeaderboardRecordsFetch> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Nakama.ApiReflection.Descriptor.MessageTypes[76]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TLeaderboardRecordsFetch() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TLeaderboardRecordsFetch(TLeaderboardRecordsFetch other) : this() {
      leaderboardIds_ = other.leaderboardIds_.Clone();
      limit_ = other.limit_;
      cursor_ = other.cursor_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TLeaderboardRecordsFetch Clone() {
      return new TLeaderboardRecordsFetch(this);
    }

    /// <summary>Field number for the "leaderboard_ids" field.</summary>
    public const int LeaderboardIdsFieldNumber = 1;
    private static readonly pb::FieldCodec<string> _repeated_leaderboardIds_codec
        = pb::FieldCodec.ForString(10);
    private readonly pbc::RepeatedField<string> leaderboardIds_ = new pbc::RepeatedField<string>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<string> LeaderboardIds {
      get { return leaderboardIds_; }
    }

    /// <summary>Field number for the "limit" field.</summary>
    public const int LimitFieldNumber = 2;
    private long limit_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long Limit {
      get { return limit_; }
      set {
        limit_ = value;
      }
    }

    /// <summary>Field number for the "cursor" field.</summary>
    public const int CursorFieldNumber = 3;
    private string cursor_ = "";
    /// <summary>
    //// Use TLeaderboardRecords.cursor to paginate through results.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Cursor {
      get { return cursor_; }
      set {
        cursor_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as TLeaderboardRecordsFetch);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(TLeaderboardRecordsFetch other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!leaderboardIds_.Equals(other.leaderboardIds_)) return false;
      if (Limit != other.Limit) return false;
      if (Cursor != other.Cursor) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= leaderboardIds_.GetHashCode();
      if (Limit != 0L) hash ^= Limit.GetHashCode();
      if (Cursor.Length != 0) hash ^= Cursor.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      leaderboardIds_.WriteTo(output, _repeated_leaderboardIds_codec);
      if (Limit != 0L) {
        output.WriteRawTag(16);
        output.WriteInt64(Limit);
      }
      if (Cursor.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(Cursor);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += leaderboardIds_.CalculateSize(_repeated_leaderboardIds_codec);
      if (Limit != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(Limit);
      }
      if (Cursor.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Cursor);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(TLeaderboardRecordsFetch other) {
      if (other == null) {
        return;
      }
      leaderboardIds_.Add(other.leaderboardIds_);
      if (other.Limit != 0L) {
        Limit = other.Limit;
      }
      if (other.Cursor.Length != 0) {
        Cursor = other.Cursor;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            leaderboardIds_.AddEntriesFrom(input, _repeated_leaderboardIds_codec);
            break;
          }
          case 16: {
            Limit = input.ReadInt64();
            break;
          }
          case 26: {
            Cursor = input.ReadString();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///*
  /// TLeaderboardRecordsList is used to retrieve a list of records from a given list of leaderboards with given preset filters.
  ///
  /// @returns TLeaderboardRecords
  /// </summary>
  public sealed partial class TLeaderboardRecordsList : pb::IMessage<TLeaderboardRecordsList> {
    private static readonly pb::MessageParser<TLeaderboardRecordsList> _parser = new pb::MessageParser<TLeaderboardRecordsList>(() => new TLeaderboardRecordsList());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<TLeaderboardRecordsList> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Nakama.ApiReflection.Descriptor.MessageTypes[77]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TLeaderboardRecordsList() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TLeaderboardRecordsList(TLeaderboardRecordsList other) : this() {
      leaderboardId_ = other.leaderboardId_;
      limit_ = other.limit_;
      cursor_ = other.cursor_;
      switch (other.FilterCase) {
        case FilterOneofCase.OwnerId:
          OwnerId = other.OwnerId;
          break;
        case FilterOneofCase.OwnerIds:
          OwnerIds = other.OwnerIds.Clone();
          break;
        case FilterOneofCase.Lang:
          Lang = other.Lang;
          break;
        case FilterOneofCase.Location:
          Location = other.Location;
          break;
        case FilterOneofCase.Timezone:
          Timezone = other.Timezone;
          break;
      }

    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TLeaderboardRecordsList Clone() {
      return new TLeaderboardRecordsList(this);
    }

    /// <summary>Field number for the "leaderboard_id" field.</summary>
    public const int LeaderboardIdFieldNumber = 1;
    private string leaderboardId_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string LeaderboardId {
      get { return leaderboardId_; }
      set {
        leaderboardId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "owner_id" field.</summary>
    public const int OwnerIdFieldNumber = 2;
    /// <summary>
    //// Filter records by one user ID. This is the same as a "heystack" lookup
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string OwnerId {
      get { return filterCase_ == FilterOneofCase.OwnerId ? (string) filter_ : ""; }
      set {
        filter_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
        filterCase_ = FilterOneofCase.OwnerId;
      }
    }

    /// <summary>Field number for the "owner_ids" field.</summary>
    public const int OwnerIdsFieldNumber = 3;
    /// <summary>
    //// Filter records by user IDs
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Nakama.TLeaderboardRecordsList.Types.Owners OwnerIds {
      get { return filterCase_ == FilterOneofCase.OwnerIds ? (global::Nakama.TLeaderboardRecordsList.Types.Owners) filter_ : null; }
      set {
        filter_ = value;
        filterCase_ = value == null ? FilterOneofCase.None : FilterOneofCase.OwnerIds;
      }
    }

    /// <summary>Field number for the "lang" field.</summary>
    public const int LangFieldNumber = 4;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Lang {
      get { return filterCase_ == FilterOneofCase.Lang ? (string) filter_ : ""; }
      set {
        filter_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
        filterCase_ = FilterOneofCase.Lang;
      }
    }

    /// <summary>Field number for the "location" field.</summary>
    public const int LocationFieldNumber = 5;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Location {
      get { return filterCase_ == FilterOneofCase.Location ? (string) filter_ : ""; }
      set {
        filter_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
        filterCase_ = FilterOneofCase.Location;
      }
    }

    /// <summary>Field number for the "timezone" field.</summary>
    public const int TimezoneFieldNumber = 6;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Timezone {
      get { return filterCase_ == FilterOneofCase.Timezone ? (string) filter_ : ""; }
      set {
        filter_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
        filterCase_ = FilterOneofCase.Timezone;
      }
    }

    /// <summary>Field number for the "limit" field.</summary>
    public const int LimitFieldNumber = 7;
    private long limit_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long Limit {
      get { return limit_; }
      set {
        limit_ = value;
      }
    }

    /// <summary>Field number for the "cursor" field.</summary>
    public const int CursorFieldNumber = 8;
    private string cursor_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Cursor {
      get { return cursor_; }
      set {
        cursor_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    private object filter_;
    /// <summary>Enum of possible cases for the "filter" oneof.</summary>
    public enum FilterOneofCase {
      None = 0,
      OwnerId = 2,
      OwnerIds = 3,
      Lang = 4,
      Location = 5,
      Timezone = 6,
    }
    private FilterOneofCase filterCase_ = FilterOneofCase.None;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public FilterOneofCase FilterCase {
      get { return filterCase_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearFilter() {
      filterCase_ = FilterOneofCase.None;
      filter_ = null;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as TLeaderboardRecordsList);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(TLeaderboardRecordsList other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (LeaderboardId != other.LeaderboardId) return false;
      if (OwnerId != other.OwnerId) return false;
      if (!object.Equals(OwnerIds, other.OwnerIds)) return false;
      if (Lang != other.Lang) return false;
      if (Location != other.Location) return false;
      if (Timezone != other.Timezone) return false;
      if (Limit != other.Limit) return false;
      if (Cursor != other.Cursor) return false;
      if (FilterCase != other.FilterCase) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (LeaderboardId.Length != 0) hash ^= LeaderboardId.GetHashCode();
      if (filterCase_ == FilterOneofCase.OwnerId) hash ^= OwnerId.GetHashCode();
      if (filterCase_ == FilterOneofCase.OwnerIds) hash ^= OwnerIds.GetHashCode();
      if (filterCase_ == FilterOneofCase.Lang) hash ^= Lang.GetHashCode();
      if (filterCase_ == FilterOneofCase.Location) hash ^= Location.GetHashCode();
      if (filterCase_ == FilterOneofCase.Timezone) hash ^= Timezone.GetHashCode();
      if (Limit != 0L) hash ^= Limit.GetHashCode();
      if (Cursor.Length != 0) hash ^= Cursor.GetHashCode();
      hash ^= (int) filterCase_;
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (LeaderboardId.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(LeaderboardId);
      }
      if (filterCase_ == FilterOneofCase.OwnerId) {
        output.WriteRawTag(18);
        output.WriteString(OwnerId);
      }
      if (filterCase_ == FilterOneofCase.OwnerIds) {
        output.WriteRawTag(26);
        output.WriteMessage(OwnerIds);
      }
      if (filterCase_ == FilterOneofCase.Lang) {
        output.WriteRawTag(34);
        output.WriteString(Lang);
      }
      if (filterCase_ == FilterOneofCase.Location) {
        output.WriteRawTag(42);
        output.WriteString(Location);
      }
      if (filterCase_ == FilterOneofCase.Timezone) {
        output.WriteRawTag(50);
        output.WriteString(Timezone);
      }
      if (Limit != 0L) {
        output.WriteRawTag(56);
        output.WriteInt64(Limit);
      }
      if (Cursor.Length != 0) {
        output.WriteRawTag(66);
        output.WriteString(Cursor);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (LeaderboardId.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(LeaderboardId);
      }
      if (filterCase_ == FilterOneofCase.OwnerId) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(OwnerId);
      }
      if (filterCase_ == FilterOneofCase.OwnerIds) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(OwnerIds);
      }
      if (filterCase_ == FilterOneofCase.Lang) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Lang);
      }
      if (filterCase_ == FilterOneofCase.Location) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Location);
      }
      if (filterCase_ == FilterOneofCase.Timezone) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Timezone);
      }
      if (Limit != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(Limit);
      }
      if (Cursor.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Cursor);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(TLeaderboardRecordsList other) {
      if (other == null) {
        return;
      }
      if (other.LeaderboardId.Length != 0) {
        LeaderboardId = other.LeaderboardId;
      }
      if (other.Limit != 0L) {
        Limit = other.Limit;
      }
      if (other.Cursor.Length != 0) {
        Cursor = other.Cursor;
      }
      switch (other.FilterCase) {
        case FilterOneofCase.OwnerId:
          OwnerId = other.OwnerId;
          break;
        case FilterOneofCase.OwnerIds:
          if (OwnerIds == null) {
            OwnerIds = new global::Nakama.TLeaderboardRecordsList.Types.Owners();
          }
          OwnerIds.MergeFrom(other.OwnerIds);
          break;
        case FilterOneofCase.Lang:
          Lang = other.Lang;
          break;
        case FilterOneofCase.Location:
          Location = other.Location;
          break;
        case FilterOneofCase.Timezone:
          Timezone = other.Timezone;
          break;
      }

    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            LeaderboardId = input.ReadString();
            break;
          }
          case 18: {
            OwnerId = input.ReadString();
            break;
          }
          case 26: {
            global::Nakama.TLeaderboardRecordsList.Types.Owners subBuilder = new global::Nakama.TLeaderboardRecordsList.Types.Owners();
            if (filterCase_ == FilterOneofCase.OwnerIds) {
              subBuilder.MergeFrom(OwnerIds);
            }
            input.ReadMessage(subBuilder);
            OwnerIds = subBuilder;
            break;
          }
          case 34: {
            Lang = input.ReadString();
            break;
          }
          case 42: {
            Location = input.ReadString();
            break;
          }
          case 50: {
            Timezone = input.ReadString();
            break;
          }
          case 56: {
            Limit = input.ReadInt64();
            break;
          }
          case 66: {
            Cursor = input.ReadString();
            break;
          }
        }
      }
    }

    #region Nested types
    /// <summary>Container for nested types declared in the TLeaderboardRecordsList message type.</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static partial class Types {
      public sealed partial class Owners : pb::IMessage<Owners> {
        private static readonly pb::MessageParser<Owners> _parser = new pb::MessageParser<Owners>(() => new Owners());
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<Owners> Parser { get { return _parser; } }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor {
          get { return global::Nakama.TLeaderboardRecordsList.Descriptor.NestedTypes[0]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor {
          get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public Owners() {
          OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public Owners(Owners other) : this() {
          ownerIds_ = other.ownerIds_.Clone();
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public Owners Clone() {
          return new Owners(this);
        }

        /// <summary>Field number for the "owner_ids" field.</summary>
        public const int OwnerIdsFieldNumber = 1;
        private static readonly pb::FieldCodec<string> _repeated_ownerIds_codec
            = pb::FieldCodec.ForString(10);
        private readonly pbc::RepeatedField<string> ownerIds_ = new pbc::RepeatedField<string>();
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public pbc::RepeatedField<string> OwnerIds {
          get { return ownerIds_; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other) {
          return Equals(other as Owners);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(Owners other) {
          if (ReferenceEquals(other, null)) {
            return false;
          }
          if (ReferenceEquals(other, this)) {
            return true;
          }
          if(!ownerIds_.Equals(other.ownerIds_)) return false;
          return true;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode() {
          int hash = 1;
          hash ^= ownerIds_.GetHashCode();
          return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString() {
          return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output) {
          ownerIds_.WriteTo(output, _repeated_ownerIds_codec);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize() {
          int size = 0;
          size += ownerIds_.CalculateSize(_repeated_ownerIds_codec);
          return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(Owners other) {
          if (other == null) {
            return;
          }
          ownerIds_.Add(other.ownerIds_);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input) {
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                input.SkipLastField();
                break;
              case 10: {
                ownerIds_.AddEntriesFrom(input, _repeated_ownerIds_codec);
                break;
              }
            }
          }
        }

      }

    }
    #endregion

  }

  /// <summary>
  ///*
  /// TLeaderboardRecords contains a list of leaderboard records.
  /// </summary>
  public sealed partial class TLeaderboardRecords : pb::IMessage<TLeaderboardRecords> {
    private static readonly pb::MessageParser<TLeaderboardRecords> _parser = new pb::MessageParser<TLeaderboardRecords>(() => new TLeaderboardRecords());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<TLeaderboardRecords> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Nakama.ApiReflection.Descriptor.MessageTypes[78]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TLeaderboardRecords() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TLeaderboardRecords(TLeaderboardRecords other) : this() {
      records_ = other.records_.Clone();
      cursor_ = other.cursor_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TLeaderboardRecords Clone() {
      return new TLeaderboardRecords(this);
    }

    /// <summary>Field number for the "records" field.</summary>
    public const int RecordsFieldNumber = 1;
    private static readonly pb::FieldCodec<global::Nakama.LeaderboardRecord> _repeated_records_codec
        = pb::FieldCodec.ForMessage(10, global::Nakama.LeaderboardRecord.Parser);
    private readonly pbc::RepeatedField<global::Nakama.LeaderboardRecord> records_ = new pbc::RepeatedField<global::Nakama.LeaderboardRecord>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Nakama.LeaderboardRecord> Records {
      get { return records_; }
    }

    /// <summary>Field number for the "cursor" field.</summary>
    public const int CursorFieldNumber = 2;
    private string cursor_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Cursor {
      get { return cursor_; }
      set {
        cursor_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as TLeaderboardRecords);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(TLeaderboardRecords other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!records_.Equals(other.records_)) return false;
      if (Cursor != other.Cursor) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= records_.GetHashCode();
      if (Cursor.Length != 0) hash ^= Cursor.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      records_.WriteTo(output, _repeated_records_codec);
      if (Cursor.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(Cursor);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += records_.CalculateSize(_repeated_records_codec);
      if (Cursor.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Cursor);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(TLeaderboardRecords other) {
      if (other == null) {
        return;
      }
      records_.Add(other.records_);
      if (other.Cursor.Length != 0) {
        Cursor = other.Cursor;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            records_.AddEntriesFrom(input, _repeated_records_codec);
            break;
          }
          case 18: {
            Cursor = input.ReadString();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///*
  /// TRpc is used to directly invoke the Lua runtime with the given payload.
  /// The script can optionally return some data which will be marshalled into the payload field and sent back to the client.
  ///
  /// @returns TRpc
  /// </summary>
  public sealed partial class TRpc : pb::IMessage<TRpc> {
    private static readonly pb::MessageParser<TRpc> _parser = new pb::MessageParser<TRpc>(() => new TRpc());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<TRpc> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Nakama.ApiReflection.Descriptor.MessageTypes[79]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TRpc() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TRpc(TRpc other) : this() {
      id_ = other.id_;
      payload_ = other.payload_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TRpc Clone() {
      return new TRpc(this);
    }

    /// <summary>Field number for the "id" field.</summary>
    public const int IdFieldNumber = 1;
    private string id_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Id {
      get { return id_; }
      set {
        id_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "payload" field.</summary>
    public const int PayloadFieldNumber = 2;
    private string payload_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Payload {
      get { return payload_; }
      set {
        payload_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as TRpc);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(TRpc other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Id != other.Id) return false;
      if (Payload != other.Payload) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Id.Length != 0) hash ^= Id.GetHashCode();
      if (Payload.Length != 0) hash ^= Payload.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Id.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Id);
      }
      if (Payload.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(Payload);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Id.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Id);
      }
      if (Payload.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Payload);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(TRpc other) {
      if (other == null) {
        return;
      }
      if (other.Id.Length != 0) {
        Id = other.Id;
      }
      if (other.Payload.Length != 0) {
        Payload = other.Payload;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            Id = input.ReadString();
            break;
          }
          case 18: {
            Payload = input.ReadString();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///*
  /// TPurchaseValidation is used to validation purchases made by the client.
  /// Verify an In-App Purchase receipt from Apple or Google purchases.
  ///
  /// @returns TPurchaseRecord
  /// </summary>
  public sealed partial class TPurchaseValidation : pb::IMessage<TPurchaseValidation> {
    private static readonly pb::MessageParser<TPurchaseValidation> _parser = new pb::MessageParser<TPurchaseValidation>(() => new TPurchaseValidation());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<TPurchaseValidation> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Nakama.ApiReflection.Descriptor.MessageTypes[80]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TPurchaseValidation() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TPurchaseValidation(TPurchaseValidation other) : this() {
      switch (other.IdCase) {
        case IdOneofCase.ApplePurchase:
          ApplePurchase = other.ApplePurchase.Clone();
          break;
        case IdOneofCase.GooglePurchase:
          GooglePurchase = other.GooglePurchase.Clone();
          break;
      }

    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TPurchaseValidation Clone() {
      return new TPurchaseValidation(this);
    }

    /// <summary>Field number for the "apple_purchase" field.</summary>
    public const int ApplePurchaseFieldNumber = 1;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Nakama.TPurchaseValidation.Types.ApplePurchase ApplePurchase {
      get { return idCase_ == IdOneofCase.ApplePurchase ? (global::Nakama.TPurchaseValidation.Types.ApplePurchase) id_ : null; }
      set {
        id_ = value;
        idCase_ = value == null ? IdOneofCase.None : IdOneofCase.ApplePurchase;
      }
    }

    /// <summary>Field number for the "google_purchase" field.</summary>
    public const int GooglePurchaseFieldNumber = 2;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Nakama.TPurchaseValidation.Types.GooglePurchase GooglePurchase {
      get { return idCase_ == IdOneofCase.GooglePurchase ? (global::Nakama.TPurchaseValidation.Types.GooglePurchase) id_ : null; }
      set {
        id_ = value;
        idCase_ = value == null ? IdOneofCase.None : IdOneofCase.GooglePurchase;
      }
    }

    private object id_;
    /// <summary>Enum of possible cases for the "id" oneof.</summary>
    public enum IdOneofCase {
      None = 0,
      ApplePurchase = 1,
      GooglePurchase = 2,
    }
    private IdOneofCase idCase_ = IdOneofCase.None;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public IdOneofCase IdCase {
      get { return idCase_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearId() {
      idCase_ = IdOneofCase.None;
      id_ = null;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as TPurchaseValidation);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(TPurchaseValidation other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(ApplePurchase, other.ApplePurchase)) return false;
      if (!object.Equals(GooglePurchase, other.GooglePurchase)) return false;
      if (IdCase != other.IdCase) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (idCase_ == IdOneofCase.ApplePurchase) hash ^= ApplePurchase.GetHashCode();
      if (idCase_ == IdOneofCase.GooglePurchase) hash ^= GooglePurchase.GetHashCode();
      hash ^= (int) idCase_;
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (idCase_ == IdOneofCase.ApplePurchase) {
        output.WriteRawTag(10);
        output.WriteMessage(ApplePurchase);
      }
      if (idCase_ == IdOneofCase.GooglePurchase) {
        output.WriteRawTag(18);
        output.WriteMessage(GooglePurchase);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (idCase_ == IdOneofCase.ApplePurchase) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(ApplePurchase);
      }
      if (idCase_ == IdOneofCase.GooglePurchase) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(GooglePurchase);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(TPurchaseValidation other) {
      if (other == null) {
        return;
      }
      switch (other.IdCase) {
        case IdOneofCase.ApplePurchase:
          if (ApplePurchase == null) {
            ApplePurchase = new global::Nakama.TPurchaseValidation.Types.ApplePurchase();
          }
          ApplePurchase.MergeFrom(other.ApplePurchase);
          break;
        case IdOneofCase.GooglePurchase:
          if (GooglePurchase == null) {
            GooglePurchase = new global::Nakama.TPurchaseValidation.Types.GooglePurchase();
          }
          GooglePurchase.MergeFrom(other.GooglePurchase);
          break;
      }

    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            global::Nakama.TPurchaseValidation.Types.ApplePurchase subBuilder = new global::Nakama.TPurchaseValidation.Types.ApplePurchase();
            if (idCase_ == IdOneofCase.ApplePurchase) {
              subBuilder.MergeFrom(ApplePurchase);
            }
            input.ReadMessage(subBuilder);
            ApplePurchase = subBuilder;
            break;
          }
          case 18: {
            global::Nakama.TPurchaseValidation.Types.GooglePurchase subBuilder = new global::Nakama.TPurchaseValidation.Types.GooglePurchase();
            if (idCase_ == IdOneofCase.GooglePurchase) {
              subBuilder.MergeFrom(GooglePurchase);
            }
            input.ReadMessage(subBuilder);
            GooglePurchase = subBuilder;
            break;
          }
        }
      }
    }

    #region Nested types
    /// <summary>Container for nested types declared in the TPurchaseValidation message type.</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static partial class Types {
      /// <summary>
      ///*
      /// Verify an In-App Purchase receipt from Apple purchases.
      /// </summary>
      public sealed partial class ApplePurchase : pb::IMessage<ApplePurchase> {
        private static readonly pb::MessageParser<ApplePurchase> _parser = new pb::MessageParser<ApplePurchase>(() => new ApplePurchase());
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<ApplePurchase> Parser { get { return _parser; } }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor {
          get { return global::Nakama.TPurchaseValidation.Descriptor.NestedTypes[0]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor {
          get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public ApplePurchase() {
          OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public ApplePurchase(ApplePurchase other) : this() {
          productId_ = other.productId_;
          receiptData_ = other.receiptData_;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public ApplePurchase Clone() {
          return new ApplePurchase(this);
        }

        /// <summary>Field number for the "product_id" field.</summary>
        public const int ProductIdFieldNumber = 1;
        private string productId_ = "";
        /// <summary>
        /// The product, item, or subscription package ID the purchase relates to.
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public string ProductId {
          get { return productId_; }
          set {
            productId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
          }
        }

        /// <summary>Field number for the "receipt_data" field.</summary>
        public const int ReceiptDataFieldNumber = 2;
        private string receiptData_ = "";
        /// <summary>
        /// The receipt data returned by the purchase operation itself. This must be converted to base64.
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public string ReceiptData {
          get { return receiptData_; }
          set {
            receiptData_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other) {
          return Equals(other as ApplePurchase);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(ApplePurchase other) {
          if (ReferenceEquals(other, null)) {
            return false;
          }
          if (ReferenceEquals(other, this)) {
            return true;
          }
          if (ProductId != other.ProductId) return false;
          if (ReceiptData != other.ReceiptData) return false;
          return true;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode() {
          int hash = 1;
          if (ProductId.Length != 0) hash ^= ProductId.GetHashCode();
          if (ReceiptData.Length != 0) hash ^= ReceiptData.GetHashCode();
          return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString() {
          return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output) {
          if (ProductId.Length != 0) {
            output.WriteRawTag(10);
            output.WriteString(ProductId);
          }
          if (ReceiptData.Length != 0) {
            output.WriteRawTag(18);
            output.WriteString(ReceiptData);
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize() {
          int size = 0;
          if (ProductId.Length != 0) {
            size += 1 + pb::CodedOutputStream.ComputeStringSize(ProductId);
          }
          if (ReceiptData.Length != 0) {
            size += 1 + pb::CodedOutputStream.ComputeStringSize(ReceiptData);
          }
          return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(ApplePurchase other) {
          if (other == null) {
            return;
          }
          if (other.ProductId.Length != 0) {
            ProductId = other.ProductId;
          }
          if (other.ReceiptData.Length != 0) {
            ReceiptData = other.ReceiptData;
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input) {
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                input.SkipLastField();
                break;
              case 10: {
                ProductId = input.ReadString();
                break;
              }
              case 18: {
                ReceiptData = input.ReadString();
                break;
              }
            }
          }
        }

      }

      /// <summary>
      ///*
      /// Verify an In-App Purchase receipt from Google purchases.
      /// </summary>
      public sealed partial class GooglePurchase : pb::IMessage<GooglePurchase> {
        private static readonly pb::MessageParser<GooglePurchase> _parser = new pb::MessageParser<GooglePurchase>(() => new GooglePurchase());
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<GooglePurchase> Parser { get { return _parser; } }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor {
          get { return global::Nakama.TPurchaseValidation.Descriptor.NestedTypes[1]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor {
          get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public GooglePurchase() {
          OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public GooglePurchase(GooglePurchase other) : this() {
          productId_ = other.productId_;
          productType_ = other.productType_;
          purchaseToken_ = other.purchaseToken_;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public GooglePurchase Clone() {
          return new GooglePurchase(this);
        }

        /// <summary>Field number for the "product_id" field.</summary>
        public const int ProductIdFieldNumber = 1;
        private string productId_ = "";
        /// <summary>
        /// The identifier of the product or subscription being purchased.
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public string ProductId {
          get { return productId_; }
          set {
            productId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
          }
        }

        /// <summary>Field number for the "product_type" field.</summary>
        public const int ProductTypeFieldNumber = 2;
        private string productType_ = "";
        /// <summary>
        /// Whether the purchase is for a single product or a subscription.
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public string ProductType {
          get { return productType_; }
          set {
            productType_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
          }
        }

        /// <summary>Field number for the "purchase_token" field.</summary>
        public const int PurchaseTokenFieldNumber = 3;
        private string purchaseToken_ = "";
        /// <summary>
        /// The token returned in the purchase operation response, acts as a transaction identifier.
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public string PurchaseToken {
          get { return purchaseToken_; }
          set {
            purchaseToken_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other) {
          return Equals(other as GooglePurchase);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(GooglePurchase other) {
          if (ReferenceEquals(other, null)) {
            return false;
          }
          if (ReferenceEquals(other, this)) {
            return true;
          }
          if (ProductId != other.ProductId) return false;
          if (ProductType != other.ProductType) return false;
          if (PurchaseToken != other.PurchaseToken) return false;
          return true;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode() {
          int hash = 1;
          if (ProductId.Length != 0) hash ^= ProductId.GetHashCode();
          if (ProductType.Length != 0) hash ^= ProductType.GetHashCode();
          if (PurchaseToken.Length != 0) hash ^= PurchaseToken.GetHashCode();
          return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString() {
          return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output) {
          if (ProductId.Length != 0) {
            output.WriteRawTag(10);
            output.WriteString(ProductId);
          }
          if (ProductType.Length != 0) {
            output.WriteRawTag(18);
            output.WriteString(ProductType);
          }
          if (PurchaseToken.Length != 0) {
            output.WriteRawTag(26);
            output.WriteString(PurchaseToken);
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize() {
          int size = 0;
          if (ProductId.Length != 0) {
            size += 1 + pb::CodedOutputStream.ComputeStringSize(ProductId);
          }
          if (ProductType.Length != 0) {
            size += 1 + pb::CodedOutputStream.ComputeStringSize(ProductType);
          }
          if (PurchaseToken.Length != 0) {
            size += 1 + pb::CodedOutputStream.ComputeStringSize(PurchaseToken);
          }
          return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(GooglePurchase other) {
          if (other == null) {
            return;
          }
          if (other.ProductId.Length != 0) {
            ProductId = other.ProductId;
          }
          if (other.ProductType.Length != 0) {
            ProductType = other.ProductType;
          }
          if (other.PurchaseToken.Length != 0) {
            PurchaseToken = other.PurchaseToken;
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input) {
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                input.SkipLastField();
                break;
              case 10: {
                ProductId = input.ReadString();
                break;
              }
              case 18: {
                ProductType = input.ReadString();
                break;
              }
              case 26: {
                PurchaseToken = input.ReadString();
                break;
              }
            }
          }
        }

      }

    }
    #endregion

  }

  /// <summary>
  ///*
  /// TPurchaseRecord is the response of purchase validation
  /// </summary>
  public sealed partial class TPurchaseRecord : pb::IMessage<TPurchaseRecord> {
    private static readonly pb::MessageParser<TPurchaseRecord> _parser = new pb::MessageParser<TPurchaseRecord>(() => new TPurchaseRecord());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<TPurchaseRecord> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Nakama.ApiReflection.Descriptor.MessageTypes[81]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TPurchaseRecord() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TPurchaseRecord(TPurchaseRecord other) : this() {
      success_ = other.success_;
      seenBefore_ = other.seenBefore_;
      purchaseProviderReachable_ = other.purchaseProviderReachable_;
      message_ = other.message_;
      data_ = other.data_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TPurchaseRecord Clone() {
      return new TPurchaseRecord(this);
    }

    /// <summary>Field number for the "success" field.</summary>
    public const int SuccessFieldNumber = 1;
    private bool success_;
    /// <summary>
    //// Whether or not the transaction is valid and all the information matches.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Success {
      get { return success_; }
      set {
        success_ = value;
      }
    }

    /// <summary>Field number for the "seen_before" field.</summary>
    public const int SeenBeforeFieldNumber = 2;
    private bool seenBefore_;
    /// <summary>
    //// If this is a new transaction or if Nakama has a log of it.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool SeenBefore {
      get { return seenBefore_; }
      set {
        seenBefore_ = value;
      }
    }

    /// <summary>Field number for the "purchase_provider_reachable" field.</summary>
    public const int PurchaseProviderReachableFieldNumber = 3;
    private bool purchaseProviderReachable_;
    /// <summary>
    //// Indicates whether or not Nakama was able to reach the remote purchase service.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool PurchaseProviderReachable {
      get { return purchaseProviderReachable_; }
      set {
        purchaseProviderReachable_ = value;
      }
    }

    /// <summary>Field number for the "message" field.</summary>
    public const int MessageFieldNumber = 6;
    private string message_ = "";
    /// <summary>
    //// A string indicating why the purchase verification failed, if appropriate.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Message {
      get { return message_; }
      set {
        message_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "data" field.</summary>
    public const int DataFieldNumber = 5;
    private string data_ = "";
    /// <summary>
    //// The complete response Nakama received from the remote service.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Data {
      get { return data_; }
      set {
        data_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as TPurchaseRecord);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(TPurchaseRecord other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Success != other.Success) return false;
      if (SeenBefore != other.SeenBefore) return false;
      if (PurchaseProviderReachable != other.PurchaseProviderReachable) return false;
      if (Message != other.Message) return false;
      if (Data != other.Data) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Success != false) hash ^= Success.GetHashCode();
      if (SeenBefore != false) hash ^= SeenBefore.GetHashCode();
      if (PurchaseProviderReachable != false) hash ^= PurchaseProviderReachable.GetHashCode();
      if (Message.Length != 0) hash ^= Message.GetHashCode();
      if (Data.Length != 0) hash ^= Data.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Success != false) {
        output.WriteRawTag(8);
        output.WriteBool(Success);
      }
      if (SeenBefore != false) {
        output.WriteRawTag(16);
        output.WriteBool(SeenBefore);
      }
      if (PurchaseProviderReachable != false) {
        output.WriteRawTag(24);
        output.WriteBool(PurchaseProviderReachable);
      }
      if (Data.Length != 0) {
        output.WriteRawTag(42);
        output.WriteString(Data);
      }
      if (Message.Length != 0) {
        output.WriteRawTag(50);
        output.WriteString(Message);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Success != false) {
        size += 1 + 1;
      }
      if (SeenBefore != false) {
        size += 1 + 1;
      }
      if (PurchaseProviderReachable != false) {
        size += 1 + 1;
      }
      if (Message.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Message);
      }
      if (Data.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Data);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(TPurchaseRecord other) {
      if (other == null) {
        return;
      }
      if (other.Success != false) {
        Success = other.Success;
      }
      if (other.SeenBefore != false) {
        SeenBefore = other.SeenBefore;
      }
      if (other.PurchaseProviderReachable != false) {
        PurchaseProviderReachable = other.PurchaseProviderReachable;
      }
      if (other.Message.Length != 0) {
        Message = other.Message;
      }
      if (other.Data.Length != 0) {
        Data = other.Data;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            Success = input.ReadBool();
            break;
          }
          case 16: {
            SeenBefore = input.ReadBool();
            break;
          }
          case 24: {
            PurchaseProviderReachable = input.ReadBool();
            break;
          }
          case 42: {
            Data = input.ReadString();
            break;
          }
          case 50: {
            Message = input.ReadString();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///*
  /// Notification is the core domain type representing an in-app notification.
  /// </summary>
  public sealed partial class Notification : pb::IMessage<Notification> {
    private static readonly pb::MessageParser<Notification> _parser = new pb::MessageParser<Notification>(() => new Notification());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Notification> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Nakama.ApiReflection.Descriptor.MessageTypes[82]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Notification() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Notification(Notification other) : this() {
      id_ = other.id_;
      subject_ = other.subject_;
      content_ = other.content_;
      code_ = other.code_;
      senderId_ = other.senderId_;
      createdAt_ = other.createdAt_;
      expiresAt_ = other.expiresAt_;
      persistent_ = other.persistent_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Notification Clone() {
      return new Notification(this);
    }

    /// <summary>Field number for the "id" field.</summary>
    public const int IdFieldNumber = 1;
    private string id_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Id {
      get { return id_; }
      set {
        id_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "subject" field.</summary>
    public const int SubjectFieldNumber = 2;
    private string subject_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Subject {
      get { return subject_; }
      set {
        subject_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "content" field.</summary>
    public const int ContentFieldNumber = 3;
    private string content_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Content {
      get { return content_; }
      set {
        content_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "code" field.</summary>
    public const int CodeFieldNumber = 4;
    private long code_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long Code {
      get { return code_; }
      set {
        code_ = value;
      }
    }

    /// <summary>Field number for the "sender_id" field.</summary>
    public const int SenderIdFieldNumber = 5;
    private string senderId_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string SenderId {
      get { return senderId_; }
      set {
        senderId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "created_at" field.</summary>
    public const int CreatedAtFieldNumber = 6;
    private long createdAt_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long CreatedAt {
      get { return createdAt_; }
      set {
        createdAt_ = value;
      }
    }

    /// <summary>Field number for the "expires_at" field.</summary>
    public const int ExpiresAtFieldNumber = 7;
    private long expiresAt_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long ExpiresAt {
      get { return expiresAt_; }
      set {
        expiresAt_ = value;
      }
    }

    /// <summary>Field number for the "persistent" field.</summary>
    public const int PersistentFieldNumber = 8;
    private bool persistent_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Persistent {
      get { return persistent_; }
      set {
        persistent_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Notification);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Notification other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Id != other.Id) return false;
      if (Subject != other.Subject) return false;
      if (Content != other.Content) return false;
      if (Code != other.Code) return false;
      if (SenderId != other.SenderId) return false;
      if (CreatedAt != other.CreatedAt) return false;
      if (ExpiresAt != other.ExpiresAt) return false;
      if (Persistent != other.Persistent) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Id.Length != 0) hash ^= Id.GetHashCode();
      if (Subject.Length != 0) hash ^= Subject.GetHashCode();
      if (Content.Length != 0) hash ^= Content.GetHashCode();
      if (Code != 0L) hash ^= Code.GetHashCode();
      if (SenderId.Length != 0) hash ^= SenderId.GetHashCode();
      if (CreatedAt != 0L) hash ^= CreatedAt.GetHashCode();
      if (ExpiresAt != 0L) hash ^= ExpiresAt.GetHashCode();
      if (Persistent != false) hash ^= Persistent.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Id.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Id);
      }
      if (Subject.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(Subject);
      }
      if (Content.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(Content);
      }
      if (Code != 0L) {
        output.WriteRawTag(32);
        output.WriteInt64(Code);
      }
      if (SenderId.Length != 0) {
        output.WriteRawTag(42);
        output.WriteString(SenderId);
      }
      if (CreatedAt != 0L) {
        output.WriteRawTag(48);
        output.WriteInt64(CreatedAt);
      }
      if (ExpiresAt != 0L) {
        output.WriteRawTag(56);
        output.WriteInt64(ExpiresAt);
      }
      if (Persistent != false) {
        output.WriteRawTag(64);
        output.WriteBool(Persistent);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Id.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Id);
      }
      if (Subject.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Subject);
      }
      if (Content.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Content);
      }
      if (Code != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(Code);
      }
      if (SenderId.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(SenderId);
      }
      if (CreatedAt != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(CreatedAt);
      }
      if (ExpiresAt != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(ExpiresAt);
      }
      if (Persistent != false) {
        size += 1 + 1;
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Notification other) {
      if (other == null) {
        return;
      }
      if (other.Id.Length != 0) {
        Id = other.Id;
      }
      if (other.Subject.Length != 0) {
        Subject = other.Subject;
      }
      if (other.Content.Length != 0) {
        Content = other.Content;
      }
      if (other.Code != 0L) {
        Code = other.Code;
      }
      if (other.SenderId.Length != 0) {
        SenderId = other.SenderId;
      }
      if (other.CreatedAt != 0L) {
        CreatedAt = other.CreatedAt;
      }
      if (other.ExpiresAt != 0L) {
        ExpiresAt = other.ExpiresAt;
      }
      if (other.Persistent != false) {
        Persistent = other.Persistent;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            Id = input.ReadString();
            break;
          }
          case 18: {
            Subject = input.ReadString();
            break;
          }
          case 26: {
            Content = input.ReadString();
            break;
          }
          case 32: {
            Code = input.ReadInt64();
            break;
          }
          case 42: {
            SenderId = input.ReadString();
            break;
          }
          case 48: {
            CreatedAt = input.ReadInt64();
            break;
          }
          case 56: {
            ExpiresAt = input.ReadInt64();
            break;
          }
          case 64: {
            Persistent = input.ReadBool();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///*
  /// Notification is the core domain type representing a list of live in-app notification.
  /// </summary>
  public sealed partial class Notifications : pb::IMessage<Notifications> {
    private static readonly pb::MessageParser<Notifications> _parser = new pb::MessageParser<Notifications>(() => new Notifications());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Notifications> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Nakama.ApiReflection.Descriptor.MessageTypes[83]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Notifications() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Notifications(Notifications other) : this() {
      notifications_ = other.notifications_.Clone();
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Notifications Clone() {
      return new Notifications(this);
    }

    /// <summary>Field number for the "notifications" field.</summary>
    public const int Notifications_FieldNumber = 1;
    private static readonly pb::FieldCodec<global::Nakama.Notification> _repeated_notifications_codec
        = pb::FieldCodec.ForMessage(10, global::Nakama.Notification.Parser);
    private readonly pbc::RepeatedField<global::Nakama.Notification> notifications_ = new pbc::RepeatedField<global::Nakama.Notification>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Nakama.Notification> Notifications_ {
      get { return notifications_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Notifications);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Notifications other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!notifications_.Equals(other.notifications_)) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= notifications_.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      notifications_.WriteTo(output, _repeated_notifications_codec);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += notifications_.CalculateSize(_repeated_notifications_codec);
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Notifications other) {
      if (other == null) {
        return;
      }
      notifications_.Add(other.notifications_);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            notifications_.AddEntriesFrom(input, _repeated_notifications_codec);
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///*
  /// TNotificationsList is used to list unexpired notifications.
  /// </summary>
  public sealed partial class TNotificationsList : pb::IMessage<TNotificationsList> {
    private static readonly pb::MessageParser<TNotificationsList> _parser = new pb::MessageParser<TNotificationsList>(() => new TNotificationsList());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<TNotificationsList> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Nakama.ApiReflection.Descriptor.MessageTypes[84]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TNotificationsList() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TNotificationsList(TNotificationsList other) : this() {
      limit_ = other.limit_;
      resumableCursor_ = other.resumableCursor_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TNotificationsList Clone() {
      return new TNotificationsList(this);
    }

    /// <summary>Field number for the "limit" field.</summary>
    public const int LimitFieldNumber = 1;
    private long limit_;
    /// <summary>
    //// Max number of notifications to list. Between 10 and 100.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long Limit {
      get { return limit_; }
      set {
        limit_ = value;
      }
    }

    /// <summary>Field number for the "resumable_cursor" field.</summary>
    public const int ResumableCursorFieldNumber = 2;
    private string resumableCursor_ = "";
    /// <summary>
    //// Use this cursor to paginate notifications.
    //// Cache this to catch up to new notifications.
    //// The value of this comes from TNotifications.resumable_cursor.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string ResumableCursor {
      get { return resumableCursor_; }
      set {
        resumableCursor_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as TNotificationsList);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(TNotificationsList other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Limit != other.Limit) return false;
      if (ResumableCursor != other.ResumableCursor) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Limit != 0L) hash ^= Limit.GetHashCode();
      if (ResumableCursor.Length != 0) hash ^= ResumableCursor.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Limit != 0L) {
        output.WriteRawTag(8);
        output.WriteInt64(Limit);
      }
      if (ResumableCursor.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(ResumableCursor);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Limit != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(Limit);
      }
      if (ResumableCursor.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(ResumableCursor);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(TNotificationsList other) {
      if (other == null) {
        return;
      }
      if (other.Limit != 0L) {
        Limit = other.Limit;
      }
      if (other.ResumableCursor.Length != 0) {
        ResumableCursor = other.ResumableCursor;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            Limit = input.ReadInt64();
            break;
          }
          case 18: {
            ResumableCursor = input.ReadString();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///*
  /// TNotifications is the response of listing notifications
  /// </summary>
  public sealed partial class TNotifications : pb::IMessage<TNotifications> {
    private static readonly pb::MessageParser<TNotifications> _parser = new pb::MessageParser<TNotifications>(() => new TNotifications());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<TNotifications> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Nakama.ApiReflection.Descriptor.MessageTypes[85]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TNotifications() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TNotifications(TNotifications other) : this() {
      notifications_ = other.notifications_.Clone();
      resumableCursor_ = other.resumableCursor_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TNotifications Clone() {
      return new TNotifications(this);
    }

    /// <summary>Field number for the "notifications" field.</summary>
    public const int NotificationsFieldNumber = 1;
    private static readonly pb::FieldCodec<global::Nakama.Notification> _repeated_notifications_codec
        = pb::FieldCodec.ForMessage(10, global::Nakama.Notification.Parser);
    private readonly pbc::RepeatedField<global::Nakama.Notification> notifications_ = new pbc::RepeatedField<global::Nakama.Notification>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Nakama.Notification> Notifications {
      get { return notifications_; }
    }

    /// <summary>Field number for the "resumable_cursor" field.</summary>
    public const int ResumableCursorFieldNumber = 2;
    private string resumableCursor_ = "";
    /// <summary>
    //// Use this cursor to paginate notifications.
    //// Cache this to catch up to new notifications.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string ResumableCursor {
      get { return resumableCursor_; }
      set {
        resumableCursor_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as TNotifications);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(TNotifications other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!notifications_.Equals(other.notifications_)) return false;
      if (ResumableCursor != other.ResumableCursor) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= notifications_.GetHashCode();
      if (ResumableCursor.Length != 0) hash ^= ResumableCursor.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      notifications_.WriteTo(output, _repeated_notifications_codec);
      if (ResumableCursor.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(ResumableCursor);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += notifications_.CalculateSize(_repeated_notifications_codec);
      if (ResumableCursor.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(ResumableCursor);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(TNotifications other) {
      if (other == null) {
        return;
      }
      notifications_.Add(other.notifications_);
      if (other.ResumableCursor.Length != 0) {
        ResumableCursor = other.ResumableCursor;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            notifications_.AddEntriesFrom(input, _repeated_notifications_codec);
            break;
          }
          case 18: {
            ResumableCursor = input.ReadString();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///*
  /// TNotificationsRemove is used to delete notifications.
  /// </summary>
  public sealed partial class TNotificationsRemove : pb::IMessage<TNotificationsRemove> {
    private static readonly pb::MessageParser<TNotificationsRemove> _parser = new pb::MessageParser<TNotificationsRemove>(() => new TNotificationsRemove());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<TNotificationsRemove> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Nakama.ApiReflection.Descriptor.MessageTypes[86]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TNotificationsRemove() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TNotificationsRemove(TNotificationsRemove other) : this() {
      notificationIds_ = other.notificationIds_.Clone();
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TNotificationsRemove Clone() {
      return new TNotificationsRemove(this);
    }

    /// <summary>Field number for the "notification_ids" field.</summary>
    public const int NotificationIdsFieldNumber = 1;
    private static readonly pb::FieldCodec<string> _repeated_notificationIds_codec
        = pb::FieldCodec.ForString(10);
    private readonly pbc::RepeatedField<string> notificationIds_ = new pbc::RepeatedField<string>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<string> NotificationIds {
      get { return notificationIds_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as TNotificationsRemove);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(TNotificationsRemove other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!notificationIds_.Equals(other.notificationIds_)) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= notificationIds_.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      notificationIds_.WriteTo(output, _repeated_notificationIds_codec);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += notificationIds_.CalculateSize(_repeated_notificationIds_codec);
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(TNotificationsRemove other) {
      if (other == null) {
        return;
      }
      notificationIds_.Add(other.notificationIds_);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            notificationIds_.AddEntriesFrom(input, _repeated_notificationIds_codec);
            break;
          }
        }
      }
    }

  }

  #endregion

}

#endregion Designer generated code
